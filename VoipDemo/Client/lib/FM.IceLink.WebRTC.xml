<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FM.IceLink.WebRTC</name>
    </assembly>
    <members>
        <member name="T:FM.IceLink.WebRTC.AndroidImageUtility">
             <summary>
             Utility class for common bitmap operations.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidImageUtility.BitmapToBuffer(Android.Graphics.Bitmap)">
             <summary>
             Converts an Android Bitmap to a <see cref="T:FM.IceLink.WebRTC.VideoBuffer" />.
             </summary>
             <param name="bitmap">The image to convert.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidImageUtility.BufferToBitmap(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Converts a <see cref="T:FM.IceLink.WebRTC.VideoBuffer" /> to an Android Bitmap.
             </summary>
             <param name="videoBuffer">The video buffer to convert.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.ReliableDataType">
             <summary>
             Indicates the type of data transferred over WebRTC
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.ReliableDataType.String">
             <summary>
             UTF-8 encoded Strings
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.ReliableDataType.Binary">
             <summary>
             Binary array data
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.ReliableDataReceiveArgs">
             <summary>
             Arguments for the reliable data channel receive event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableDataReceiveArgs.Channel">
             <summary>
             Gets or sets the channel description.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableDataReceiveArgs.DataString">
             <summary>
             Gets or sets the received string data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableDataReceiveArgs.DataBytes">
             <summary>
             Gets or sets the received binary data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableDataReceiveArgs.DataType">
             <summary>
             Gets the type of the data.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataReceiveArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataReceiveArgs.ToJson(FM.IceLink.WebRTC.ReliableDataReceiveArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="receiveArgs">The receive arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataReceiveArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="receiveArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized receive arguments.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioMixer">
             <summary>
             An audio mixer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioMixer.ClockRate">
             <summary>
             Gets the output clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioMixer.Channels">
             <summary>
             Gets the output channel count.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioMixer.PacketTime">
             <summary>
             Gets the duration of the packets (input and output) in milliseconds.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioMixer.SourcesCount">
             <summary>
             Gets the number of sources in the mix.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.AudioMixer.OnFrame">
             <summary>
             Raised when a mixed frame is available.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioMixer.#ctor(System.Int32,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AudioMixer" /> class.
             </summary>
             <param name="clockRate">The output clock rate.</param>
             <param name="channels">The output channel count.</param>
             <param name="packetTime">The duration of the packets (input and output) in milliseconds.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioMixer.Start">
             <summary>
             Starts this instance.
             </summary>
             <returns><c>true</c> if the mixer was started; <c>false</c> if the mixer was already started.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioMixer.Stop">
             <summary>
             Stops this instance.
             </summary>
             <returns><c>true</c> if the mixer was stopped; <c>false</c> if the mixer was already stopped.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioMixer.AddSource(System.String,System.Int32,System.Int32)">
             <summary>
             Adds a source.
             </summary>
             <param name="sourceId">The source identifier.</param>
             <param name="clockRate">The source clock rate.</param>
             <param name="channels">The source channel count.</param>
             <returns><c>true</c> if the source was added; <c>false</c> if the source already existed.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioMixer.RemoveSource(System.String)">
             <summary>
             Removes a source.
             </summary>
             <param name="sourceId">The source identifier.</param>
             <returns><c>true</c> if the source was removed; <c>false</c> if the source did not exist.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioMixer.AddSourceFrame(System.String,FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Adds a source frame.
             </summary>
             <param name="sourceId">The source identifier.</param>
             <param name="frame">The frame.</param>
             <returns><c>true</c> if the frame was mixed; otherwise, <c>false</c>.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.AndroidScreenCaptureProvider">
             <summary>
             An Android screen capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.View">
             <summary>
             Gets or sets the view to capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.#ctor(Android.Views.View)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AndroidScreenCaptureProvider" /> class.
             </summary>
             <param name="view">The view to capture.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.#ctor(Android.Views.View,Android.Content.Context)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AndroidScreenCaptureProvider" /> class.
             </summary>
             <param name="view">The view to capture.</param>
             <param name="context">The current Android context, used to create the video view.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.#ctor(Android.Views.View,Android.Content.Context,FM.IceLink.WebRTC.LayoutScale)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AndroidScreenCaptureProvider" /> class.
             </summary>
             <param name="view">The view to capture.</param>
             <param name="context">The current Android context, used to create the video view.</param>
             <param name="previewScale">The scaling algorithm to use for the preview.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.#ctor(Android.Views.View,FM.IceLink.WebRTC.ImageViewVideoRenderProvider)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AndroidScreenCaptureProvider" /> class.
             </summary>
             <param name="view">The view to capture.</param>
             <param name="preview">The preview render provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.Initialize(FM.IceLink.WebRTC.VideoCaptureInitializeArgs)">
             <summary>
             Initializes the video capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.Destroy">
             <summary>
             Destroys this instance.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.Start">
             <summary>
             Starts the video capture.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.Stop">
             <summary>
             Stops the video capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.GetLabel">
             <summary>
             Gets the label of the video device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.GetPreviewControl">
             <summary>
             Gets the video capture preview control.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.GetFrontDeviceNumber">
             <summary>
             Gets the front device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidScreenCaptureProvider.GetRearDeviceNumber">
             <summary>
             Gets the rear device number.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.DirectAudioCaptureProvider">
             <summary>
             A direct audio capture provider that allows application
             code to send frames at custom timing intervals.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectAudioCaptureProvider.SendFrame(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Adds a frame to be sent to all peer IDs.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectAudioCaptureProvider.SendFrame(FM.IceLink.WebRTC.AudioBuffer,System.String[])">
             <summary>
             Adds a frame to be sent to specific peer IDs.
             </summary>
             <param name="frame">The frame.</param>
             <param name="peerIds">The IDs of the remote peers.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectAudioCaptureProvider.Initialize(FM.IceLink.WebRTC.AudioCaptureInitializeArgs)">
             <summary>
             Initializes the audio capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectAudioCaptureProvider.Start">
             <summary>
             Starts the audio capture provider.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectAudioCaptureProvider.Stop">
             <summary>
             Stops the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectAudioCaptureProvider.Destroy">
             <summary>
             Destroys the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectAudioCaptureProvider.GetLabel">
             <summary>
             Gets the label of the audio device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectAudioCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.DirectVideoCaptureProvider">
             <summary>
             A direct video capture provider that allows application
             code to send frames at custom timing intervals.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.SendFrame(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Adds a frame to be sent to all peer IDs.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.SendFrame(FM.IceLink.WebRTC.VideoBuffer,System.String[])">
             <summary>
             Adds a frame to be sent to specific peer IDs.
             </summary>
             <param name="frame">The frame.</param>
             <param name="peerIds">The IDs of the remote peers.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.Initialize(FM.IceLink.WebRTC.VideoCaptureInitializeArgs)">
             <summary>
             Initializes the video capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.Start">
             <summary>
             Starts the video capture provider.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.Stop">
             <summary>
             Stops the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.Destroy">
             <summary>
             Destroys the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.GetLabel">
             <summary>
             Gets the label of the video device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.GetPreviewControl">
             <summary>
             Gets the video capture preview control.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.GetFrontDeviceNumber">
             <summary>
             Gets the front device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DirectVideoCaptureProvider.GetRearDeviceNumber">
             <summary>
             Gets the rear device number.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MixedAudioCaptureProvider">
             <summary>
             Audio capture provider implementation that captures from a mixer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MixedAudioCaptureProvider.Mixer">
             <summary>
             Gets the mixer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioCaptureProvider.Initialize(FM.IceLink.WebRTC.AudioCaptureInitializeArgs)">
             <summary>
             Initializes the audio capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioCaptureProvider.Destroy">
             <summary>
             Destroys the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioCaptureProvider.Start">
             <summary>
             Starts the audio capture provider.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioCaptureProvider.Stop">
             <summary>
             Stops the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioCaptureProvider.GetLabel">
             <summary>
             Gets the label of the audio device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.H264Accumulator">
             <summary>
             Accumulates incoming H264 nalus.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Accumulator.ClearAged">
             <summary>
             Clears packets missing fragments.
             </summary>
             <returns>The number of cleared packets.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Accumulator.Add(FM.IceLink.RTPPacket)">
             <summary>
             Adds the specified packet.
             </summary>
             <param name="rtpPacket">The RTP packet.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.H264Frame">
             <summary>
             An H264 frame built from H264Packets containing H264Nalus and NALU fragments.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Frame.MaxAge">
             <summary>
             Gets or sets the maximum age (defaults to 2).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Frame.#ctor(FM.IceLink.WebRTC.H264Packet)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.H264Frame" /> class.
             </summary>
             <param name="packet">The first fragment.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Frame.Add(FM.IceLink.WebRTC.H264Packet)">
             <summary>
             Adds the specified nalu.
             </summary>
             <param name="packet">The nalu.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Frame.IncreaseAge">
             <summary>
             Increases the age of the frame.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Frame.IsAged">
             <summary>
             Gets a value indicating whether the frame has aged.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Frame.IsComplete">
             <summary>
             Gets whether the frame is ready for assembly.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Frame.Assemble">
             <summary>
             Assembles the NAL Units from all H264Packets to create an encoded frame.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.H264Nalu">
             <summary>
             An H264 Network Abstraction Layer Unit.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.StartCode">
             <summary>
             Gets a 4 byte Nalu start code.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.Header">
             <summary>
             Gets the NAL header.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.Payload">
             <summary>
             Gets or sets the NAL payload.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.FBitMask">
             <summary>
             Gets the forbidden zero bit mask.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.NriMask">
             <summary>
             Gets the nal_ref_idc mask.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.TypeMask">
             <summary>
             Gets the NAL Unit Type mask.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.FBit">
             <summary>
             Gets the forbidden Zero Bit. The H.264 specification declares a
             value of 1 as a syntax violation.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.NalRefIdc">
             <summary>
             Gets the NRI: 2bits otherwise known as nal_ref_idc.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.Type">
             <summary>
             Gets the NAL Unit Type.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.ShortLength">
             <summary>
             Gets the size of the NAL Unit (including NAL header) in two octets stored in
             the returned byte array. Useful for creating certain types of H264 such as STAP.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs">
             <summary>
             Slice Type Definitions.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.P">
             <summary>
             P-slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.B">
             <summary>
             B-slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.I">
             <summary>
             I-slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.SP">
             <summary>
             SP-slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.SI">
             <summary>
             SI-slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.PNonVcl">
             <summary>
             P-slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.BNonVcl">
             <summary>
             B-slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.INonVcl">
             <summary>
             I-slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.SPNonVcl">
             <summary>
             SP-slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Nalu.SliceTypeDefs.SINonVcl">
             <summary>
             SI-slice.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.FrameNum">
             <summary>
             Gets the frame_num: The Frame Number is used as an identifier for pictures and shall be represented 
             by log2_max_frame_num_minus4 + 4 bits in the bitstream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.PpsId">
             <summary>
             Gets the Picture Parameter Set specifies the picture parameter set in use. The 
             value of pic_parameter_set_id shall be in the range of 0 to 255, inclusive.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.SpsId">
             <summary>
             Gets the Sequence Parameter Set this NAL references.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.IdrPicId">
             <summary>
             Gets the idr_pic_id: The values of idr_pic_id in all the slices 
             of an IDR picture shall remain unchanged. When two consecutive access units in 
             decoding order are both IDR access units, the value of idr_pic_id in the slices of 
             the first such IDR access unit shall differ from the idr_pic_id in the second such 
             IDR access unit. The value of idr_pic_id shall be in the range of 0 to 65535, inclusive.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.FieldPicFlag">
             <summary>
             Gets the field_pic_flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.BottomFieldFlag">
             <summary>
             Gets the bottom_field_flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.PicOrderCntType">
             <summary>
             Gets the pic_order_cnt_type.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.IdrPicFlag">
             <summary>
             Gets the idr_pic_flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.SliceType">
             <summary>
             Gets the type of Slice contained in this NAL.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.FirstMbInSlice">
             <summary>
             Gets the first_mb_in_slice specifies the address of the first macroblock in the slice. When 
             arbitrary slice order is not allowed as specified in Annex A, the value of first_mb_in_slice 
             is constrained as follows:
                – If separate_colour_plane_flag is equal to 0, the value of first_mb_in_slice shall not 
                  be less than the value of first_mb_in_slice for any other slice of the current picture 
                  that precedes the current slice in decoding order.
                – Otherwise (separate_colour_plane_flag is equal to 1), the value of first_mb_in_slice 
                  shall not be less than the value of first_mb_in_slice for any other slice of the current 
                  picture that precedes the current slice in decoding order and has the same value of 
                  colour_plane_id.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.PicOrderCntLsb">
             <summary>
             Gets the pic_order_cnt_lsb.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Nalu.DeltaPicOrderCnt">
             <summary>
             Gets the pic_order_cnt_lsb
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.#ctor">
             <summary>
             Creates an empty NAL Unit.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.#ctor(System.Byte[])">
             <summary>
             Creates a NAL Unit from a byte array.
             </summary>
             <param name="naluBytes">The NALU bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.#ctor(System.Byte[],System.Boolean,System.Int32,System.Int32)">
             <summary>
             Creates a NAL Unit from a byte stream that does not contain a NAL header.
             </summary>
             <param name="payload">The NAL Unit's payload.</param>
             <param name="fbit">The Forbidden Zero Bit.</param>
             <param name="nri">The nal_ref_idc.</param>
             <param name="type">The NAL Unit Type.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.GetBytes">
             <summary>
             Gets the NAL Unit as a byte array that can be passed
             to an encoder (includes Start Code).
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.GetBytes(FM.IceLink.WebRTC.H264Nalu)">
             <summary>
             Gets the NAL Unit as a byte array that can be passed
             to an encoder (includes Start Code).
             </summary>
             <param name="nalu">The NAL Unit.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.GetNalu(System.Byte[])">
             <summary>
             Returns the first NAL unit after nalStart.
             </summary>
             <param name="encodedData">The byte array to search.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.GetNalu(System.Byte[],System.Int32)">
             <summary>
             Returns the first NAL unit after nalStart.
             </summary>
             <param name="encodedData">The byte array to search.</param>
             <param name="nalStart">The start index of the NAL.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.FindNalu(System.Byte[])">
             <summary>
             Scans for the index of the first NAL Unit after start.
             </summary>
             <param name="encodedData">The stream to search.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.FindNalu(System.Byte[],System.Int32)">
             <summary>
             Scans for the index of the first NAL Unit after start.
             </summary>
             <param name="encodedData">The stream to search.</param>
             <param name="start">The index to start searching from.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Nalu.GetNaluKey">
             <summary>
             Not currently used.
             
             Gets a unique key to help identify the packet. This can be used as   
             a Dictionary key to group VCL NALUs of primary coded pictures for coded video sequences  
             that conform to one or more of the profiles specified in Annex A, and that can be decoded  
             using the parameters and clauses found in 7.4.1.2.4 of the ITU-T H.264 spec.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.H264NaluType">
             <summary>
             H264 NAL Unit Type defs and helpers.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.Unknown">
             <summary>
             Unknown or Reserved.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.Slice">
             <summary>
             Slice.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.Idr">
             <summary>
             Instantaneous Decoder Refresh.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.Sei">
             <summary>
             SEI.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.Sps">
             <summary>
             Sequence Paramater Set.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.Pps">
             <summary>
             Picture Parameter Set: A syntax structure containing syntax
             elements that apply to zero or more entire coded pictures as
             determined by the pic_parameter_set_id syntax element found in each
             slice header.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.StapA">
             <summary>
             Single-time aggregation packet.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.StapB">
             <summary>
             Single-time aggregation packet.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.Mtap16">
             <summary>
             Multi-time aggregation packet.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.Mtap24">
             <summary>
             Single-time aggregation packet.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.FuA">
             <summary>
             Fragmentation Unit.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264NaluType.FuB">
             <summary>
             Fragmentation Unit.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264NaluType.GetNaluType(System.Byte)">
             <summary>
             Gets the NAL Unit Type.
             </summary>
             <param name="packetByte"></param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264NaluType.GetNaluType(System.Int32)">
             <summary>
             Gets the NAL Unit Type.
             </summary>
             <param name="type"></param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264NaluType.IsSingleNalu(System.Int32)">
             <summary>
             Determines if a Nalu Type is a Single NAL Unit packet.
             </summary>
             <param name="type"></param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.H264Packet">
             <summary>
             A H264 packet for RTP.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.H264Packet.MaxPacketSize">
             <summary>
             The maximum packet size (affects packetization).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.NaluType">
             <summary>
             Gets the type of Payload that is in this packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.Payload">
             <summary>
             Gets the NAL Unit(s) payload.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.FragmentStart">
             <summary>
             Gets if this is the start of a Fragmented Unit.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.FragmentEnd">
             <summary>
             Gets if this is the end of a Fragmented Unit.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.SequenceNumber">
             <summary>
             Gets or sets the RTP sequence number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.Last">
             <summary>
             Gets or sets whether this is the last nalu in the sequence (i.e. RTP Marker).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.Nalus">
             <summary>
             Gets or sets the NAL Units.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.FuSBitMask">
             <summary>
             Gets the start bit.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.FuEBitMask">
             <summary>
             Gets the end bit.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Packet.FuRBitMask">
             <summary>
             Gets the reserved bit.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.ParseBytes(System.Byte[])">
             <summary>
             Parses the specified packet bytes.
             </summary>
             <param name="packetBytes">The packet bytes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.GetBytes">
             <summary>
             Gets the packet as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.GetBytes(FM.IceLink.WebRTC.H264Packet)">
             <summary>
             Gets a packet as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.#ctor">
             <summary>
             Default constuctor.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.#ctor(FM.IceLink.WebRTC.H264Nalu)">
             <summary>
             Single NAL Unit Mode constructor.
             </summary>
             <param name="nalu"></param>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.Packetize(System.Byte[])">
             <summary>
             Packetizes a single encoded data frame into multiple H264 packets.
             Note: Only STAP-A and Single NALU are supported right now.
             Uses packetization mode 0.
             </summary>
             <param name="encodedData">The encoded data.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.Packetize(System.Byte[],System.Int32)">
             <summary>
             Packetizes a single encoded data frame into multiple H264 packets.
             Note: Only STAP-A and Single NALU are supported right now.
             </summary>
             <param name="encodedData">The encoded data.</param>
             <param name="packetizationMode"></param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.FlushNaluAccumulator(FM.IceLink.WebRTC.H264Nalu[])">
             <summary>
             Flushes any NALUs accumulated during the hopeful process of creating
             an aggregation packet.
             
             During packetization, the order of the NALUs must remain intact and 
             so before any packet is created, due to the fact that some NALUs may
             have been accumulated for an STAP-A packet, they must be flushed
             prior to a new packet being created.
             </summary>
             <param name="nalus">The NALUs accumulated.</param>
             <returns>Either null or an H264Packet of type STAP-A or Single NALU.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.Depacketize(FM.IceLink.WebRTC.H264Packet[])">
             <summary>
             Depacketizes multiple H264Packets into a single encoded frame.
             Uses packetization mode 0.
             </summary>
             <param name="packets"></param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Packet.Depacketize(FM.IceLink.WebRTC.H264Packet[],System.Int32)">
             <summary>
             Depacketizes multiple H264Packets into a single encoded frame.
             </summary>
             <param name="packets"></param>
             <param name="packetizationMode"></param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.H264Padep">
             <summary>
             An implementation of a H264 packetizer/depacketizer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Padep.PacketizationMode">
             <summary>
             Gets or sets the Packetization Mode (0 or 1 currently supported).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.#ctor">
             <summary>
             An implementation of a H264 packetizer/depacketizer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.Packetize(System.Byte[],System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.H264Padep.SequenceNumberingViolated">
             <summary>
             Gets or sets whether RTP sequence numbering has
             been violated.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.IsKeyFrame(System.Byte[])">
             <summary>
             Determines whether the encoded frame is a keyframe (IDR, PPS, or SPS).
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.IsIdr(System.Byte[])">
             <summary>
             Determines whether the encoded frame is an IDR frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.IsIdr(System.Byte[],System.Int32)">
             <summary>
             Determines whether the encoded frame is an IDR frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="offset">The offset into the encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.IsSps(System.Byte[])">
             <summary>
             Determines whether the encoded frame is an SPS frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.IsSps(System.Byte[],System.Int32)">
             <summary>
             Determines whether the encoded frame is an SPS frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="offset">The offset into the encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.IsPps(System.Byte[])">
             <summary>
             Determines whether the encoded frame is a PPS frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.IsPps(System.Byte[],System.Int32)">
             <summary>
             Determines whether the encoded frame is a PPS frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="offset">The offset into the encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.IsNaluType(System.Byte,System.Byte[],System.Int32)">
             <summary>
             Determines whether the encoded frame is a given NALU type.
             </summary>
             <param name="naluType">The NALU type.</param>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="offset">The offset into the encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.GetNaluLength(System.Byte[],System.Int32)">
             <summary>
             Gets the NALU length at the specified offset.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="offset">The offset into the encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.H264Padep.GetStartCodeLength(System.Byte[],System.Int32)">
             <summary>
             Gets the start code length at the specified offset.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="offset">The offset into the encoded frame.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.PcmCodec">
             <summary>
             An implementation of a PCM (raw) encoder/decoder.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmCodec.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.PcmCodec" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmCodec.Encode(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Encodes a frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmCodec.Decode(System.Byte[])">
             <summary>
             Decodes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmCodec.Packetize(System.Byte[])">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmCodec.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmCodec.ProcessRTCP(FM.IceLink.RTCPPacket[])">
             <summary>
             Processes RTCP packets.
             </summary>
             <param name="packets">The packets to process.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmCodec.Destroy">
             <summary>
             Destroys the codec.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.UlpFecCodec">
             <summary>
             An implementation of a ULP FEC encoder/decoder.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.UlpFecCodec.Encode(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Encodes a frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.UlpFecCodec.Decode(System.Byte[])">
             <summary>
             Decodes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.UlpFecCodec.DecoderNeedsKeyFrame">
             <summary>
             Gets whether the decoder needs a keyframe. This
             is checked after every failed Decode operation.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.UlpFecCodec.Packetize(System.Byte[])">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.UlpFecCodec.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.UlpFecCodec.ProcessRTCP(FM.IceLink.RTCPPacket[])">
             <summary>
             Processes RTCP packets.
             </summary>
             <param name="packets">The packets to process.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.UlpFecCodec.Destroy">
             <summary>
             Destroys the codec.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.Resampler">
             <summary>
             Utility class for resampling audio data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Resampler.Factor">
             <summary>
             Gets the resampling factor.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Resampler.DefaultLowPassOrder">
             <summary>
             Gets or sets the default low pass order.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Resampler.#ctor(System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.Resampler" /> class.
             </summary>
             <param name="sourceClockRate">The source clock rate.</param>
             <param name="targetClockRate">The target clock rate.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.Resampler.#ctor(System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.Resampler" /> class.
             </summary>
             <param name="factor">The resampling factor.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.Resampler.Resample(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Resamples the given audio buffer.
             </summary>
             <param name="buffer">The audio buffer to resample.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Resampler.Resample(FM.IceLink.WebRTC.AudioBuffer,System.Boolean)">
             <summary>
             Resamples the given audio buffer.
             </summary>
             <param name="buffer">The audio buffer to resample.</param>
             <param name="lastBatch">Whether or not this is the last batch. If <c>true</c>, input will be read to the end.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Resampler.ResampleAndConvert(FM.IceLink.WebRTC.AudioBuffer,FM.IceLink.WebRTC.Resampler,System.Int32,System.Int32)">
             <summary>
             Resamples an audio buffer (if resampler is not null) and converts from
             stereo to mono or mono to stereo (if channels are not equal).
             </summary>
             <param name="buffer">The audio buffer to convert/resample.</param>
             <param name="resampler">The audio resampler.</param>
             <param name="sourceChannels">The source channel count.</param>
             <param name="targetChannels">The target channel count.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Resampler.ResampleAndConvert(FM.IceLink.WebRTC.AudioBuffer,FM.IceLink.WebRTC.Resampler,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Resamples an audio buffer (if resampler is not null) and converts from
             stereo to mono or mono to stereo (if channels are not equal).
             </summary>
             <param name="buffer">The audio buffer to convert/resample.</param>
             <param name="resampler">The audio resampler.</param>
             <param name="lastBatch">Whether or not this is the last batch. If <c>true</c>, input will be read to the end.</param>
             <param name="sourceChannels">The source channel count.</param>
             <param name="targetChannels">The target channel count.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecContext">
             <summary>
             A context that provides codec-independent forward error correction, based
             on RFC 5109. Supports both unequal level protection (UEP) across packets
             as well as uneven level protection (ULP) within packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContext.SortablePacketLessThan(FM.IceLink.WebRTC.FecSortablePacket,FM.IceLink.WebRTC.FecSortablePacket)">
             <summary>
             Returns true if the first is less than or equal to the second.
             </summary>
             <param name="first">The first.</param>
             <param name="second">The second.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContext.PacketLessThan(FM.IceLink.WebRTC.FecPacket,FM.IceLink.WebRTC.FecPacket)">
             <summary>
             Returns true if the first is less than or equal to the second.
             </summary>
             <param name="first">The first.</param>
             <param name="second">The second.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContext.RecoveredPacketLessThan(FM.IceLink.WebRTC.FecRecoveredPacket,FM.IceLink.WebRTC.FecRecoveredPacket)">
             <summary>
             Returns true if the first is less than or equal to the second.
             </summary>
             <param name="first">The first.</param>
             <param name="second">The second.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecContext.MaxMediaPackets">
             <summary>
             Gets the maximum number of media packets that can be protected.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecContext.IPPacketSize">
             <summary>
             Gets the maximum size of an IP packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContext.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecContext" /> class.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecContext.FecPacketReceived">
             <summary>
             Gets or sets whether an FEC packet has been received.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContext.Generate(System.Collections.Generic.List{FM.IceLink.WebRTC.FecRawPacket},System.Int32,System.Int32,System.Boolean,FM.IceLink.WebRTC.FecMaskType,System.Collections.Generic.List{FM.IceLink.WebRTC.FecRawPacket})">
             <summary>
             Generates a list of FEC packets from supplied media packets.
             </summary>
             <param name="mediaPackets">The mediaPacketList.</param>
             <param name="protectionFactor">The protection factor (0 to 255).</param>
             <param name="numImportantPackets">The number of "important" packets which may receive greater protection.</param>
             <param name="useUnequalProtection">Whether to allocate more protection to the important packets.</param>
             <param name="maskType">The packet mask type to use.</param>
             <param name="packetList">The empty list to fill with FEC packets.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContext.Decode(System.Collections.Generic.List{FM.IceLink.WebRTC.FecReceivedPacket},System.Collections.Generic.List{FM.IceLink.WebRTC.FecRecoveredPacket})">
             <summary>
             Decodes a list of media and FEC packets. It will parse the received packet
             list, storing FEC packets internally and inserting media packets into
             the output recovered packet list. The recovered list will be sorted by
             ascending sequence number and have duplicates removed.
             </summary>
             <param name="receivedPacketList">The receivedPacketList.</param>
             <param name="recoveredPacketList">The recoveredPacketList.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContext.GetNumberOfFecPackets(System.Int32,System.Int32)">
             <summary>
             Gets the number of fec packets.
             </summary>
             <param name="numMediaPackets">The number of media packets.</param>
             <param name="protectionFactor">The protection factor.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecContext.PacketOverhead">
             <summary>
             Gets the packet overhead (size in bytes of the FEC/ULP headers).
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContext.ResetState(System.Collections.Generic.List{FM.IceLink.WebRTC.FecRecoveredPacket})">
             <summary>
             Resets internal states from the last frame and clears the recovered packet list.
             </summary>
             <param name="recoveredPacketList">The recoveredPacketList.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecContextTest">
             <summary>
             FEC context tests.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.RunAll">
             <summary>
             Runs all tests.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryNoLoss">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryWithLoss">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryWithSeqNumGapTwoFrames">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryWithSeqNumGapOneFrameRecovery">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryWithSeqNumGapOneFrameNoRecovery">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryWithFecOutOfOrder">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryWithLoss50percRandomMask">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryWithLoss50percBurstyMask">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryNoLossUep">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryWithLossUep">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryWithLoss50percUepRandomMask">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryNonConsecutivePackets">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryNonConsecutivePacketsExtension">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecContextTest.TestFecRecoveryNonConsecutivePacketsWrap">
             <summary>
             Test.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecMaskType">
             <summary>
             Forward error correction mask types.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.FecMaskType.Random">
             <summary>
             Indicates a random FEC mask type.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.FecMaskType.Bursty">
             <summary>
             Indicates a bursty FEC mask type.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecPacket">
             <summary>
             An FEC packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecPacket.ProtectedPacketList">
             <summary>
             Gets or sets the protected packet list.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecPacket.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecPacket.Raw">
             <summary>
             Gets or sets the raw packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecPacket" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecPacketMaskTable">
             <summary>
             An FEC packet mask table.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecPacketMaskTable.MaskType">
             <summary>
             Gets or sets the mask type.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecPacketMaskTable.Table">
             <summary>
             Gets or sets the table.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecPacketMaskTable.#ctor(FM.IceLink.WebRTC.FecMaskType,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecPacketMaskTable" /> class.
             </summary>
             <param name="maskType">The mask type.</param>
             <param name="numMediaPackets">The number of media packets.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecProducer">
             <summary>
             A producer of FEC packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecProducer.ExcessOverheadBelowMax">
             <summary>
             Gets a value indicating whether the excess overhead is below the maximum allowed.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecProducer.MinimumMediaPacketsReached">
             <summary>
             Gets a value indicating whether the minimum number of media packets has been reached.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecProducer.FecAvailable">
             <summary>
             Gets a value indicating whether FEC packets are available.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecProducer.Overhead">
             <summary>
             Gets the overhead relative to the number of media packets (not
             relative to the total number of packets). This definition is
             inherited from the protection factor and how the FEC generation
             is implemented.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducer.#ctor(FM.IceLink.WebRTC.FecContext)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecProducer" /> class.
             </summary>
             <param name="fec">The fec.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducer.SetFecParameters(FM.IceLink.WebRTC.FecProtectionParameters,System.Int32)">
             <summary>
             Sets the FEC parameters.
             </summary>
             <param name="parameters">The parameters.</param>
             <param name="numberFirstPartition">The number of first partition packets.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducer.BuildRedPacket(System.Byte[],System.Int32,System.Int32,System.Int32)">
             <summary>
             Builds a RED packet.
             </summary>
             <param name="dataBuffer">The data buffer.</param>
             <param name="payloadLength">Length of the payload.</param>
             <param name="rtpHeaderLength">Length of the RTP header.</param>
             <param name="redPayloadType">Type of the red payload.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducer.AddRtpPacketAndGenerateFec(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Adds an RTP packet and generates FEC.
             </summary>
             <param name="dataBuffer">The data buffer.</param>
             <param name="payloadLength">Length of the payload.</param>
             <param name="rtpHeaderLength">Length of the RTP header.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducer.GetFecPacket(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Gets the FEC/RED packet.
             </summary>
             <param name="redPayloadType">Type of the RED payload.</param>
             <param name="fecPayloadType">Type of the FEC payload.</param>
             <param name="sequenceNumber">The sequence number.</param>
             <param name="rtpHeaderLength">Length of the RTP header.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecProducerTest">
             <summary>
             FEC producer tests.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducerTest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecProducerTest" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducerTest.RunAll">
             <summary>
             Runs all tests.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducerTest.TestOneFrameFec">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducerTest.TestTwoFrameFec">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProducerTest.TestBuildRedPacket">
             <summary>
             Test.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecProtectedPacket">
             <summary>
             A protected packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecProtectedPacket.Raw">
             <summary>
             Gets or sets the raw packet.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecProtectionMode">
             <summary>
             Forward error correction protection modes.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.FecProtectionMode.NoOverlap">
             <summary>
             Indicates no overlap.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.FecProtectionMode.Overlap">
             <summary>
             Indicates overlap.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.FecProtectionMode.BiasFirstPacket">
             <summary>
             Indicates a bias towards the first packet.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecProtectionParameters">
             <summary>
             FEC protection parameters.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecProtectionParameters.FecRate">
             <summary>
             Gets or sets the FEC rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecProtectionParameters.UseUepProtection">
             <summary>
             Gets or sets whether UEP protection should be used.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecProtectionParameters.MaxFecFrames">
             <summary>
             Gets or sets the maximum FEC frames.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecProtectionParameters.FecMaskType">
             <summary>
             Gets or sets the type of the FEC mask.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecProtectionParameters.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecProtectionParameters" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecRawPacket">
             <summary>
             A raw packet with data/length.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRawPacket.Length">
             <summary>
             Gets or sets the length.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRawPacket.Data">
             <summary>
             Gets or sets the data.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRawPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecRawPacket" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecReceivedPacket">
             <summary>
             A received packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecReceivedPacket.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source.
             This must have a value for FEC packets, but
             is not required for media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecReceivedPacket.IsFec">
             <summary>
             Gets or sets whether this is an FEC packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecReceivedPacket.Raw">
             <summary>
             Gets or sets the raw packet.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecReceiver">
             <summary>
             A context for managing incoming data for FEC.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecReceiver.NumPackets">
             <summary>
             Gets the number of received packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecReceiver.NumFecPackets">
             <summary>
             Gets the number of received FEC packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecReceiver.LastPacketReceivedSoloFec">
             <summary>
             Gets whether the last packet received contained FEC 
             but no media payload.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecReceiver.NumRecoveredPackets">
             <summary>
             Gets the number of recovered media packets using FEC.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiver.#ctor(FM.SingleAction{FM.IceLink.WebRTC.FecRawPacket})">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecReceiver" /> class.
             </summary>
             <param name="callback">The callback.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiver.AddReceivedRedPacket(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Adds a received RED packet.
             </summary>
             <param name="incomingRtpHeaderLength">Length of the incoming RTP header.</param>
             <param name="incomingRtpSequenceNumber">The incoming RTP sequence number.</param>
             <param name="incomingRtpPacket">The incoming RTP packet.</param>
             <param name="packetLength">Length of the packet.</param>
             <param name="fecPayloadType">The FEC payload type.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiver.ProcessReceivedFec">
             <summary>
             Processes received FEC data.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecReceiverTest">
             <summary>
             FEC receiver tests.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecReceiverTest" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.RunAll">
             <summary>
             Runs all tests.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.TestTwoMediaOneFec">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.TestTwoMediaTwoFec">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.TestTwoFramesOneFec">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.TestOneCompleteOneUnrecoverableFrame">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.TestMaxFramesOneFec">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.TestTooManyFrames">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.TestPacketNotDroppedTooEarly">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.TestPacketDroppedWhenTooOld">
             <summary>
             Test.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecReceiverTest.TestOldFecPacketDropped">
             <summary>
             Test.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecRecoveredPacket">
             <summary>
             A recovered packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRecoveredPacket.WasRecovered">
             <summary>
             Gets or sets whether the packet was recovered by FEC.
             Otherwise it was a media packet passed in through
             the received packet list.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRecoveredPacket.Returned">
             <summary>
             Gets or sets whether the packet has already been
             returned to the caller through the callback.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRecoveredPacket.LengthRecovery">
             <summary>
             Gets or sets the two bytes used for recovering
             the packet length with XOR operations.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRecoveredPacket.Raw">
             <summary>
             Gets or sets the raw packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRecoveredPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecRecoveredPacket" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecRedPacket">
             <summary>
             A RED packet for FEC.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRedPacket.REDForFECHeaderLength">
             <summary>
             Gets the length of the RED header for FEC.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRedPacket.MaxExcessOverhead">
             <summary>
             Gets the maximum amount of excess overhead (actual - target)
             allowed in order to trigger GenerateFEC(), before the maximum
             number of FEC frames is reached. Overhead here is defined as
             relative to number of media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRedPacket.MinimumMediaPackets">
             <summary>
             Gets the minimum number of media packets required (above some
             protection level) in order to trigger GenerateFEC(), before
             the maximum number of FEC frames is reached.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRedPacket.HighProtectionThreshold">
             <summary>
             Gets the threshold on the received FEC protection level, above
             which we enforce at least <see cref="P:FM.IceLink.WebRTC.FecRedPacket.MinimumMediaPackets" />
             packets for the FEEC code. Below this threshold,
             <see cref="P:FM.IceLink.WebRTC.FecRedPacket.MinimumMediaPackets" /> is set ot the default value
             of 1. Valid range is 0 to 255, where 255 corresponds to 100%
             overhead (relative to the number of media packets).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRedPacket.Data">
             <summary>
             Gets or sets the data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRedPacket.Length">
             <summary>
             Gets or sets the length.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRedPacket.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecRedPacket" /> class.
             </summary>
             <param name="length">The length.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRedPacket.CreateHeader(System.Byte[],System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates the header.
             </summary>
             <param name="rtpHeader">The RTP header.</param>
             <param name="headerLength">Length of the header.</param>
             <param name="redPayloadType">Type of the RED payload.</param>
             <param name="payloadType">Type of the payload.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRedPacket.SetSequenceNumber(System.Int32)">
             <summary>
             Sets the sequence number.
             </summary>
             <param name="sequenceNumber">The sequence number.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRedPacket.AssignPayload(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Assigns the payload.
             </summary>
             <param name="payload">The payload.</param>
             <param name="offset">The offset.</param>
             <param name="length">The length.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRedPacket.ClearMarkerBit">
             <summary>
             Clears the marker bit.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRedPacket.GetPayloadTypes(System.Byte[],System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
             Gets the payload types inside the RTP payload of a RED packet.
             </summary>
             <param name="rtpPayload">The RTP payload.</param>
             <param name="payloadType1">The first payload type.</param>
             <param name="payloadType1Offset">The offset of the first payload type.</param>
             <param name="payloadType2">The second payload type.</param>
             <param name="payloadType2Offset">The offset of the second payload type.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRedPacket.ReplacePayloadTypes(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Replaces the payload types inside the RTP payload of a RED packet.
             </summary>
             <param name="rtpPayload">The RTP payload.</param>
             <param name="sourceMediaPayloadType">The source media payload type.</param>
             <param name="targetMediaPayloadType">The target media payload type.</param>
             <param name="sourceFecPayloadType">The source FEC payload type.</param>
             <param name="targetFecPayloadType">The target FEC payload type.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecRtpPacket">
             <summary>
             An RTP packet wrapper for FEC.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecRtpPacket.RtpHeaderLength">
             <summary>
             Gets or sets the length of the RTP header.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.FecRtpPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.FecRtpPacket" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.FecSortablePacket">
             <summary>
             A sortable packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.FecSortablePacket.SequenceNumber">
             <summary>
             Gets or sets the sequence number.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutCompleteArgs">
             <summary>
             Arguments for the BaseLayoutManager OnLayoutComplete event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutCompleteArgs.LayoutManager">
             <summary>
             Gets or sets the base layout manager.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutArgs">
             <summary>
             Arguments for the BaseLayoutManager OnLayout event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutArgs.Layout">
             <summary>
             Gets or sets the calculated layout.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutArgs.LayoutWidth">
             <summary>
             Gets or sets the total layout/container width.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutArgs.LayoutHeight">
             <summary>
             Gets or sets the total layout/container height.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutArgs.RemoteCount">
             <summary>
             Gets or sets the number of remote video controls.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutArgs.LayoutManager">
             <summary>
             Gets or sets the base layout manager.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutDirection">
             <summary>
             Specifies the direction of the layout flow.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutDirection.Horizontal">
             <summary>
             Indicates that the layout should flow
             horizontally, filling rows as needed.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutDirection.Vertical">
             <summary>
             Indicates that the layout should flow
             vertically, filling columns as needed.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutScale">
             <summary>
             Specifies how an element should be scaled within a layout.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutScale.Contain">
             <summary>
             Indicates that the element should be uniformly scaled
             (maintaining aspect ratio) to the largest size such
             that both its width and its height can fit inside its
             bounding box.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutScale.Cover">
             <summary>
             Indicates that the element should be uniformly scaled
             (maintaining aspect ratio) to be as large as possible
             so that the bounding box is completely covered. Some
             parts of the element may not be in view (cropped).
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutScale.Stretch">
             <summary>
             Indicates that the element should be non-uniformly
             scaled (not maintaining aspect ratio) so that the
             bounding box is completely covered, but all parts
             of the element are in view (no cropping).
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutTable">
             <summary>
             Defines the results of a layout calculation.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutTable.ColumnCount">
             <summary>
             Gets or sets the column count.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutTable.RowCount">
             <summary>
             Gets or sets the row count.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutTable.CellWidth">
             <summary>
             Gets or sets the width of each cell.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutTable.CellHeight">
             <summary>
             Gets or sets the height of each cell.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LayoutTable.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.LayoutTable" /> class.
             </summary>
             <param name="columnCount">The column count.</param>
             <param name="rowCount">The row count.</param>
             <param name="cellWidth">The width of each cell.</param>
             <param name="cellHeight">The height of each cell.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaAudioRecorder">
             <summary>
             A Matroska audio recorder.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudioRecorder.Path">
             <summary>
             Gets the path.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudioRecorder.EncodingName">
             <summary>
             Gets the encoding name.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudioRecorder.ClockRate">
             <summary>
             Gets the clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudioRecorder.Channels">
             <summary>
             Gets the number of channels.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaAudioRecorder.#ctor(System.String,System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaAudioRecorder" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaAudioRecorder.#ctor(System.String,System.String,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaAudioRecorder" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="channels">The number of channels.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudioRecorder.Suffix">
             <summary>
             Gets the suffix appended to the filename.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaAudioRecorder.Open">
             <summary>
             Opens the file and writes the initial header.
             </summary>
             <returns>The actual path of the opened file.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaAudioRecorder.Close">
             <summary>
             Updates the header and closes the file.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaAudioRecorder.Write(System.Byte[])">
             <summary>
             Writes an encoded audio frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns>
               <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaAudioRecorder.Write(System.Byte[],System.Int64)">
             <summary>
             Writes an encoded audio frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="presentationTimestamp">The presentation timestamp.</param>
             <returns>
               <c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c>
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaSimpleBlock">
             <summary>
             A Matroska simple block element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSimpleBlock.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSimpleBlock.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSimpleBlock.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSimpleBlock" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSimpleBlock.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSimpleBlock" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaSimpleBlockFlags">
             <summary>
             Valid Matroska simple block element flags.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSimpleBlockFlags.Keyframe">
             <summary>
             Gets a value indicating keyframe.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSimpleBlockFlags.Discardable">
             <summary>
             Gets a value indicating discardable.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaElement">
             <summary>
             A Matroska element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaElement.WriteDefaultValues">
             <summary>
             Gets or sets whether to include default values
             when serializing.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaElement.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaElement.SizeLength">
             <summary>
             Gets or sets the length of the size field, in bytes.
             Defaults to zero (variable size).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaElement.Length">
             <summary>
             Gets the total length of the element (including ID/size field), set after calling <see cref="M:FM.IceLink.WebRTC.MatroskaElement.GetBytes" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaElement.Size">
             <summary>
             Gets the size of the element (excluding ID/size field), set after calling <see cref="M:FM.IceLink.WebRTC.MatroskaElement.GetBytes" />.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.GetBytes">
             <summary>
             Serializes to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.SerializeVariableInteger(System.Int64)">
             <summary>
             Serializes a variable integer.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.SerializeVariableInteger(System.Int64,System.Int32)">
             <summary>
             Serializes a variable integer using a fixed length.
             </summary>
             <param name="value">The value.</param>
             <param name="length">The length to use.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteVariableInteger(System.Int64,FM.ByteOutputStream)">
             <summary>
             Writes a variable integer ("vint") to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteVariableInteger(System.Int64,FM.ByteOutputStream,System.Int32)">
             <summary>
             Writes a variable integer ("vint") to the stream using a fixed length.
             </summary>
             <param name="value">The value to write.</param>
             <param name="stream">The stream to write.</param>
             <param name="length">The length to use.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadVariableInteger(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a variable integer ("vint") from the byte array.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offset">The offset into the byte array.</param>
             <param name="offsetPlus">The offset plus the amount read.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteUnsignedInteger(System.Int64,System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes an unsigned integer element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadUnsignedInteger(System.Byte[])">
             <summary>
             Reads an unsigned integer element from the byte array.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteSignedInteger(System.Int64,System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes an signed integer element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadSignedInteger(System.Byte[])">
             <summary>
             Reads a signed integer element from the byte array.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteBool(System.Boolean,System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes a boolean element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadBool(System.Byte[])">
             <summary>
             Reads a boolean element from the stream.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteFloat(System.Single,System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes a float element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadFloat(System.Byte[])">
             <summary>
             Reads a float element from the stream.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteDouble(System.Double,System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes a double element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadDouble(System.Byte[])">
             <summary>
             Reads a double element from the stream.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteDate(System.DateTime,System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes a date element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadDate(System.Byte[])">
             <summary>
             Reads a date string element from the stream.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteString(System.String,System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes an ASCII string element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadString(System.Byte[])">
             <summary>
             Reads an ASCII string element from the stream.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteUtf8(System.String,System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes a UTF-8 string element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadUtf8(System.Byte[])">
             <summary>
             Reads a UTF-8 string element from the stream.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.WriteGuid(System.Guid,System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes a GUID element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadGuid(System.Byte[])">
             <summary>
             Reads a GUID element from the stream.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.Write(System.Byte[],System.Byte[],FM.ByteOutputStream)">
             <summary>
             Writes a binary element to the stream.
             </summary>
             <param name="value">The value to write.</param>
             <param name="id">The ID of the value.</param>
             <param name="stream">The stream to write.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadId(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a binary ID from the stream.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offset">The offset into the byte array.</param>
             <param name="offsetPlus">The offset plus the amount read.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.ReadValue(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a binary value from the stream.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offset">The offset into the byte array.</param>
             <param name="offsetPlus">The offset plus the amount read.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaElement.Compare(System.Byte[],System.Byte[])">
             <summary>
             Compares two byte arrays for equality.
             </summary>
             <param name="bytes1">The first byte array.</param>
             <param name="bytes2">The second byte array.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.IvfVideoRecorder">
             <summary>
             An IVF video recorder.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.IvfVideoRecorder.Path">
             <summary>
             Gets the path.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.IvfVideoRecorder.EncodingName">
             <summary>
             Gets the encoding name.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.IvfVideoRecorder.ClockRate">
             <summary>
             Gets the clock rate.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRecorder.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.IvfVideoRecorder" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="encodingName">The encoding name.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRecorder.#ctor(System.String,System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.IvfVideoRecorder" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.IvfVideoRecorder.Suffix">
             <summary>
             Gets the suffix appended to the filename.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRecorder.Open">
             <summary>
             Opens the file and writes the initial header.
             </summary>
             <returns>The actual path of the opened file.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRecorder.Close">
             <summary>
             Updates the header and closes the file.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRecorder.Write(System.Byte[])">
             <summary>
             Write an encoded video frame using the width
             and height parameters from the first keyframe.
             This method will discard non-keyframes until
             the first keyframe arrives.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns><c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRecorder.Write(System.Byte[],System.Int64)">
             <summary>
             Write an encoded video frame using the width
             and height parameters from the first keyframe.
             This method will discard non-keyframes until
             the first keyframe arrives.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="presentationTimestamp">The presentation timestamp.</param>
             <returns><c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRecorder.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write an encoded video frame using the specified
             width and height parameters.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="width">The frame width.</param>
             <param name="height">The frame height.</param>
             <returns><c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRecorder.Write(System.Byte[],System.Int32,System.Int32,System.Int64)">
             <summary>
             Write an encoded video frame using the specified
             width and height parameters.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="width">The frame width.</param>
             <param name="height">The frame height.</param>
             <param name="presentationTimestamp">The presentation timestamp.</param>
             <returns><c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaAudio">
             <summary>
             A Matroska audio element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudio.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudio.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudio.SamplingFrequency">
             <summary>
             Gets or sets the sampling frequency.
             Defaults to 8000.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudio.OutputSamplingFrequency">
             <summary>
             Gets or sets the output sampling frequency.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudio.Channels">
             <summary>
             Gets or sets the channels.
             Defaults to 1.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudio.BitDepth">
             <summary>
             Gets or sets the bit depth.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudio.DefaultSamplingFrequency">
             <summary>
             Gets the default sampling frequency.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaAudio.DefaultChannels">
             <summary>
             Gets the default channels.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaAudio.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaAudio" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaAudio.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaAudio" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaAudio.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaBlock">
             <summary>
             A Matroska block element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlock.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlock.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlock.TrackNumber">
             <summary>
             Gets or sets the track number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlock.Timecode">
             <summary>
             Gets or sets the timecode.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlock.Flags">
             <summary>
             Gets or sets the flags.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlock.Data">
             <summary>
             Gets or sets the data.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaBlock.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaBlock" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaBlock.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaBlock" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaBlock.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaBlockFlags">
             <summary>
             Valid Matroska block element flags.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockFlags.NoLacing">
             <summary>
             Gets a value indicating no lacing.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockFlags.XiphLacing">
             <summary>
             Gets a value indicating Xiph lacing.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockFlags.EbmlLacing">
             <summary>
             Gets a value indicating EBML lacing.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockFlags.FixedSizeLacing">
             <summary>
             Gets a value indicating fixed size lacing.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockFlags.Invisible">
             <summary>
             Gets a value indicating invisible.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaBlockGroup">
             <summary>
             A Matroska block group element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockGroup.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockGroup.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockGroup.Block">
             <summary>
             Gets or sets the block element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockGroup.ReferenceBlocks">
             <summary>
             Gets or sets the reference blocks.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaBlockGroup.BlockDuration">
             <summary>
             Gets or sets the duration of the block.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaBlockGroup.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaBlockGroup" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaBlockGroup.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaBlockGroup" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaBlockGroup.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaCluster">
             <summary>
             A Matroska cluster element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaCluster.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaCluster.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaCluster.Timecode">
             <summary>
             Gets or sets the timecode.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaCluster.Position">
             <summary>
             Gets or sets the position.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaCluster.PrevSize">
             <summary>
             Gets or sets the previous size.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaCluster.BlockGroups">
             <summary>
             Gets or sets the block group elements.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaCluster.SimpleBlocks">
             <summary>
             Gets or sets the simple block elements.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaCluster.DefaultTimecode">
             <summary>
             Gets the default timecode.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaCluster.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaCluster" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaCluster.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaCluster" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaCluster.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaCluster.Merge(FM.IceLink.WebRTC.MatroskaCluster)">
             <summary>
             Merges another <see cref="T:FM.IceLink.WebRTC.MatroskaCluster" /> into this one.
             </summary>
             <param name="cluster">The <see cref="T:FM.IceLink.WebRTC.MatroskaCluster" />.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaContentCompAlgo">
             <summary>
             Valid Matroska content compression element algorithms.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentCompAlgo.Zlib">
             <summary>
             Gets a value indicating zlib.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentCompAlgo.Bzlib">
             <summary>
             Gets a value indicating bzlib.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentCompAlgo.Lzo1x">
             <summary>
             Gets a value indicating lzo1x.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentCompAlgo.HeaderStriping">
             <summary>
             Gets a value indicating header striping.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaContentCompression">
             <summary>
             A Matroska content compression element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentCompression.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentCompression.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentCompression.ContentCompAlgo">
             <summary>
             Gets or sets the content compression algorithm.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentCompression.ContentCompSettings">
             <summary>
             Gets or sets the content compression settings.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentCompression.DefaultContentCompAlgo">
             <summary>
             Gets the default content compression algorithm.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaContentCompression.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaContentCompression" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaContentCompression.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaContentCompression" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaContentCompression.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaContentEncoding">
             <summary>
             A Matroska content encoding element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncoding.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncoding.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncoding.ContentEncodingOrder">
             <summary>
             Gets or sets the content encoding order.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncoding.ContentEncodingScope">
             <summary>
             Gets or sets the content encoding scope.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncoding.ContentEncodingType">
             <summary>
             Gets or sets the content encoding type.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncoding.ContentCompression">
             <summary>
             Gets or sets the content compression element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncoding.DefaultContentEncodingOrder">
             <summary>
             Gets the default content encoding order.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncoding.DefaultContentEncodingScope">
             <summary>
             Gets the default content encoding scope.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncoding.DefaultContentEncodingType">
             <summary>
             Gets the default content encoding type.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaContentEncoding.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaContentEncoding" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaContentEncoding.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaContentEncoding" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaContentEncoding.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaContentEncodings">
             <summary>
             A Matroska content encodings element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncodings.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncodings.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncodings.ContentEncodings">
             <summary>
             Gets or sets the content encoding elements.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaContentEncodings.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaContentEncodings" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaContentEncodings.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaContentEncodings" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaContentEncodings.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaContentEncodingScope">
             <summary>
             Valid Matroska content encoding element scopes.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncodingScope.All">
             <summary>
             Gets a value indicating all.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncodingScope.CodecPrivate">
             <summary>
             Gets a value indicating codec private.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaContentEncodingScope.ContentCompressionInNextContentEncoding">
             <summary>
             Gets a value indicating content compression in next content encoding.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaEbml">
             <summary>
             A Matroska EBML element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.EbmlVersion">
             <summary>
             Gets or sets the EBML version.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.EbmlReadVersion">
             <summary>
             Gets or sets the EBML read version.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.EbmlMaxIdLength">
             <summary>
             Gets or sets the EBML maximum identifier length.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.EbmlMaxSizeLength">
             <summary>
             Gets or sets the EBML maximum size length.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DocType">
             <summary>
             Gets or sets the document type.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DocTypeVersion">
             <summary>
             Gets or sets the document type version.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DocTypeReadVersion">
             <summary>
             Gets or sets the document type read version.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DefaultEbmlVersion">
             <summary>
             Gets the default EBML version.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DefaultEbmlReadVersion">
             <summary>
             Gets the default EBML read version.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DefaultEbmlMaxIdLength">
             <summary>
             Gets the default EBML maximum identifier length.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DefaultEbmlMaxSizeLength">
             <summary>
             Gets the default EBML maximum size length.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DefaultDocType">
             <summary>
             Gets the default document type.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DefaultDocTypeVersion">
             <summary>
             Gets the default document type version.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaEbml.DefaultDocTypeReadVersion">
             <summary>
             Gets the default document type read version.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaEbml.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaEbml" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaEbml.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaEbml" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaEbml.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaEbml.Merge(FM.IceLink.WebRTC.MatroskaEbml)">
             <summary>
             Merges another <see cref="T:FM.IceLink.WebRTC.MatroskaEbml" /> into this one.
             </summary>
             <param name="ebml">The <see cref="T:FM.IceLink.WebRTC.MatroskaEbml" />.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaFile">
             <summary>
             A Matroska file.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaFile.Ebml">
             <summary>
             Gets or sets the EBML element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaFile.Segment">
             <summary>
             Gets or sets the segment element.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaFile.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaFile" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaFile.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaFile" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaFile.GetBytes">
             <summary>
             Serializes to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaFile.Merge(FM.IceLink.WebRTC.MatroskaFile)">
             <summary>
             Merges another <see cref="T:FM.IceLink.WebRTC.MatroskaFile" /> into this one.
             </summary>
             <param name="file">The <see cref="T:FM.IceLink.WebRTC.MatroskaFile" />.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaVideoRecorder">
             <summary>
             A Matroska video recorder.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideoRecorder.Path">
             <summary>
             Gets the path.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideoRecorder.EncodingName">
             <summary>
             Gets the encoding name.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideoRecorder.ClockRate">
             <summary>
             Gets the clock rate.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaVideoRecorder.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaVideoRecorder" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="encodingName">The encoding name.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaVideoRecorder.#ctor(System.String,System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaVideoRecorder" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideoRecorder.Suffix">
             <summary>
             Gets the suffix appended to the filename.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaVideoRecorder.Open">
             <summary>
             Opens the file and writes the initial header.
             </summary>
             <returns>The actual path of the opened file.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaVideoRecorder.Close">
             <summary>
             Updates the header and closes the file.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaVideoRecorder.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write an encoded video frame using the specified
             width and height parameters.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="width">The frame width.</param>
             <param name="height">The frame height.</param>
             <returns><c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaVideoRecorder.Write(System.Byte[],System.Int32,System.Int32,System.Int64)">
             <summary>
             Write an encoded video frame using the specified
             width and height parameters.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="width">The frame width.</param>
             <param name="height">The frame height.</param>
             <param name="presentationTimestamp">The presentation timestamp.</param>
             <returns><c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaSeek">
             <summary>
             A Matroska seek element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSeek.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSeek.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSeek.SeekId">
             <summary>
             Gets or sets the seek identifier.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSeek.SeekPosition">
             <summary>
             Gets or sets the seek position.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSeek.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSeek" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSeek.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSeek" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSeek.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaSeekHead">
             <summary>
             A Matroska seek head element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSeekHead.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSeekHead.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSeekHead.Seeks">
             <summary>
             Gets or sets the seek elements.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSeekHead.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSeekHead" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSeekHead.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSeekHead" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSeekHead.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaSegment">
             <summary>
             A Matroska segment element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegment.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegment.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegment.SegmentInfo">
             <summary>
             Gets or sets the segment info element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegment.SeekHeads">
             <summary>
             Gets or sets the seek head elements.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegment.Tracks">
             <summary>
             Gets or sets the track elements.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegment.Clusters">
             <summary>
             Gets or sets the cluster elements.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSegment.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSegment" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSegment.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSegment" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSegment.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSegment.Merge(FM.IceLink.WebRTC.MatroskaSegment)">
             <summary>
             Merges another <see cref="T:FM.IceLink.WebRTC.MatroskaSegment" /> into this one.
             </summary>
             <param name="segment">The <see cref="T:FM.IceLink.WebRTC.MatroskaSegment" />.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaSegmentInfo">
             <summary>
             A Matroska segment info element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.SegmentUid">
             <summary>
             Gets or sets the segment UID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.SegmentFilename">
             <summary>
             Gets or sets the segment filename.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.PrevUid">
             <summary>
             Gets or sets the previous UID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.PrevFilename">
             <summary>
             Gets or sets the previous filename.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.NextUid">
             <summary>
             Gets or sets the next UID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.NextFilename">
             <summary>
             Gets or sets the next filename.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.TimecodeScale">
             <summary>
             Gets or sets the timecode scale.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.Duration">
             <summary>
             Gets or sets the duration.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.Title">
             <summary>
             Gets or sets the title.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.MuxingApp">
             <summary>
             Gets or sets the muxing application.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.WritingApp">
             <summary>
             Gets or sets the writing application.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.DateUtc">
             <summary>
             Gets or sets the date in UTC time.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaSegmentInfo.DefaultTimecodeScale">
             <summary>
             Gets the default timecode scale.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSegmentInfo.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSegmentInfo" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSegmentInfo.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaSegmentInfo" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSegmentInfo.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaSegmentInfo.Merge(FM.IceLink.WebRTC.MatroskaSegmentInfo)">
             <summary>
             Merges another <see cref="T:FM.IceLink.WebRTC.MatroskaSegmentInfo" /> into this one.
             </summary>
             <param name="segmentInfo">The <see cref="T:FM.IceLink.WebRTC.MatroskaSegmentInfo" />.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaTrackEntry">
             <summary>
             A Matroska track entry element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.Vp8CodecId">
             <summary>
             Gets the VP8 codec ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.H264CodecId">
             <summary>
             Gets the H.264 codec ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.OpusCodecId">
             <summary>
             Gets the Opus codec ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.PcmCodecId">
             <summary>
             Gets the PCM codec ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.PcmuFormatTag">
             <summary>
             Gets the PCMU format tag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.PcmaFormatTag">
             <summary>
             Gets the PCMA format tag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.TrackNumber">
             <summary>
             Gets or sets the track number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.TrackUid">
             <summary>
             Gets or sets the track UID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.TrackType">
             <summary>
             Gets or sets the track type.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.FlagEnabled">
             <summary>
             Gets or sets the enabled flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.FlagDefault">
             <summary>
             Gets or sets the default flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.FlagForced">
             <summary>
             Gets or sets the forced flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.FlagLacing">
             <summary>
             Gets or sets the lacing flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.MinCache">
             <summary>
             Gets or sets the minimum cache.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.MaxCache">
             <summary>
             Gets or sets the maximum cache.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.DefaultDuration">
             <summary>
             Gets or sets the default duration.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.TrackTimecodeScale">
             <summary>
             Gets or sets the track timecode scale.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.Name">
             <summary>
             Gets or sets the name.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.Language">
             <summary>
             Gets or sets the language.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.CodecId">
             <summary>
             Gets or sets the codec identifier.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.CodecPrivate">
             <summary>
             Gets or sets the codec private.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.CodecName">
             <summary>
             Gets or sets the codec name.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.CodecDelay">
             <summary>
             Gets or sets the codec delay.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.SeekPreRoll">
             <summary>
             Gets or sets the seek pre-roll.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.AttachmentLinks">
             <summary>
             Gets or sets the attachment links.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.Video">
             <summary>
             Gets or sets the video element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.Audio">
             <summary>
             Gets or sets the audio element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.ContentEncodings">
             <summary>
             Gets or sets the content encoding elements.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.DefaultFlagEnabled">
             <summary>
             Gets the default enabled flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.DefaultFlagDefault">
             <summary>
             Gets the default default flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.DefaultFlagForced">
             <summary>
             Gets the default forced flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.DefaultFlagLacing">
             <summary>
             Gets the default lacing flag.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.DefaultMinCache">
             <summary>
             Gets the default minimum cache.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackEntry.DefaultLanguage">
             <summary>
             Gets the default language.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaTrackEntry.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaTrackEntry" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaTrackEntry.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaTrackEntry" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaTrackEntry.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaTrack">
             <summary>
             A Matroska track element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrack.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrack.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrack.TrackEntries">
             <summary>
             Gets or sets the track entry elements.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaTrack.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaTrack" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaTrack.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaTrack" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaTrack.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaTrack.Merge(FM.IceLink.WebRTC.MatroskaTrack)">
             <summary>
             Merges another <see cref="T:FM.IceLink.WebRTC.MatroskaTrack" /> into this one.
             </summary>
             <param name="track">The <see cref="T:FM.IceLink.WebRTC.MatroskaTrack" />.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaTrackType">
             <summary>
             Valid Matroska track entry element types.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackType.Video">
             <summary>
             Gets a value indicating video.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackType.Audio">
             <summary>
             Gets a value indicating audio.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackType.Complex">
             <summary>
             Gets a value indicating complex.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackType.Logo">
             <summary>
             Gets a value indicating logo.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackType.Subtitle">
             <summary>
             Gets a value indicating subtitle.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackType.Button">
             <summary>
             Gets a value indicating button.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaTrackType.Control">
             <summary>
             Gets a value indicating control.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaVideo">
             <summary>
             A Matroska video element.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.EbmlId">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.Id">
             <summary>
             Gets the EBML ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.PixelWidth">
             <summary>
             Gets or sets the pixel width.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.PixelHeight">
             <summary>
             Gets or sets the pixel height.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.PixelCropBottom">
             <summary>
             Gets or sets the pixel crop bottom.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.PixelCropTop">
             <summary>
             Gets or sets the pixel crop top.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.PixelCropLeft">
             <summary>
             Gets or sets the pixel crop left.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.PixelCropRight">
             <summary>
             Gets or sets the pixel crop right.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.DisplayWidth">
             <summary>
             Gets or sets the display width.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.DisplayHeight">
             <summary>
             Gets or sets the display height.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.DisplayUnit">
             <summary>
             Gets or sets the display unit.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.DefaultPixelCropBottom">
             <summary>
             Gets the default pixel crop bottom.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.DefaultPixelCropTop">
             <summary>
             Gets the default pixel crop top.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.DefaultPixelCropLeft">
             <summary>
             Gets the default pixel crop left.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.DefaultPixelCropRight">
             <summary>
             Gets the default pixel crop right.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideo.DefaultDisplayUnit">
             <summary>
             Gets the default display unit.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaVideo.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaVideo" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaVideo.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MatroskaVideo" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MatroskaVideo.GetInnerBytes">
             <summary>
             Gets the inner bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MatroskaVideoDisplayUnit">
             <summary>
             Valid Matroska video element display units.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideoDisplayUnit.Pixels">
             <summary>
             Gets a value indicating pixels.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideoDisplayUnit.Centimeters">
             <summary>
             Gets a value indicating centimeters.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideoDisplayUnit.Inches">
             <summary>
             Gets a value indicating inches.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MatroskaVideoDisplayUnit.DisplayAspectRatio">
             <summary>
             Gets a value indicating display aspect ratio.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.OggAudioRecorder">
             <summary>
             An Ogg audio recorder.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRecorder.Path">
             <summary>
             Gets the path.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRecorder.EncodingName">
             <summary>
             Gets the encoding name.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRecorder.ClockRate">
             <summary>
             Gets the clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRecorder.Channels">
             <summary>
             Gets the number of channels.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRecorder.Vendor">
             <summary>
             Gets or sets the file vendor.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRecorder.Title">
             <summary>
             Gets or sets the file title.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRecorder.Artist">
             <summary>
             Gets or sets the file artist.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRecorder.#ctor(System.String,System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.OggAudioRecorder" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRecorder.#ctor(System.String,System.String,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.OggAudioRecorder" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="channels">The number of channels.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRecorder.Suffix">
             <summary>
             Gets the suffix appended to the filename.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRecorder.Open">
             <summary>
             Opens the file and writes the initial header.
             </summary>
             <returns>The actual path of the opened file.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRecorder.Close">
             <summary>
             Closes the file.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRecorder.Write(System.Byte[])">
             <summary>
             Writes an encoded audio frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns><c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRecorder.Write(System.Byte[],System.Int32)">
             <summary>
             Writes an encoded audio frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="sampleCount">The number of samples in the encoded frame.</param>
             <returns><c>true</c> if the encoded frame was written successfully; otherwise, <c>false</c></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.OggAudioRecordingProvider">
             <summary>
             An audio render provider that writes audio frames to an Ogg-formatted file.
             DEPRECATED: use OggAudioRenderProvider instead.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRecordingProvider.#ctor(System.String,FM.IceLink.WebRTC.AudioCodec)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.OggAudioRecordingProvider" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="codec">The audio codec.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.OggAudioRenderProvider">
             <summary>
             An audio render provider that writes audio frames to an Ogg-formatted file.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRenderProvider.Codec">
             <summary>
             Gets the codec.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggAudioRenderProvider.Recorder">
             <summary>
             Gets the recorder.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRenderProvider.#ctor(System.String,FM.IceLink.WebRTC.AudioCodec)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.OggAudioRenderProvider" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="codec">The audio codec.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRenderProvider.Initialize(FM.IceLink.WebRTC.AudioRenderInitializeArgs)">
             <summary>
             Initializes the audio render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRenderProvider.Destroy">
             <summary>
             Destroys the audio render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggAudioRenderProvider.Render(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Renders an audio frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.OggPage">
             <summary>
             An Ogg page.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.OggPage.MaxSegmentCount">
             <summary>
             Maximum number of segments in an <see cref="T:FM.IceLink.WebRTC.OggPage" />.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.OggPage.MaxSegmentLength">
             <summary>
             Maximum length of an <see cref="T:FM.IceLink.WebRTC.OggPage" /> segment.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPage.ContinuedPacket">
             <summary>
             Gets or sets whether this page is a continued (not fresh) packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPage.BeginningOfStream">
             <summary>
             Gets or sets whether this page is the first page of the bitstream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPage.EndOfStream">
             <summary>
             Gets or sets whether this page is the last page of the bitstream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPage.AbsoluteGranulePosition">
             <summary>
             Gets or sets the absolute granule position.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPage.StreamSerialNumber">
             <summary>
             Gets or sets the stream serial number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPage.SequenceNumber">
             <summary>
             Gets or sets the page sequence number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPage.Payload">
             <summary>
             Gets or sets the data payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggPage.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.OggPage" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OggPage.GetBytes">
             <summary>
             Gets the page as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.OggPageHeaderType">
             <summary>
             Header type flags for an <see cref="T:FM.IceLink.WebRTC.OggPage" />. Can be set in the 5th byte of each page.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPageHeaderType.None">
             <summary>
             Gets or sets a value indicating an empty value.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPageHeaderType.IsContinued">
             <summary>
             Gets or sets a value indicating whether or not the page is a continuation of a previous page.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPageHeaderType.FirstPage">
             <summary>
             Gets or sets a value indicating whether or not this is the first page in the bitstream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPageHeaderType.LastPage">
             <summary>
             Gets or sets a value indicating whether or not this is the last page in the bitstream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.OggPageHeaderType.All">
             <summary>
             Gets or sets a value indicating that all values are set.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.ReliableDataChannel">
             <summary>
             A reliable (SCTP-based) WebRTC data channel description.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableDataChannel.Unordered">
             <summary>
             Gets or sets a value indicating whether to allow messages to be delivered out-of-order.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableDataChannel.Label">
             <summary>
             Gets or sets the channel label.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableDataChannel.Subprotocol">
             <summary>
             Gets or sets the channel sub-protocol.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataChannel.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.ReliableDataChannel" /> class.
             </summary>
             <param name="label">The channel label.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataChannel.#ctor(System.Boolean,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.ReliableDataChannel" /> class.
             </summary>
             <param name="unordered">Whether to allow messages to be delivered out-of-order.</param>
             <param name="label">The channel label.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataChannel.#ctor(System.Boolean,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.ReliableDataChannel" /> class.
             </summary>
             <param name="unordered">Whether to allow messages to be delivered out-of-order.</param>
             <param name="label">The channel label.</param>
             <param name="subprotocol">The channel sub-protocol.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataChannel.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataChannel.ToJson(FM.IceLink.WebRTC.ReliableDataChannel)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="channel">The data channel description to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataChannel.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="channelJson">The JSON to deserialize.</param>
             <returns>The deserialized data channel description.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataChannel.ToJsonMultiple(FM.IceLink.WebRTC.ReliableDataChannel[])">
             <summary>
             Serializes an array of instances to JSON.
             </summary>
             <param name="channels">The data channel descriptions to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataChannel.FromJsonMultiple(System.String)">
             <summary>
             Deserializes an array of instances from JSON.
             </summary>
             <param name="channelsJson">The JSON to deserialize.</param>
             <returns>The deserialized data channel descriptions.</returns>
            </member>
        <member name="E:FM.IceLink.WebRTC.ReliableDataChannel.OnUnhandledException">
             <summary>
             Raised when an exception is thrown in user code and not handled,
             typically in a callback or event handler.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableDataChannel.OnReceive">
             <summary>
             Gets or sets the callback to invoke when data is received on the channel.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataManager.Stop">
             <summary>
             Stops the data capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataManager.OpenChannel(FM.IceLink.WebRTC.InternalReliableDataChannel)">
             <summary>
             Generates a channel open request and sets the channel into requested state.
             </summary>
             <param name="channel">The channel.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataManager.RespondToOpenChannelRequest(FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen,System.Int32)">
             <summary>
             Opens the channel on incoming open request and generates an acknowledgement message.
             </summary>
             <param name="channelOpenRequest">The channel open request.</param>
             <param name="incomingChannelID">The incoming channel.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataManager.ProcessChannelOpenAck(FM.IceLink.WebRTC.WebRTCDCEPDataChannelAck,System.Int32)">
             <summary>
             Processes the channel open acknowledgement and moves this channel into the open state.
             </summary>
             <param name="ack">The ack.</param>
             <param name="incomingChannelID">The incoming channel identifier.</param>
             <exception cref="T:System.Exception"></exception>
            </member>
        <member name="F:FM.IceLink.WebRTC.ReliableDataChannelOwnershipConventions.RtcWebDataProtocolConvention">
             <summary>
             The RTC web data protocol conventionthe method used to determine which
             side uses odd or even is based on the underlying DTLS connection
             role: the side acting as the DTLS client MUST use Streams with even
             Stream Identifiers, the side acting as the DTLS server MUST use
             Streams with odd Stream Identifiers</summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.ReliableDataStream">
             <summary>
             A reliable (SCTP-based) WebRTC data stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableDataStream.Channels">
             <summary>
             Gets or sets the channel descriptions.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataStream.#ctor(FM.IceLink.WebRTC.ReliableDataChannel)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.ReliableDataStream" /> class.
             </summary>
             <param name="channel">The channel description.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ReliableDataStream.#ctor(FM.IceLink.WebRTC.ReliableDataChannel[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.ReliableDataStream" /> class.
             </summary>
             <param name="channels">The channels.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen">
             <summary>
             This message is sent initially on the Stream used for user messages using the Data Channel.
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |  Message Type |  Channel Type |            Priority           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                    Reliability Parameter                      |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |         Label Length          |       Protocol Length         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               /
             |                              Label                             |
             /                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               /
             |                            Protocol                           |
             /                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.SubProtocol">
             <summary>
             Gets the channel sub protocol. Currently, empty string is used to indicate that the protocol is unspecified.
             Future values come from https://www.iana.org/assignments/websocket/websocket.xml#subprotocol-name and RFC6455
             </summary>
             <value>
             The websocket sub protocol.
             </value>
            </member>
        <member name="P:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.Label">
             <summary>
             Gets or sets the channel label.
             </summary>
             <value>
             The name of the Data Channel as a UTF-8 encoded string. May be an empty string.
             </value>
            </member>
        <member name="P:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.ReliabilityParameter">
             <summary>
             Gets the reliability parameter. (NOT YET IN USE. WILL BE IN USED ONCE PARTIAL RELIABILITY IS ALLOWED )
             </summary>
             <value>
             The reliability parameter.
             </value>
            </member>
        <member name="P:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.ChannelPriority">
             <summary>
             Gets the channel priority. (NOT YET IN USE; ALL CHANNELS GET NORMAL PRIORITY)
             </summary>
             <value>
             A priority (values range between 0 and 65535).  These priorities are interpreted as weighted-fair-queuing scheduling priorities
             per the definition of the corresponding stream scheduler
             supporting interleaving in [I-D.ietf-tsvwg-sctp-ndata].  
             For use in WebRTC, the values used SHOULD be one of 128 ("below normal"), 256 ("normal"), 512 ("high") or 1024 ("extra high").
             </value>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.GetBytes(FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen)">
             <summary>
             Gets the bytes.
             </summary>
             <param name="message">The message.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.ParseBytes(System.Byte[])">
             <summary>
             Converts a byte array to a WebRTC DCEP message.
             </summary>
             <param name="bytes">The byte array.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.ChannelType">
             <summary>
             Gets or sets the type of the message (<see cref="T:FM.IceLink.WebRTC.WebRTCDCEPMessageType" />)
             </summary>
             <value>
             This field specifies the type of the Data Channel to be opened.
             </value>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.#ctor(System.Byte)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen.#ctor(System.Byte,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.WebRTCDCEPDataChannelOpen" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.WebRTCDCEPDataChannelAck">
             <summary>
             This message is sent in response to a DATA_CHANNEL_OPEN message on the stream used for user messages using the Data Channel.
             Reception of this message tells the opener that the Data Channel setup handshake is complete.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |  Message Type |
             +-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPDataChannelAck.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.WebRTCDCEPDataChannelAck" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPDataChannelAck.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPDataChannelAck.GetBytes(FM.IceLink.WebRTC.WebRTCDCEPDataChannelAck)">
             <summary>
             Gets the bytes.
             </summary>
             <param name="message">The message.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPDataChannelAck.ParseBytes(System.Byte[])">
             <summary>
             Converts a byte array to a WebRTC DCEP message.
             </summary>
             <param name="bytes">The byte array.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.WebRTCDCEPMessage">
             <summary>
             Data Channel Establishment Protocol message to establish data exchange over WebRTC channels.
             Ref. https://tools.ietf.org/html/draft-ietf-rtcweb-data-protocol-09
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.WebRTCDCEPMessage._MessageType">
             <summary>
             The message type
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.WebRTCDCEPMessage.MessageType">
             <summary>
             Gets or sets the type of the message.
             </summary>
             <value>
             This field identifies the type of information contained in the DCEP message. 
             It takes a value from 0x00 to 0xff. The value of 0xff is reserved for future use as an extension field.
             </value>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPMessage.GetBytes">
             <summary>
             Gets the bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.WebRTCDCEPMessage.ParseBytes(System.Byte[],System.Int32)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The start index.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.WebRTCDCEPMessageType">
             <summary>
             Identifies the type of information contained in the DCEP Message Type field.
             It takes a value from 0x00 to 0xff. The value of 0xff is reserved for future use as an extension field.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.WebRTCDCEPMessageType.DataChannelOpen">
             <summary>
             Open Data channel request
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.WebRTCDCEPMessageType.DataChannelAck">
             <summary>
             Confirmation of Data Channel opening
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.SCTPWebRTCPayloadProtocolIdentifier">
             <summary>
             SCTP Payload Protocol Identifiers used by WebRTC assigned by IANA (refer to www.iana.org/assignments/sctp-parameters/sctp-parameters.xhtml#sctp-parameters-25)
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.SCTPWebRTCPayloadProtocolIdentifier.WebRTCDCEP">
             <summary>
             WebRTC Data Channel Establishment Protocol http://www.iana.org/go/draft-ietf-rtcweb-data-protocol-09
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.SCTPWebRTCPayloadProtocolIdentifier.WebRTCString">
             <summary>
             WebRTC Data Channel String Message http://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-13
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.SCTPWebRTCPayloadProtocolIdentifier.WebRTCBinary">
             <summary>
             WebRTC Data Channel Binary Message http://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-13
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.SCTPWebRTCPayloadProtocolIdentifier.WebRTCEmptyString">
             <summary>
             WebRTC Data Channel Empty String Message http://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-13
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.SCTPWebRTCPayloadProtocolIdentifier.WebRTCEmptyBinary">
             <summary>
             WebRTC Data Channel Empty Binary Message http://tools.ietf.org/html/draft-ietf-rtcweb-data-channel-13
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.ReliableChannelPriority">
             <summary>
             These priorities are interpreted as weighted-fair-queuing scheduling priorities
             per the definition of the corresponding stream scheduler supporting interleaving
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.ReliableChannelType">
             <summary>
             Identifies the type of data channel requested in the DCEP message.
             It takes a value from 0x00 to 0xff. The values of 0x7f and 0xff have been reserved for future extensibility.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableChannelType.DataChannelReliable">
             <summary>
             The Data Channel provides a reliable in-order bi-directional communication
             </summary>
             <value>
             The data channel reliable.
             </value>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableChannelType.DataChannelReliableUnordered">
             <summary>
             The Data Channel provides a reliable unordered bi-directional communication
             </summary>
             <value>
             The data channel reliable unordered.
             </value>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableChannelType.DataChannelPartialReliableREXMIT">
             <summary>
             The Data Channel provides a partially-reliable in-order bi-directional communication.  User messages will not be retransmitted more times than specified in the Reliability Parameter.
             </summary>
             <value>
             The data channel partial reliable rexmit.
             </value>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableChannelType.DataChannelPartialReliableREXMITUnordered">
             <summary>
             The Data Channel provides a partial reliable unordered bi-directional communication.  User messages will not be retransmitted more times than specified in the Reliability Parameter.
             </summary>
             <value>
             The data channel partial reliable rexmit unordered.
             </value>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableChannelType.DataChannelPartialReliableTimed">
             <summary>
             The Data Channel provides a partial reliable in-order bi-directional communication.  
             User messages might not be transmitted or retransmitted after a specified life-time given in milliseconds in the Reliability Parameter.
             This life-time starts when providing the user message to the protocol stack.
             </summary>
             <value>
             The data channel partial reliable timed.
             </value>
            </member>
        <member name="P:FM.IceLink.WebRTC.ReliableChannelType.DataChannelPartialReliableTimedUnordered">
             <summary>
             The Data channel provides a partial reliable unordered bi-directional communication.  
             User messages might not be transmitted or retransmitted after a specified life-time given in milliseconds in the Reliability Parameter.  
             This life-time starts when providing the user message to the protocol stack.
             </summary>
             <value>
             The data channel partial reliable timed unordered.
             </value>
            </member>
        <member name="T:FM.IceLink.WebRTC.AndroidAudioRenderProvider">
             <summary>
             An Android audio render provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioRenderProvider.DefaultAudioStreamType">
             <summary>
             Gets or sets the default desired audio stream type (AudioManager.STREAM_*).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioRenderProvider.AudioStreamType">
             <summary>
             Gets or sets the desired audio stream type (AudioManager.STREAM_*).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioRenderProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AndroidAudioRenderProvider" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioRenderProvider.Initialize(FM.IceLink.WebRTC.AudioRenderInitializeArgs)">
             <summary>
             Initializes the audio render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioRenderProvider.Destroy">
             <summary>
             Destroys this instance. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioRenderProvider.Render(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Plays back an audio frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.AndroidLayoutManager">
             <summary>
             A layout manager for Android.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidLayoutManager.Container">
             <summary>
             Gets or sets the container.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidLayoutManager.#ctor(Android.App.Activity,Android.Views.ViewGroup)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AndroidLayoutManager" /> class.
             </summary>
             <param name="activity">The activity.</param>
             <param name="container">The layout container.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidLayoutManager.#ctor(Android.Views.ViewGroup)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AndroidLayoutManager" /> class.
             </summary>
             <param name="container">The layout container.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidLayoutManager.#ctor(Android.Views.ViewGroup,FM.IceLink.WebRTC.LayoutPreset)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AndroidLayoutManager" /> class.
             </summary>
             <param name="container">The layout container.</param>
             <param name="preset">The layout preset.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidLayoutManager.AddToContainer(System.Object)">
             <summary>
             Adds a control to the container.
             </summary>
             <param name="control">The control to add.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidLayoutManager.RemoveFromContainer(System.Object)">
             <summary>
             Removes a control from the container.
             </summary>
             <param name="control">The control to remove.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidLayoutManager.RunOnUIThread(FM.DoubleAction{System.Object,System.Object},System.Object,System.Object)">
             <summary>
             Runs an action on the main/UI thread.
             </summary>
             <param name="action">The action to invoke.</param>
             <param name="arg1">The first argument.</param>
             <param name="arg2">The second argument.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidLayoutManager.ApplyLayout">
             <summary>
             Applies a layout to the container.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidLayoutManager.InitializeOnGlobalLayout">
             <summary>
             Attempts to initialize the layout using the global
             layout listener until successful.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidLayoutManager.InitializeLayout">
             <summary>
             Initializes the layout.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.BaseMediaArgs">
             <summary>
             Base media arguments for media stream initialization.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.Audio">
             <summary>
             Gets or sets whether to initialize the
             audio capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.AudioDeviceNumber">
             <summary>
             Gets or sets the desired audio device number.
             Defaults to null (no preference).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.Video">
             <summary>
             Gets or sets whether to initialize the
             video capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.VideoDeviceNumber">
             <summary>
             Gets or sets the desired video device number.
             Defaults to null (no preference).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.VideoWidth">
             <summary>
             Gets or sets the desired video frame width (defaults to 320).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.VideoHeight">
             <summary>
             Gets or sets the desired video frame height (defaults to 240).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.VideoFrameRate">
             <summary>
             Gets or sets the desired video frame rate (defaults to 15).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.DefaultVideoScale">
             <summary>
             Gets or sets the scaling to apply to the remote video controls created
             by the default video render providers (if one exists on this platform).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.DefaultVideoPreviewScale">
             <summary>
             Gets or sets the scaling to apply to the local video control created
             by the default video capture provider (if one exists on this platform).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseMediaArgs.DefaultVideoSource">
             <summary>
             Gets or sets the default video source to use when initializing the
             default video capture provider (if one exists on this platform).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseMediaArgs.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.BaseMediaArgs" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelReceiveArgs">
             <summary>
             Arguments for the data channel receive event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelReceiveArgs.ChannelInfo">
             <summary>
             Gets or sets the data channel description.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelReceiveArgs.Data">
             <summary>
             Gets or sets the received data.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelReceiveArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelReceiveArgs.ToJson(FM.IceLink.WebRTC.DataChannelReceiveArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="dataChannelReceiveArgs">The data channel receive args to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelReceiveArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="dataChannelReceiveArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized data channel receive args.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.AndroidAudioCaptureProvider">
             <summary>
             An Android audio capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.DefaultAudioSource">
             <summary>
             Gets or sets the default desired audio source (MediaRecorder.AudioSource).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.DefaultUseAcousticEchoCanceler">
             <summary>
             Gets or sets whether or not the Android AcousticEchoCanceler should be used by default.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.DefaultUseAutomaticGainControl">
             <summary>
             Gets or sets whether or not the Android AutomaticGainControl should be used by default.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.DefaultUseNoiseSuppressor">
             <summary>
             Gets or sets whether or not the Android NoiseSuppressor should be used by default.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.AudioSource">
             <summary>
             Gets the desired audio source (MediaRecorder.AudioSource).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.UseAcousticEchoCanceler">
             <summary>
             Gets whether or not the Android AcousticEchoCanceler should be used.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.UseAutomaticGainControl">
             <summary>
             Gets whether or not the Android AutomaticGainControl should be used.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.UseNoiseSuppressor">
             <summary>
             Gets whether or not the Android NoiseSuppressor should be used.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.#ctor(Android.Content.Context)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AndroidAudioCaptureProvider" /> class.
             </summary>
             <param name="context">The context.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.Initialize(FM.IceLink.WebRTC.AudioCaptureInitializeArgs)">
             <summary>
             Initializes the audio capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.Destroy">
             <summary>
             Destroys this instance.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.Start">
             <summary>
             Starts the audio capture.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.Stop">
             <summary>
             Stops the audio capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.GetLabel">
             <summary>
             Gets the label of the audio device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidAudioCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.AndroidVideoCaptureProvider">
             <summary>
             An Android video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.GetCamera">
             <summary>
             Gets the underlying Android camera instance.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.OnCameraParameters">
             <summary>
             Gets or sets the callback to execute once
             camera parameters are created, but not 
             yet applied to the Camera instance.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.CreateCameraView">
             <summary>
             Gets or sets the callback that creates a new camera view for the capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.#ctor">
             <summary>
             Creates a new video capture provider using DefaultProviders.getAndroidContext().
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.#ctor(FM.IceLink.WebRTC.LayoutScale)">
             <summary>
             Creates a new video capture provider using DefaultProviders.getAndroidContext().
             </summary>
             <param name="previewScale">The scaling algorithm to use for the preview.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.#ctor(FM.IceLink.WebRTC.LayoutScale,FM.SingleFunction{Android.Content.Context,Android.Views.TextureView})">
             <summary>
             Creates a new video capture provider using DefaultProviders.getAndroidContext().
             </summary>
             <param name="previewScale">The scaling algorithm to use for the preview.</param>
             <param name="createCameraView">The callback that creates a new camera view for the capture provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.#ctor(Android.Content.Context)">
             <summary>
             Creates a new video capture provider.
             </summary>
             <param name="context">The current Android context, used to create the video preview.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.#ctor(Android.Content.Context,FM.IceLink.WebRTC.LayoutScale)">
             <summary>
             Creates a new video capture provider.
             </summary>
             <param name="context">The current Android context, used to create the video preview.</param>
             <param name="previewScale">The scaling algorithm to use for the preview.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.#ctor(Android.Content.Context,FM.IceLink.WebRTC.LayoutScale,FM.SingleFunction{Android.Content.Context,Android.Views.TextureView})">
             <summary>
             Creates a new video capture provider.
             </summary>
             <param name="context">The current Android context, used to create the video preview.</param>
             <param name="previewScale">The scaling algorithm to use for the preview.</param>
             <param name="createCameraView">The callback that creates a new camera view for the capture provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.Initialize(FM.IceLink.WebRTC.VideoCaptureInitializeArgs)">
             <summary>
             Initializes the video capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.Destroy">
             <summary>
             Destroys this instance.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.Start">
             <summary>
             Starts the video capture.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.Stop">
             <summary>
             Stops the video capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.GetLabel">
             <summary>
             Gets the label of the video device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.GetPreviewControl">
             <summary>
             Gets the video capture preview control.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.GetFrontDeviceNumber">
             <summary>
             Gets the front device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AndroidVideoCaptureProvider.GetRearDeviceNumber">
             <summary>
             Gets the rear device number.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.BaseContextMenu">
             <summary>
             The base class from which context menu implementations inherit.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.Layout">
             <summary>
             A layout definition, including local
             and remote frame definitions.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Layout.LocalFrame">
             <summary>
             Gets or sets the local frame.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Layout.RemoteFrames">
             <summary>
             Gets or sets the remote frames.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Layout.AllFrames">
             <summary>
             Gets or sets all frames (local and remote).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Layout.SwapLocalFrame(System.Int32)">
             <summary>
             Swaps the local frame with a remote frame.
             </summary>
             <param name="remoteFrameIndex">The index of the remote frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.Layout.SwapRemoteFrames(System.Int32,System.Int32)">
             <summary>
             Swaps two remote frames.
             </summary>
             <param name="remoteFrameIndex1">The index of the first remote frame.</param>
             <param name="remoteFrameIndex2">The index of the second remote frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.Layout.SwapFrames(FM.IceLink.WebRTC.LayoutFrame,FM.IceLink.WebRTC.LayoutFrame)">
             <summary>
             Swaps the properties of two frames.
             </summary>
             <param name="frame1">The first frame.</param>
             <param name="frame2">The second frame.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutAlignment">
             <summary>
             A layout alignment definition.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutAlignment.TopLeft">
             <summary>
             Indicates a top-left alignment.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutAlignment.Top">
             <summary>
             Indicates a top-center alignment.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutAlignment.TopRight">
             <summary>
             Indicates a top-right alignment.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutAlignment.Left">
             <summary>
             Indicates a center-left alignment.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutAlignment.Center">
             <summary>
             Indicates a center-center alignment.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutAlignment.Right">
             <summary>
             Indicates a center-right alignment.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutAlignment.BottomLeft">
             <summary>
             Indicates a bottom-left alignment.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutAlignment.Bottom">
             <summary>
             Indicates a bottom-center alignment.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutAlignment.BottomRight">
             <summary>
             Indicates a bottom-right alignment.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutFrame">
             <summary>
             A layout frame definition, including X/Y coordinates and width/height values.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutFrame.X">
             <summary>
             Gets or sets the X coordinate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutFrame.Y">
             <summary>
             Gets or sets the Y coordinate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutFrame.Width">
             <summary>
             Gets or sets the width value.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutFrame.Height">
             <summary>
             Gets or sets the height value.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LayoutFrame.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.LayoutFrame" /> class.
             </summary>
             <param name="x">The X coordinate.</param>
             <param name="y">The Y coordinate.</param>
             <param name="width">The width value.</param>
             <param name="height">The height value.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LayoutFrame.GetScaledFrame(FM.IceLink.WebRTC.LayoutScale,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Gets a scaled frame.
             </summary>
             <param name="scale">The scaling algorithm to use.</param>
             <param name="outerWidth">The width of the outer container.</param>
             <param name="outerHeight">The height of the outer container.</param>
             <param name="innerWidth">The width of the inner element.</param>
             <param name="innerHeight">The height of the inner element.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutMode">
             <summary>
             Specifies the layout mode that should be used.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutMode.FloatLocal">
             <summary>
             Indicates that the local video feed should be displayed as
             a floating element above the remote video feeds.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutMode.FloatRemote">
             <summary>
             Indicates that the remote video feeds should be displayed as
             floating elements above the local video feed.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutMode.Block">
             <summary>
             Indicates that the video feed should be displayed as a block
             element on its own row, separate from other video feeds.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutMode.Inline">
             <summary>
             Indicates that the video feed should be displayed as an inline
             element that shares a row with other video feeds.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutOrigin">
             <summary>
             A layout origin definition.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutOrigin.TopLeft">
             <summary>
             Indicates an origin where 0,0 is in the top-left corner.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutOrigin.TopRight">
             <summary>
             Indicates an origin where 0,0 is in the top-right corner.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutOrigin.BottomRight">
             <summary>
             Indicates an origin where 0,0 is in the bottom-right corner.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.LayoutOrigin.BottomLeft">
             <summary>
             Indicates an origin where 0,0 is in the bottom-left corner.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.CaptureProvider">
             <summary>
             Base capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.CaptureProvider.ShouldDropPacket(System.Int32)">
             <summary>
             Determines (randomly) whether a packet should be dropped.
             </summary>
             <param name="dropPacketProbability">The drop packet probability.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.CaptureProvider.ShouldDelayPacket(System.Int32)">
             <summary>
             Determines (randomly) whether a packet should be delayed.
             </summary>
             <param name="delayPacketProbability">The delay packet probability.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.CaptureProvider.GetPacketDelay(System.Int32)">
             <summary>
             Determines (randomly) how many packets should go out before a delayed packet is sent.
             </summary>
             <param name="delayPacketMaximum">The delay packet maximum.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.NullVideoCaptureProvider">
             <summary>
             A null video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoCaptureProvider.GetLabel">
             <summary>
             Gets the label of the video device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoCaptureProvider.Initialize(FM.IceLink.WebRTC.VideoCaptureInitializeArgs)">
             <summary>
             Initializes the video capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoCaptureProvider.Start">
             <summary>
             Starts the video capture provider.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoCaptureProvider.Stop">
             <summary>
             Stops the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoCaptureProvider.Destroy">
             <summary>
             Destroys the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoCaptureProvider.GetPreviewControl">
             <summary>
             Gets the video capture preview control.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoCaptureProvider.GetFrontDeviceNumber">
             <summary>
             Gets the front device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoCaptureProvider.GetRearDeviceNumber">
             <summary>
             Gets the rear device number.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.NullAudioCaptureProvider">
             <summary>
             A null audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullAudioCaptureProvider.GetLabel">
             <summary>
             Gets the label of the audio device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullAudioCaptureProvider.Initialize(FM.IceLink.WebRTC.AudioCaptureInitializeArgs)">
             <summary>
             Initializes the audio capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullAudioCaptureProvider.Start">
             <summary>
             Starts the audio capture provider.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullAudioCaptureProvider.Stop">
             <summary>
             Stops the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullAudioCaptureProvider.Destroy">
             <summary>
             Destroys the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullAudioCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider">
             <summary>
             A video capture provider that accepts frames from an
             incoming video render provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.AddFrame(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Adds a frame for processing.
             </summary>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.AddFrame(FM.IceLink.WebRTC.VideoBuffer,System.String[])">
             <summary>
             Adds a frame for processing to specific peers.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="peerIds">The peer IDs to target (or <c>null</c> to target all).</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.GetLabel">
             <summary>
             Gets the label of the video device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.Initialize(FM.IceLink.WebRTC.VideoCaptureInitializeArgs)">
             <summary>
             Initializes the video capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.Start">
             <summary>
             Starts the video capture provider.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.Stop">
             <summary>
             Stops the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.Destroy">
             <summary>
             Destroys the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.GetPreviewControl">
             <summary>
             Gets the video capture preview control.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.GetFrontDeviceNumber">
             <summary>
             Gets the front device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingVideoCaptureProvider.GetRearDeviceNumber">
             <summary>
             Gets the rear device number.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.OutgoingAudioCaptureProvider">
             <summary>
             An audio capture provider that accepts frames from an
             incoming audio render provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingAudioCaptureProvider.AddFrame(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Adds a frame for processing.
             </summary>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingAudioCaptureProvider.AddFrame(FM.IceLink.WebRTC.AudioBuffer,System.String[])">
             <summary>
             Adds a frame for processing to specific peers.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="peerIds">The peer IDs to target (or <c>null</c> to target all).</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingAudioCaptureProvider.GetLabel">
             <summary>
             Gets the label of the audio device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingAudioCaptureProvider.Initialize(FM.IceLink.WebRTC.AudioCaptureInitializeArgs)">
             <summary>
             Initializes the audio capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingAudioCaptureProvider.Start">
             <summary>
             Starts the audio capture provider.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingAudioCaptureProvider.Stop">
             <summary>
             Stops the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingAudioCaptureProvider.Destroy">
             <summary>
             Destroys the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OutgoingAudioCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.Distributor">
             <summary>
             A distributor that forwards media from one conference to another conference.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Distributor.Audio">
             <summary>
             Gets whether or not to distribute audio.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Distributor.Video">
             <summary>
             Gets whether or not to distribute video.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Distributor.ReceiveMediaStream">
             <summary>
             Gets the local media stream for the receiving conference.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Distributor.#ctor(System.Boolean,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.Distributor" /> class.
             </summary>
             <param name="audio">Whether or not to distribute audio.</param>
             <param name="video">Whether or not to distribute video.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.Distributor.GetSendMediaStream">
             <summary>
             Gets a local media stream for a sending conference.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.ImageViewVideoRenderProvider">
             <summary>
             An ImageView-based video render provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.ImageViewVideoRenderProvider.#ctor">
             <summary>
             Creates a new ImageView video render provider using DefaultProviders.getAndroidContext().
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.ImageViewVideoRenderProvider.#ctor(Android.Content.Context)">
             <summary>
             Creates a new ImageView video render provider.
             </summary>
             <param name="context">The current Android context, used to create the video view.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ImageViewVideoRenderProvider.#ctor(Android.Content.Context,FM.IceLink.WebRTC.LayoutScale)">
             <summary>
             Creates a new ImageView video render provider.
             </summary>
             <param name="context">The current Android context, used to create the video view.</param>
             <param name="scale">The scaling algorithm to use.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ImageViewVideoRenderProvider.Initialize(FM.IceLink.WebRTC.VideoRenderInitializeArgs)">
             <summary>
             Initializes the video render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ImageViewVideoRenderProvider.Render(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Renders a video frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ImageViewVideoRenderProvider.Render(Android.Graphics.Bitmap)">
             <summary>
             Renders a video frame.
             </summary>
             <param name="image">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.ImageViewVideoRenderProvider.Destroy">
             <summary>
             Destroys the video render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.ImageViewVideoRenderProvider.GetControl">
             <summary>
             Gets the underlying UI control.
             </summary>
             <returns>
             The underlying UI control.
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.GoogleDataAccumulator">
             <summary>
             An accumulator for Google's data channel implementation.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GoogleDataAccumulator.Packets">
             <summary>
             Gets the packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataAccumulator.Add(FM.IceLink.WebRTC.GoogleDataPacket)">
             <summary>
             Adds the specified packet.
             </summary>
             <param name="packet">The packet.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataAccumulator.Reset">
             <summary>
             Resets this instance, clearing out any accumulated packets.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.GoogleDataPacket">
             <summary>
             A packet for Google's data channel implementation.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GoogleDataPacket.StartOfPartition">
             <summary>
             Gets or sets whether this packet is the start of a partition.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GoogleDataPacket.EndOfPartition">
             <summary>
             Gets or sets whether this packet is the end of a partition.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GoogleDataPacket.Payload">
             <summary>
             Gets or sets the packet payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataPacket.ParseBytes(System.Byte[])">
             <summary>
             Parses the specified packet bytes.
             </summary>
             <param name="packetBytes">The packet bytes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataPacket.GetBytes">
             <summary>
             Gets the packet as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataPacket.GetBytes(FM.IceLink.WebRTC.GoogleDataPacket)">
             <summary>
             Gets a packet as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="F:FM.IceLink.WebRTC.GoogleDataPacket.MaxPacketSize">
             <summary>
             The maximum packet size (affects packetization).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataPacket.Packetize(System.Byte[])">
             <summary>
             Packetizes a single encoded data frame into multiple VP8 packets.
             </summary>
             <param name="encodedData">The encoded data.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataPacket.Depacketize(FM.IceLink.WebRTC.GoogleDataPacket[])">
             <summary>
             Depacketizes the specified packets into a single encoded data frame.
             </summary>
             <param name="packets">The packets.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.GoogleDataPadep">
             <summary>
             A packetizer/depacketizer for Google's data channel implementation.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataPadep.Packetize(System.Byte[],System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataPadep.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.ConferenceExtensions">
             <summary>
             Extension methods for <see cref="T:FM.IceLink.Conference" /> instances.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.ConferenceExtensions.SendData(FM.IceLink.Conference,FM.IceLink.WebRTC.DataChannelInfo,System.String)">
             <summary>
             Sends a data channel packet to the conference's connected peers.
             </summary>
             <param name="conference">The conference.</param>
             <param name="channelInfo">The data channel description.</param>
             <param name="data">The data to send.</param>
             <returns>The number of bytes sent for each peer ID, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ConferenceExtensions.SendData(FM.IceLink.Conference,FM.IceLink.WebRTC.DataChannelInfo,System.String,System.String)">
             <summary>
             Sends a data channel packet to one of the conference's connected peers.
             </summary>
             <param name="conference">The conference.</param>
             <param name="channelInfo">The data channel description.</param>
             <param name="data">The data to send.</param>
             <param name="peerId">The peer ID to target.</param>
             <returns>The number of bytes sent, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ConferenceExtensions.SendReliableString(FM.IceLink.Conference,FM.IceLink.WebRTC.ReliableDataChannel,System.String)">
             <summary>
             Sends a data string packet over a reliable channel to the conference's connected peers. 
             Messages must be limited to 16 KB.
             </summary>
             <param name="conference">The conference.</param>
             <param name="channel">The reliable channel description.</param>
             <param name="dataString">The data string to send.</param>
             <returns>
             An indicator whether data has been successfully sent.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ConferenceExtensions.SendReliableString(FM.IceLink.Conference,FM.IceLink.WebRTC.ReliableDataChannel,System.String,System.String)">
             <summary>
             Sends a data string over a reliable channel to one of the conference's connected peers.
             Messages must be limited to 16 KB.
             </summary>
             <param name="conference">The conference.</param>
             <param name="channel">The reliable channel description.</param>
             <param name="dataString">The data string to send.</param>
             <param name="peerId">The peer identifier.</param>
             <returns>
             An indicator whether data has been successfully sent.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ConferenceExtensions.SendReliableBytes(FM.IceLink.Conference,FM.IceLink.WebRTC.ReliableDataChannel,System.Byte[])">
             <summary>
             Sends a data byte packet over a reliable channel to the conference's connected peers.
             Messages must be limited to 16 KB.
             </summary>
             <param name="conference">The conference.</param>
             <param name="channel">The reliable channel description.</param>
             <param name="dataBytes">The data bytes.</param>
             <returns>
             An indicator whether data has been successfully sent.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.ConferenceExtensions.SendReliableBytes(FM.IceLink.Conference,FM.IceLink.WebRTC.ReliableDataChannel,System.Byte[],System.String)">
             <summary>
             Sends a data byte packet over a reliable to one of the conference's connected peers.
             Messages must be limited to 16 KB.
             </summary>
             <param name="conference">The conference.</param>
             <param name="channel">The reliable channel descriptionn.</param>
             <param name="dataBytes">The data binary.</param>
             <param name="peerId">The peer identifier.</param>
             <returns>
             An indicator whether data has been successfully sent.
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelStream">
             <summary>
             An ureliable (UDP-based) WebRTC data stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelStream.GoogleDataEncodingName">
             <summary>
             Gets the encoding name for Google-Data packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.RegisterCodec(System.String,FM.EmptyFunction{FM.IceLink.WebRTC.DataChannelCodec})">
             <summary>
             Registers a non-preferred data codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="createCodec">The codec creation callback.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.RegisterCodec(System.String,FM.EmptyFunction{FM.IceLink.WebRTC.DataChannelCodec},System.Boolean)">
             <summary>
             Registers a data codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="createCodec">The codec creation callback.</param>
             <param name="preferred">Whether to prefer the payload type in SDP offers.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.RegisterCodec(System.String,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.DataChannelCodec})">
             <summary>
             Registers a non-preferred data codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="createCodec">The codec creation callback.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.RegisterCodec(System.String,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.DataChannelCodec},System.Boolean)">
             <summary>
             Registers a data codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="createCodec">The codec creation callback.</param>
             <param name="preferred">Whether to prefer the payload type in SDP offers.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.RegisterCodec(System.String,System.Int32,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.DataChannelCodec})">
             <summary>
             Registers a non-preferred data codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="staticPayloadType">The static payload type.</param>
             <param name="createCodec">The codec creation callback.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.RegisterCodec(System.String,System.Int32,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.DataChannelCodec},System.Boolean)">
             <summary>
             Registers a data codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="staticPayloadType">The static payload type.</param>
             <param name="createCodec">The codec creation callback.</param>
             <param name="preferred">Whether to prefer the payload type in SDP offers.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelStream.ChannelInfos">
             <summary>
             Gets or sets the data channel descriptions.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.#ctor(FM.IceLink.WebRTC.DataChannelInfo)">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.DataChannelStream" /> class.
             </summary>
             <param name="channelInfo">The data channel description.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.#ctor(FM.IceLink.WebRTC.DataChannelInfo[])">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.DataChannelStream" /> class.
             </summary>
             <param name="channelInfos">The data channel descriptions.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.#ctor(FM.IceLink.WebRTC.DataChannelInfo,System.Boolean)">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.DataChannelStream" /> class.
             </summary>
             <param name="channelInfo">The data channel description.</param>
             <param name="offerDtls">Whether to offer to exchange SRTP keys using DTLS.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelStream.#ctor(FM.IceLink.WebRTC.DataChannelInfo[],System.Boolean)">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.DataChannelStream" /> class.
             </summary>
             <param name="channelInfos">The data channel descriptions.</param>
             <param name="offerDtls">Whether to offer to exchange SRTP keys using DTLS.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.LayoutPreset">
             <summary>
             A layout preset.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.Mode">
             <summary>
             Gets or sets the mode used by the layout engine.
             Defaults to <see cref="F:FM.IceLink.WebRTC.LayoutMode.FloatLocal" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.Direction">
             <summary>
             Gets or sets the direction of the layout flow.
             Defaults to <see cref="F:FM.IceLink.WebRTC.LayoutDirection.Horizontal" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.Alignment">
             <summary>
             Gets or sets the alignment of the layout.
             Defaults to <see cref="F:FM.IceLink.WebRTC.LayoutAlignment.BottomRight" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.FloatWidthPercent">
             <summary>
             Gets or sets the width of floating elements as a percent
             of the container width between 0.0 and 1.0.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatWidth" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.FloatHeightPercent">
             <summary>
             Gets or sets the height of floating elements as a percent
             of the container height between 0.0 and 1.0.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatHeight" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginXPercent">
             <summary>
             Gets or sets the X-margin between floating elements and the layout
             edge as a percent of the container width between 0.0 and 1.0.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginX" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginYPercent">
             <summary>
             Gets or sets the Y-margin between floating elements and the layout
             edge as a percent of the container height between 0.0 and 1.0.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginY" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.FloatWidth">
             <summary>
             Gets or sets the width of floating elements in pixels.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatWidthPercent" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.FloatHeight">
             <summary>
             Gets or sets the height of floating elements in pixels.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatHeightPercent" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginX">
             <summary>
             Gets or sets the X-margin between floating elements and the layout
             edge in pixels.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginXPercent" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginY">
             <summary>
             Gets or sets the Y-margin between floating elements and the layout
             edge in pixels.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginYPercent" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.BlockWidthPercent">
             <summary>
             Gets or sets the width of block elements as a percent
             of the container width between 0.0 and 1.0.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockWidth" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.BlockHeightPercent">
             <summary>
             Gets or sets the height of block elements as a percent
             of the container height between 0.0 and 1.0.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockHeight" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginXPercent">
             <summary>
             Gets or sets the X-margin between block elements and the layout
             edge as a percent of the container width between 0.0 and 1.0.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginX" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginYPercent">
             <summary>
             Gets or sets the Y-margin between block elements and the layout
             edge as a percent of the container height between 0.0 and 1.0.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginY" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.BlockWidth">
             <summary>
             Gets or sets the width of block elements in pixels.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockWidthPercent" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.BlockHeight">
             <summary>
             Gets or sets the height of block elements in pixels.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockHeightPercent" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginX">
             <summary>
             Gets or sets the X-margin between block elements and the layout
             edge in pixels.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginXPercent" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginY">
             <summary>
             Gets or sets the Y-margin between block elements and the layout
             edge in pixels.
             Overrides <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginYPercent" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.InlineMargin">
             <summary>
             Gets or sets the size of the margin in pixels to use
             between inline elements.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LayoutPreset.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.LayoutPreset" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LayoutPreset.CopyToPreset(FM.IceLink.WebRTC.LayoutPreset)">
             <summary>
             Copies this preset's properties to another preset.
             </summary>
             <param name="preset">The target preset.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LayoutPreset.ApplyPreset(FM.IceLink.WebRTC.LayoutPreset)">
             <summary>
             Applies a preset.
             </summary>
             <param name="preset">The preset to apply.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.Skype">
             <summary>
             Gets a Skype-style layout preset.
             Note that this will present differently
             on mobile devices.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.GoogleHangouts">
             <summary>
             Gets a Google Hangouts-style layout preset.
             Note that this will present differently
             on mobile devices.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.Facetime">
             <summary>
             Gets a Facetime-style layout preset.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.PreviewMode">
             <summary>
             Gets or sets the desired preview mode.
             DEPRECATED. Use
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.Mode" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.PreviewPadding">
             <summary>
             Gets or sets the amount of padding in pixels
             to use between the preview and the layout edge.
             DEPRECATED. Use
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginX" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginY" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginXPercent" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatMarginYPercent" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginX" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginY" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginXPercent" />, and/or
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockMarginYPercent" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.PreviewAlignment">
             <summary>
             Gets or sets the desired preview alignment.
             DEPRECATED. Use
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.Alignment" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.PreviewSize">
             <summary>
             Gets or sets the preview size as a percent of the
             container size when remote videos are present. For
             example, a value of 0.5 will cover half the container.
             DEPRECATED. Use
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatWidth" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatHeight" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatWidthPercent" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.FloatHeightPercent" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockWidth" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockHeight" />,
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockWidthPercent" />, and/or
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.BlockHeightPercent" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LayoutPreset.CellMargin">
             <summary>
             Gets or sets the size of the margin in pixels
             to use between cells.
             DEPRECATED. Use
             <see cref="P:FM.IceLink.WebRTC.LayoutPreset.InlineMargin" /> instead.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LayoutPreset.CalculateLayout(System.Int32,System.Int32,System.Int32,FM.IceLink.WebRTC.LayoutOrigin)">
             <summary>
             Gets a video frame layout.
             </summary>
             <param name="layoutWidth">The total width of the layout.</param>
             <param name="layoutHeight">The total height of the layout.</param>
             <param name="remoteCount">The number of remote frames.</param>
             <param name="origin">The layout origin</param>
             <returns>The video frame layout.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.LocalStartArgs">
             <summary>
             Arguments for starting a local media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalStartArgs.OnSuccess">
             <summary>
             Gets or sets the success callback.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalStartArgs.OnFailure">
             <summary>
             Gets or sets the failure callback.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalStartArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalStartArgs.ToJson(FM.IceLink.WebRTC.LocalStartArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalStartArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.LocalStartFailureArgs">
             <summary>
             Arguments for the callback invoked after failing to start a local media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalStartFailureArgs.LocalStream">
             <summary>
             Gets or sets the local media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalStartFailureArgs.Exception">
             <summary>
             Gets or sets the exception.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalStartFailureArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalStartFailureArgs.ToJson(FM.IceLink.WebRTC.LocalStartFailureArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalStartFailureArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.LocalStartSuccessArgs">
             <summary>
             Arguments for the callback invoked after successfully starting a local media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalStartSuccessArgs.LocalStream">
             <summary>
             Gets or sets the local media stream.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalStartSuccessArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalStartSuccessArgs.ToJson(FM.IceLink.WebRTC.LocalStartSuccessArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalStartSuccessArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioStream">
             <summary>
             A WebRTC audio stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.PcmuEncodingName">
             <summary>
             Gets the encoding name for PCMU (G.711u) packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.PcmaEncodingName">
             <summary>
             Gets the encoding name for PCMA (G.711a) packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.OpusEncodingName">
             <summary>
             Gets the encoding name for Opus packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.PcmuPayloadType">
             <summary>
             Gets the static payload type for PCMU (G.711u) packets (0).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.PcmaPayloadType">
             <summary>
             Gets the static payload type for PCMA (G.711a) packets (8).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioStream.RegisterCodec(System.String,System.Int32,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.AudioCodec})">
             <summary>
             Registers a non-preferred audio codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="channels">The number of channels.</param>
             <param name="createCodec">The codec creation callback.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioStream.RegisterCodec(System.String,System.Int32,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.AudioCodec},System.Boolean)">
             <summary>
             Registers an audio codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="channels">The number of channels.</param>
             <param name="createCodec">The codec creation callback.</param>
             <param name="preferred">Whether to prefer the payload type in SDP offers.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioStream.RegisterCodec(System.String,System.Int32,System.Int32,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.AudioCodec})">
             <summary>
             Registers a non-preferred audio codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="channels">The number of channels.</param>
             <param name="staticPayloadType">The static payload type.</param>
             <param name="createCodec">The codec creation callback.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioStream.RegisterCodec(System.String,System.Int32,System.Int32,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.AudioCodec},System.Boolean)">
             <summary>
             Registers an audio codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="channels">The number of channels.</param>
             <param name="staticPayloadType">The static payload type.</param>
             <param name="createCodec">The codec creation callback.</param>
             <param name="preferred">Whether to prefer the payload type in SDP offers.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.DropPacketProbability">
             <summary>
             Gets or sets <see cref="P:FM.IceLink.WebRTC.AudioStream.OutgoingDropPacketProbability" />.
             Deprecated. Use <see cref="P:FM.IceLink.WebRTC.AudioStream.OutgoingDropPacketProbability" />
             or <see cref="P:FM.IceLink.WebRTC.AudioStream.IncomingDropPacketProbability" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.OutgoingDropPacketProbability">
             <summary>
             Gets or sets the probability that an
             outgoing packet should be dropped.
             Affects outgoing data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.IncomingDropPacketProbability">
             <summary>
             Gets or sets the probability that an
             incoming packet should be dropped.
             Affects incoming data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.DelayPacketProbability">
             <summary>
             Gets or sets <see cref="P:FM.IceLink.WebRTC.AudioStream.OutgoingDelayPacketProbability" />.
             Deprecated. Use <see cref="P:FM.IceLink.WebRTC.AudioStream.OutgoingDelayPacketProbability" />
             or <see cref="P:FM.IceLink.WebRTC.AudioStream.IncomingDelayPacketProbability" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.OutgoingDelayPacketProbability">
             <summary>
             Gets or sets the probability that an
             outgoing packet should be delayed.
             Affects outgoing data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.IncomingDelayPacketProbability">
             <summary>
             Gets or sets the probability that an
             incoming packet should be delayed.
             Affects incoming data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.DelayPacketMaximum">
             <summary>
             Gets or sets <see cref="P:FM.IceLink.WebRTC.AudioStream.OutgoingDelayPacketMaximum" />.
             Deprecated. Use <see cref="P:FM.IceLink.WebRTC.AudioStream.OutgoingDelayPacketMaximum" />
             or <see cref="P:FM.IceLink.WebRTC.AudioStream.IncomingDelayPacketMaximum" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.OutgoingDelayPacketMaximum">
             <summary>
             Gets or sets the maximum number of
             milliseconds that may elapse before
             a delayed packet is sent.
             Affects outgoing data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.IncomingDelayPacketMaximum">
             <summary>
             Gets or sets the maximum number of
             milliseconds that may elapse before
             a delayed packet is received.
             Affects incoming data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.DisablePLC">
             <summary>
             Gets or sets a flag indicating whether packet
             loss concealment (PLC) should be disabled.
             If set to true, extra packets will be added
             to replace missing packets when the RTP
             packet sequence is violated.
             Defaults to false.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.BypassCodec">
             <summary>
             Gets or sets a flag indicating whether
             encoding and decoding should be bypassed
             for outgoing and incoming media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.BypassEncode">
             <summary>
             Gets or sets a flag indicating whether
             encoding should be bypassed
             for outgoing media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.BypassDecode">
             <summary>
             Gets or sets a flag indicating whether
             decoding should be bypassed
             for incoming media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.DisableJitterBuffer">
             <summary>
             Gets or sets a value indicating whether
             the jitter buffer should be disabled.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.JitterBufferLength">
             <summary>
             Gets or sets the initial jitter buffer length in milliseconds.
             Defaults to 100 (ms).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioStream.JitterBufferMaxLength">
             <summary>
             Gets or sets the maximum jitter buffer length in milliseconds.
             Defaults to 300 (ms).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioStream.#ctor(FM.IceLink.WebRTC.LocalMediaStream)">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.AudioStream" /> class.
             </summary>
             <param name="localStream">The local media stream.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioStream.#ctor(FM.IceLink.WebRTC.LocalMediaStream,System.Boolean)">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.AudioStream" /> class.
             </summary>
             <param name="localStream">The local media stream.</param>
             <param name="offerDtls">Whether to offer to exchange SRTP keys using DTLS.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioStream.#ctor(FM.IceLink.WebRTC.LocalMediaStream,System.Boolean,FM.IceLink.StreamFormat[])">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.AudioStream" /> class.
             </summary>
             <param name="localStream">The local media stream.</param>
             <param name="offerDtls">Whether to offer to exchange SRTP keys using DTLS.</param>
             <param name="formats">The stream formats to allow.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.BaseLayoutManager">
             <summary>
             A class that supplies simple video frame layout management.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseLayoutManager.LayoutOrigin">
             <summary>
             Gets or sets the layout origin.
             Defaults to <see cref="F:FM.IceLink.WebRTC.LayoutOrigin.TopLeft" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseLayoutManager.OnLayout">
             <summary>
             Gets or sets a callback to invoke when a layout
             is calculated. Allows custom algorithms to modify
             the default layout.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.BaseLayoutManager.OnLayoutComplete">
             <summary>
             Gets or sets a callback to invoke when a layout
             is calculated. Allows custom algorithms to modify
             the default layout.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.BaseLayoutManager.OnUnhandledException">
             <summary>
             Raised when an exception is thrown in user code and not handled,
             typically in a callback or event handler.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.BaseLayoutManager" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.#ctor(FM.IceLink.WebRTC.LayoutPreset)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.BaseLayoutManager" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.GetLayout(System.Int32,System.Int32,System.Int32)">
             <summary>
             Gets a video frame layout.
             </summary>
             <param name="layoutWidth">The total width of the layout.</param>
             <param name="layoutHeight">The total height of the layout.</param>
             <param name="remoteCount">The number of remote frames.</param>
             <returns>The video frame layout.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.GetLocalVideoControl">
             <summary>
             Gets the local video control from the layout.
             </summary>
             <returns>The local video control.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.SetLocalVideoControl(System.Object)">
             <summary>
             Adds the local video control to the layout.
             </summary>
             <param name="localVideoControl">The local video control.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.UnsetLocalVideoControl">
             <summary>
             Removes the local video control from the layout.
             </summary>
             <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.GetRemoteVideoControl(System.String)">
             <summary>
             Gets a remote video control from the layout.
             </summary>
             <param name="peerId">The peer ID.</param>
             <returns>The remote video control.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.AddRemoteVideoControl(System.String,System.Object)">
             <summary>
             Adds a remote video control to the layout.
             </summary>
             <param name="peerId">The peer ID.</param>
             <param name="remoteVideoControl">The remote video control.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.RemoveRemoteVideoControl(System.String)">
             <summary>
             Removes a remote video control from the layout.
             </summary>
             <param name="peerId">The peer ID.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.GetRemoteVideoControls(System.String[])">
             <summary>
             Gets remote video controls from the layout.
             </summary>
             <param name="peerIds">The peer IDs.</param>
             <returns>The remote video controls.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.AddRemoteVideoControls(System.String[],System.Object[])">
             <summary>
             Adds remote video controls to the layout.
             </summary>
             <param name="peerIds">The peer IDs.</param>
             <param name="remoteVideoControls">The remote video controls.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.RemoveRemoteVideoControls(System.String[])">
             <summary>
             Removes remote video controls from the layout.
             </summary>
             <param name="peerIds">The peer IDs.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>. Check the logs for additional information.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.GetPeerIds">
             <summary>
             Gets the IDs of peers with remote video controls in the layout.
             </summary>
             <returns>The peer IDs.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.GetRemoteVideoControls">
             <summary>
             Gets all remote video controls from the layout.
             </summary>
             <returns>The remote video controls.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.RemoveRemoteVideoControls">
             <summary>
             Removes all remote video controls from the layout.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.Reset">
             <summary>
             Removes all remote video controls from the layout,
             then removes the local video control from the layout.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.DoLayout">
             <summary>
             Lays out the controls.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.AddToContainer(System.Object)">
             <summary>
             Adds a control to the container.
             </summary>
             <param name="control">The control to add.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.RemoveFromContainer(System.Object)">
             <summary>
             Removes a control from the container.
             </summary>
             <param name="control">The control to remove.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.RunOnUIThread(FM.DoubleAction{System.Object,System.Object},System.Object,System.Object)">
             <summary>
             Runs an action on the main/UI thread.
             </summary>
             <param name="action">The action to invoke.</param>
             <param name="arg1">The first argument.</param>
             <param name="arg2">The second argument.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseLayoutManager.ApplyLayout">
             <summary>
             Applies a layout to the container.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.BaseWebRTCStream">
             <summary>
             Base class for WebRTC streams.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BaseWebRTCStream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamProtocol,FM.IceLink.StreamFormat[],System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.BaseWebRTCStream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="protocol">The stream protocol.</param>
             <param name="formats">The stream formats.</param>
             <param name="offerDtls">Whether to offer to exchange SRTP keys using DTLS.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelBuffer">
             <summary>
             A data channel buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelBuffer.Data">
             <summary>
             Gets or sets the data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelBuffer.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source (SSRC).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelBuffer.#ctor(System.String,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.DataChannelBuffer" /> class.
             </summary>
             <param name="data">The buffer data.</param>
             <param name="synchronizationSource">The synchronization source (SSRC).</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioCaptureInitializeArgs">
             <summary>
             Arguments for audio capture initialization.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.LocalStream">
             <summary>
             Gets or sets the local media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.DeviceNumber">
             <summary>
             Gets or sets the desired device number.
             Defaults to null (no preference).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.ClockRate">
             <summary>
             Gets or sets the capture sample rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.Channels">
             <summary>
             Gets or sets the capture channel count.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.Video">
             <summary>
             Gets or sets whether video is being captured as well.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.VideoDeviceNumber">
             <summary>
             Gets or sets the desired video device number.
             Defaults to null (no preference).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.VideoWidth">
             <summary>
             Gets or sets the desired video frame width.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.VideoHeight">
             <summary>
             Gets or sets the desired video frame height.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.VideoFrameRate">
             <summary>
             Gets or sets the desired video frame rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.VideoClockRate">
             <summary>
             Gets or sets the desired video clock rate.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.ToJson(FM.IceLink.WebRTC.AudioCaptureInitializeArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureInitializeArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelCaptureInitializeArgs">
             <summary>
             Arguments for data channel capture initialization.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelCaptureInitializeArgs.ClockRate">
             <summary>
             Gets or sets the capture clock rate.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelCaptureProvider">
             <summary>
             Abstract definition for a data channel capture implementation.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.DataChannelCaptureProvider.OnFrame">
             <summary>
             Raised whenever a frame is captured from the data device.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelCaptureProvider.IsInitialized">
             <summary>
             Gets or sets whether the data channel capture provider has been initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelCaptureProvider.IsRunning">
             <summary>
             Gets or sets whether the data channel capture is running.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelCaptureProvider.IsDestroyed">
             <summary>
             Gets or sets whether the data channel capture provider has been destroyed.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCaptureProvider.RaiseFrame(FM.IceLink.WebRTC.DataChannelBuffer)">
             <summary>
             Raises a frame for processing.
             </summary>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCaptureProvider.GetLabel">
             <summary>
             Gets the label of the data device.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCaptureProvider.Initialize(FM.IceLink.WebRTC.DataChannelCaptureInitializeArgs)">
             <summary>
             Initializes the data capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCaptureProvider.Start">
             <summary>
             Starts the data capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCaptureProvider.Stop">
             <summary>
             Stops the data capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCaptureProvider.Destroy">
             <summary>
             Destroys the data capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider">
             <summary>
             Data capture provider that handles an incoming remote data stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.Link">
             <summary>
             Gets or sets the link.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.StreamIndex">
             <summary>
             Gets or sets the stream index.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.Codecs">
             <summary>
             Gets or sets the codecs.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.RenderProvider">
             <summary>
             Gets or sets the render provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.#ctor(FM.IceLink.Link,System.Int32,FM.IceLink.WebRTC.DataChannelCodec[],FM.IceLink.WebRTC.RemoteDataChannelRenderProvider)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider" /> class.
             </summary>
             <param name="link">The link.</param>
             <param name="streamIndex">The stream index.</param>
             <param name="codecs">The codecs.</param>
             <param name="renderProvider">The render provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.GetLabel">
             <summary>
             Gets the label of the data device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.Initialize(FM.IceLink.WebRTC.DataChannelCaptureInitializeArgs)">
             <summary>
             Initializes the data capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.Start">
             <summary>
             Starts the data capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.Stop">
             <summary>
             Stops the data capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider.Destroy">
             <summary>
             Destroys the data capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.BasicDataChannelPadep">
             <summary>
             An implementation of a basic data channel packetizer/depacketizer
             that maps each frame to an RTP packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BasicDataChannelPadep.Packetize(System.Byte[],System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BasicDataChannelPadep.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelPadep">
             <summary>
             Abstract definition of a data channel packetizer/depacketizer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelPadep.Packetize(System.Byte[],System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelPadep.GetNextTimestamp(System.Int32)">
             <summary>
             Gets the next timestamp for an RTP packet.
             </summary>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelCodec">
             <summary>
             Abstract definition of a data channel encoder/decoder.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCodec.Initialize(FM.IceLink.WebRTC.CodecUsage,FM.IceLink.Conference,FM.IceLink.Link,System.String,System.Object,System.String)">
             <summary>
             Initializes the codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="peerId">The ID of the remote peer (or null).</param>
             <param name="peerState">Custom state associated with the remote peer (or null).</param>
             <param name="encodingName">The encoding name, as defined in SDP.</param>
             <returns><c>true</c> if initialized; <c>false</c> if previously initialized.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCodec.Initialize(FM.IceLink.WebRTC.CodecUsage,FM.IceLink.Conference,FM.IceLink.Link,System.String,System.Object,System.String,System.Int32)">
             <summary>
             Initializes the codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="peerId">The ID of the remote peer (or null).</param>
             <param name="peerState">Custom state associated with the remote peer (or null).</param>
             <param name="encodingName">The encoding name, as defined in SDP.</param>
             <param name="clockRate">The clock rate.</param>
             <returns><c>true</c> if initialized; <c>false</c> if previously initialized.</returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelCodec.Key">
             <summary>
             Gets the key used to identify this data channel codec.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCodec.CreateKey(System.String,System.Int32)">
             <summary>
             Gets a unique key for a given encoding name and clock rate.
             </summary>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
             <returns>A unique key.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCodec.Encode(FM.IceLink.WebRTC.DataChannelBuffer)">
             <summary>
             Encodes a frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCodec.Decode(System.Byte[],FM.IceLink.RTPPacket)">
             <summary>
             Decodes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCodec.Packetize(System.Byte[],FM.IceLink.WebRTC.DataChannelBuffer)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCodec.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCodec.GetExtraByteCount">
             <summary>
             Gets the number of extra bytes added to the encoded data.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelCodec.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.GoogleDataCodec">
             <summary>
             An implementation of a Google-Data encoder/decoder.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataCodec.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.GoogleDataCodec" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataCodec.Encode(FM.IceLink.WebRTC.DataChannelBuffer)">
             <summary>
             Encodes a frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataCodec.Decode(System.Byte[],FM.IceLink.RTPPacket)">
             <summary>
             Decodes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataCodec.Packetize(System.Byte[],FM.IceLink.WebRTC.DataChannelBuffer)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataCodec.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataCodec.ProcessRTCP(FM.IceLink.RTCPPacket[])">
             <summary>
             Processes RTCP packets.
             </summary>
             <param name="packets">The packets to process.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataCodec.GetExtraByteCount">
             <summary>
             Gets the number of extra bytes added to the encoded data.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.GoogleDataCodec.Destroy">
             <summary>
             Destroys the codec.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.JpegPacket">
             <summary>
             RFC-2435 implementation of a JPEG packet for network transport.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegPacket.TypeSpecific">
             <summary>
             Gets or sets type-specific data.
             8 bits. Interpretation depends on the value of the type field.  If no
             interpretation is specified, this field MUST be zeroed on
             transmission and ignored on reception.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegPacket.FragmentOffset">
             <summary>
             Gets or sets the fragment offset.
             24 bits. The Fragment Offset is the offset in bytes of the current packet in
             the JPEG frame data. This value is encoded in network byte order
             (most significant byte first). The Fragment Offset plus the length of
             the payload data in the packet MUST NOT exceed 2^24 bytes.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegPacket.Type">
             <summary>
             Gets or sets the type.
             8 bits The type field specifies the information that would otherwise be
             present in a JPEG abbreviated table-specification as well as the
             additional JFIF-style parameters not defined by JPEG.  Types 0-63 are
             reserved as fixed, well-known mappings to be defined by this document
             and future revisions of this document.  Types 64-127 are the same as
             types 0-63, except that restart markers are present in the JPEG data
             and a Restart Marker header appears immediately following the main
             JPEG header.  Types 128-255 are free to be dynamically defined by a
             session setup protocol (which is beyond the scope of this document).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegPacket.Q">
             <summary>
             Gets or sets the quantization tables definition.
             8 bits. The Q field defines the quantization tables for this frame.  Q values
             0-127 indicate the quantization tables are computed using an
             algorithm determined by the Type field (see below).  Q values 128-255
             indicate that a Quantization Table header appears after the main JPEG
             header (and the Restart Marker header, if present) in the first
             packet of the frame (fragment offset 0).  This header can be used to
             explicitly specify the quantization tables in-band.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegPacket.WidthByte">
             <summary>
             Gets or sets the width / 8.
             8 bits. This field encodes the width of the image in 8-pixel multiples (e.g.,
             a width of 40 denotes an image 320 pixels wide).  The maximum width
             is 2040 pixels.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegPacket.HeightByte">
             <summary>
             Gets or sets the height / 8.
             8 bits. This field encodes the height of the image in 8-pixel multiples
             (e.g., a height of 30 denotes an image 240 pixels tall). When
             encoding interlaced video, this is the height of a video field, since
             fields are individually JPEG encoded. The maximum height is 2040
             pixels.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegPacket.Width">
             <summary>
             Gets or sets the image width.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegPacket.Height">
             <summary>
             Gets or sets the image height.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegPacket.Payload">
             <summary>
             Gets or sets the data payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.JpegPacket.Parse(System.Byte[])">
             <summary>
             Parses the specified packet bytes.
             </summary>
             <param name="packetBytes">The packet bytes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.JpegPacket.GetBytes">
             <summary>
             Gets the packet as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="F:FM.IceLink.WebRTC.JpegPacket.MaxPacketSize">
             <summary>
             The maximum packet size (affects packetization).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.JpegPacket.Packetize(System.Byte[])">
             <summary>
             Packetizes a single encoded data frame into multiple JPEG packets.
             </summary>
             <param name="encodedData">The encoded data.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.JpegPacket.Depacketize(FM.IceLink.WebRTC.JpegPacket[])">
             <summary>
             Depacketizes the specified packets into a single encoded data frame.
             </summary>
             <param name="packets">The packets.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.JpegPadep">
             <summary>
             An implementation of a JPEG packetizer/depacketizer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.JpegPadep.Packetize(System.Byte[],System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.JpegPadep.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.JpegAccumulator">
             <summary>
             Accumulates incoming JPEG packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.JpegAccumulator.Packets">
             <summary>
             Gets the packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.JpegAccumulator.Add(FM.IceLink.WebRTC.JpegPacket)">
             <summary>
             Adds the specified packet.
             </summary>
             <param name="packet">The packet.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.JpegAccumulator.Reset">
             <summary>
             Resets this instance, clearing out any accumulated packets.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.Vp8Fragment">
             <summary>
             A VP8 packet fragment.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Fragment.Data">
             <summary>
             Gets or sets the data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Fragment.SequenceNumber">
             <summary>
             Gets or sets the RTP sequence number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Fragment.First">
             <summary>
             Gets or sets whether this is the first packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Fragment.Last">
             <summary>
             Gets or sets whether this is the last packet.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.Vp8FragmentedPacket">
             <summary>
             A fragmented VP8 packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8FragmentedPacket.MaxAge">
             <summary>
             Gets or sets the maximum age (defaults to 2).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8FragmentedPacket.#ctor(FM.IceLink.WebRTC.Vp8Fragment)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.Vp8FragmentedPacket" /> class.
             </summary>
             <param name="fragment">The first fragment.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8FragmentedPacket.Add(FM.IceLink.WebRTC.Vp8Fragment)">
             <summary>
             Adds the specified fragment.
             </summary>
             <param name="fragment">The fragment.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8FragmentedPacket.IncreaseAge">
             <summary>
             Increases the age of the fragmented packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8FragmentedPacket.IsAged">
             <summary>
             Gets a value indicating whether the fragments have aged.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8FragmentedPacket.IsComplete">
             <summary>
             Gets whether the fragments are ready for assembly.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8FragmentedPacket.Assemble">
             <summary>
             Assembles the fragments.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.Vp8Accumulator">
             <summary>
             Accumulates incoming VP8 packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Accumulator.ClearAged">
             <summary>
             Clears packets missing fragments.
             </summary>
             <returns>The number of cleared packets.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Accumulator.Add(FM.IceLink.RTPPacket)">
             <summary>
             Adds the specified packet.
             </summary>
             <param name="rtpPacket">The RTP packet.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.Vp8Packet">
             <summary>
             A VP8 packet for RTP.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.ExtendedControlBitsPresent">
             <summary>
             Gets or sets whether extended control bits are present.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.NonReferenceFrame">
             <summary>
             Gets or sets whether this packet belongs to a non-reference frame.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.StartOfPartition">
             <summary>
             Gets or sets whether this packet is the start of a partition.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.PartitionId">
             <summary>
             Gets or sets the partition ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.PictureIDPresent">
             <summary>
             Gets or sets whether a picture ID is present.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.TemporalLevelZeroIndexPresent">
             <summary>
             Gets or sets whether a temporal level zero index is present.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.TemporalLayerIndexPresent">
             <summary>
             Gets or sets whether a temporal layer index is present.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.KeyIndexPresent">
             <summary>
             Gets or sets whether a key index is present.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.PictureID">
             <summary>
             Gets or sets the picture ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.TemporalLevelZeroIndex">
             <summary>
             Gets or sets the temporal level zero index.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.TemporalLayerIndex">
             <summary>
             Gets or sets the temporal layer index.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.LayerSync">
             <summary>
             Gets or sets whether layer sync is set.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.KeyIndex">
             <summary>
             Gets or sets the key index.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Packet.Payload">
             <summary>
             Gets or sets the data payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Packet.ParseBytes(System.Byte[])">
             <summary>
             Parses the specified packet bytes.
             </summary>
             <param name="packetBytes">The packet bytes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Packet.GetBytes">
             <summary>
             Gets the packet as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Packet.GetBytes(FM.IceLink.WebRTC.Vp8Packet)">
             <summary>
             Gets a packet as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="F:FM.IceLink.WebRTC.Vp8Packet.MaxPacketSize">
             <summary>
             The maximum packet size (affects packetization).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Packet.Packetize(System.Byte[])">
             <summary>
             Packetizes a single encoded data frame into multiple VP8 packets.
             </summary>
             <param name="encodedData">The encoded data.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Packet.Depacketize(FM.IceLink.WebRTC.Vp8Packet[])">
             <summary>
             Depacketizes the specified packets into a single encoded data frame.
             </summary>
             <param name="packets">The packets.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Packet.IsKeyFrame">
             <summary>
             Determines whether the packet payload represents a keyframe.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Packet.GetWidth">
             <summary>
             Gets the width of the image if this is a key frame.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Packet.GetHeight">
             <summary>
             Gets the height of the image if this is a key frame.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.Vp8Padep">
             <summary>
             An implementation of a VP8 packetizer/depacketizer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Padep.Packetize(System.Byte[],System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.Vp8Padep.SequenceNumberingViolated">
             <summary>
             Gets or sets whether RTP sequence numbering has
             been violated.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Padep.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Padep.IsKeyFrame(System.Byte[])">
             <summary>
             Determines whether the encoded frame is a key frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Padep.GetWidth(System.Byte[])">
             <summary>
             Gets the width of the image from an encoded key frame.
             </summary>
             <param name="encodedKeyFrame">The encoded key frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Vp8Padep.GetHeight(System.Byte[])">
             <summary>
             Gets the height of the image from an encoded key frame.
             </summary>
             <param name="encodedKeyFrame">The encoded key frame.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioPadep">
             <summary>
             Abstract definition of an audio packetizer/depacketizer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioPadep.Packetize(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="packetTime">The packet time.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioPadep.DisableTimestampReset">
             <summary>
             Gets or sets whether timestamp resetting should
             be disabled entirely.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioPadep.TimestampResetInterval">
             <summary>
             Gets or sets the amount of time in milliseconds
             between audio frames that will trigger an absolute
             (i.e. wall-clock) reset of the timestamp. Defaults
             to 1000ms.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioPadep.GetNextTimestamp(System.Int32,System.Int32)">
             <summary>
             Gets the next timestamp for an RTP packet.
             </summary>
             <param name="clockRate">The clock rate.</param>
             <param name="packetTime">The packet time.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioPadep.GetNextTimestamp(System.Int32,System.Int32,System.Boolean)">
             <summary>
             Gets the next timestamp for an RTP packet.
             </summary>
             <param name="clockRate">The clock rate.</param>
             <param name="packetTime">The packet time.</param>
             <param name="resetTimestamp">Whether to reset the RTP timestamp.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoCaptureInitializeArgs">
             <summary>
             Arguments for video capture initialization.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.LocalStream">
             <summary>
             Gets or sets the local media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.DeviceNumber">
             <summary>
             Gets or sets the desired device number.
             Defaults to null (no preference).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.Width">
             <summary>
             Gets or sets the desired frame width.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.Height">
             <summary>
             Gets or sets the desired frame height.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.FrameRate">
             <summary>
             Gets or sets the desired frame rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.ClockRate">
             <summary>
             Gets or sets the capture clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.Audio">
             <summary>
             Gets or sets whether audio is being captured as well.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.AudioDeviceNumber">
             <summary>
             Gets or sets the desired audio device number.
             Defaults to null (no preference).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.AudioClockRate">
             <summary>
             Gets or sets the audio capture sample rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.AudioChannels">
             <summary>
             Gets or sets the audio capture channel count.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.ToJson(FM.IceLink.WebRTC.VideoCaptureInitializeArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureInitializeArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioDeviceNumberChangedArgs">
             <summary>
             Arguments for the AudioCaptureProvider OnDeviceNumberChanged event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioDeviceNumberChangedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioDeviceNumberChangedArgs.LastDeviceNumber">
             <summary>
             Gets or sets the last device number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioDeviceNumberChangedArgs.DeviceNumber">
             <summary>
             Gets or sets the new device number.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioFrameCapturedArgs">
             <summary>
             Arguments for the AudioCaptureProvider OnFrame event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioFrameCapturedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioFrameCapturedArgs.Buffer">
             <summary>
             Gets or sets the buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioFrameCapturedArgs.PeerIds">
             <summary>
             Gets or sets the peer IDs being targeted (or <c>null</c> if targeting all).
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioCaptureMutedArgs">
             <summary>
             Arguments for the AudioCaptureProvider OnMuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureMutedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioCaptureUnmutedArgs">
             <summary>
             Arguments for the AudioCaptureProvider OnUnmuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureUnmutedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioCaptureDisconnectedArgs">
             <summary>
             Arguments for the AudioCaptureProvider OnDisconnected event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureDisconnectedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioCaptureLevelArgs">
             <summary>
             Arguments for the AudioCaptureProvider OnLevel event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureLevelArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureLevelArgs.Level">
             <summary>
             Gets or sets the audio level (0.0 - 1.0).
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioCaptureProvider">
             <summary>
             Abstract definition for an audio capture implementation.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.IsMuted">
             <summary>
             Gets whether the audio capture is muted. 
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.Volume">
             <summary>
             Gets or sets the volume (1.0 is unity gain).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.DeviceNumber">
             <summary>
             Gets or sets the audio device number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.DesiredDeviceNumber">
             <summary>
             Gets the desired device number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.DesiredClockRate">
             <summary>
             Gets the desired clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.DesiredChannels">
             <summary>
             Gets the desired channel count.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.AudioCaptureProvider.OnDeviceNumberChanged">
             <summary>
             Raised whenever the current device number changes.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.AudioCaptureProvider.OnFrame">
             <summary>
             Raised whenever a frame is captured from the audio device.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.AudioCaptureProvider.OnMuted">
             <summary>
             Raised whenever the capture is muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.AudioCaptureProvider.OnUnmuted">
             <summary>
             Raised whenever the capture is unmuted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.AudioCaptureProvider.OnDisconnected">
             <summary>
             Raised when the device is disconnected.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.AudioCaptureProvider.OnLevel">
             <summary>
             Raised when the audio level is detected.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.IsInitialized">
             <summary>
             Gets or sets whether the audio capture provider has been initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.IsRunning">
             <summary>
             Gets or sets whether the audio capture is running.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.IsDestroyed">
             <summary>
             Gets or sets whether the audio capture provider has been destroyed.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCaptureProvider.TargetPeerIds">
             <summary>
             Gets or sets which peer IDs should receive
             raised frames. Defaults to <c>null</c>, which
             means all peers get raised frames.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.RaiseFrame(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Raises a captured audio buffer for processing.
             </summary>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.RaiseFrame(FM.IceLink.WebRTC.AudioBuffer,System.String[])">
             <summary>
             Raises a captured audio buffer for processing to specific peers.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="peerIds">The peer IDs to target (or <c>null</c> to target all).</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.GetLabel">
             <summary>
             Gets the label of the audio device.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.Initialize(FM.IceLink.WebRTC.AudioCaptureInitializeArgs)">
             <summary>
             Initializes the audio capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.Start">
             <summary>
             Starts the audio capture provider.
             </summary>
             <returns><c>true</c> if the capture was started successfully; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.Stop">
             <summary>
             Stops the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.Destroy">
             <summary>
             Destroys the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.SwitchToDeviceNumber(System.Int32)">
             <summary>
             Attempts to switch to a desired device number.
             </summary>
             <param name="deviceNumber">The desired device number.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.Mute">
             <summary>
             Mutes the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCaptureProvider.Unmute">
             <summary>
             Unmutes the audio capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.RemoteVideoCaptureProvider">
             <summary>
             Video capture provider that handles an incoming remote video stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.Link">
             <summary>
             Gets or sets the link.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.NegotiatedStream">
             <summary>
             Gets or sets the negotiated stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.StreamIndex">
             <summary>
             Gets or sets the stream index.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.Codecs">
             <summary>
             Gets or sets the codecs.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.RenderProvider">
             <summary>
             Gets or sets the render provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.DropPacketProbability">
             <summary>
             Gets or sets the probability that a
             packet should be dropped.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.DelayPacketProbability">
             <summary>
             Gets or sets the probability that a
             packet should be delayed.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.DelayPacketMaximum">
             <summary>
             Gets or sets the maximum number of
             milliseconds that may elapse before
             a delayed packet is received.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.DisablePLI">
             <summary>
             Gets or sets a flag indicating whether picture
             loss indicator (PLI) packets should be disabled.
             If set to true, a PLI packet will be generated
             and sent over the RTCP component if the RTP
             packet sequence is violated.
             Defaults to false.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.BypassDecode">
             <summary>
             Gets or sets a flag indicating whether
             decoding should be bypassed
             for incoming media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.DisableJitterBuffer">
             <summary>
             Gets or sets a value indicating whether
             the jitter buffer should be disabled.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.DisableNackBuffer">
             <summary>
             Gets or sets a value indicating whether
             the generic NACK buffer should be disabled.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.DelayDecodeOnPendingKeyFrame">
             <summary>
             Gets or sets a flag indicating whether 
             decoding should be bypassed for
             incoming media packetts when a
             key frame request has been made via
             a PLI message.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.NackBufferLength">
             <summary>
             Gets or sets the number of packets to hold in the generic
             NACK buffer awaiting an earlier packet before releasing them.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.#ctor(FM.IceLink.Link,FM.IceLink.Stream,FM.IceLink.WebRTC.VideoStream,System.Int32,FM.IceLink.WebRTC.VideoCodec[],FM.IceLink.WebRTC.RemoteVideoRenderProvider,System.Int32,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.RemoteVideoCaptureProvider" /> class.
             </summary>
             <param name="link">The link.</param>
             <param name="negotiatedStream">The negotiated stream.</param>
             <param name="stream">The stream.</param>
             <param name="streamIndex">The stream index.</param>
             <param name="codecs">The codecs.</param>
             <param name="renderProvider">The render provider.</param>
             <param name="jitterBufferLength">The initial jitter buffer length in milliseconds.</param>
             <param name="jitterBufferMaxLength">The maximum jitter buffer length in milliseconds.</param>
             <param name="nackBufferLength">The generic NACK buffer length.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.GetLabel">
             <summary>
             Gets the label of the video device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.Initialize(FM.IceLink.WebRTC.VideoCaptureInitializeArgs)">
             <summary>
             Initializes the video capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.Start">
             <summary>
             Starts the video capture.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.Stop">
             <summary>
             Stops the video capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.Destroy">
             <summary>
             Destroys the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.GetPreviewControl">
             <summary>
             Unused. Gets the video capture preview.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.GetFrontDeviceNumber">
             <summary>
             Gets the front device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoCaptureProvider.GetRearDeviceNumber">
             <summary>
             Gets the rear device number.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.RemoteAudioCaptureProvider">
             <summary>
             Audio capture provider that handles an incoming remote audio stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.Link">
             <summary>
             Gets or sets the link.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.NegotiatedStream">
             <summary>
             Gets or sets the negotiated stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.StreamIndex">
             <summary>
             Gets or sets the stream index.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.Codecs">
             <summary>
             Gets or sets the codecs.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.RenderProvider">
             <summary>
             Gets or sets the render provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.DropPacketProbability">
             <summary>
             Gets or sets the probability that a
             packet should be dropped.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.DelayPacketProbability">
             <summary>
             Gets or sets the probability that a
             packet should be delayed.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.DelayPacketMaximum">
             <summary>
             Gets or sets the maximum number of
             milliseconds that may elapse before
             a delayed packet is received.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.DisablePLC">
             <summary>
             Gets or sets a flag indicating whether packet
             loss concealment (PLC) should be disabled.
             If set to true, extra packets will be added
             to replace missing packets when the RTP
             packet sequence is violated.
             Defaults to false.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.BypassDecode">
             <summary>
             Gets or sets a flag indicating whether
             decoding should be bypassed
             for incoming media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.DisableJitterBuffer">
             <summary>
             Gets or sets a value indicating whether
             the jitter buffer should be disabled.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.#ctor(FM.IceLink.Link,FM.IceLink.Stream,FM.IceLink.WebRTC.AudioStream,System.Int32,FM.IceLink.WebRTC.AudioCodec[],FM.IceLink.WebRTC.RemoteAudioRenderProvider,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.RemoteAudioCaptureProvider" /> class.
             </summary>
             <param name="link">The link.</param>
             <param name="negotiatedStream">The negotiated stream.</param>
             <param name="stream">The stream.</param>
             <param name="streamIndex">The stream index.</param>
             <param name="codecs">The codecs.</param>
             <param name="renderProvider">The render provider.</param>
             <param name="jitterBufferLength">The initial jitter buffer length in milliseconds.</param>
             <param name="jitterBufferMaxLength">The maximum jitter buffer length in milliseconds.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.GetLabel">
             <summary>
             Gets the label of the audio device.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.Initialize(FM.IceLink.WebRTC.AudioCaptureInitializeArgs)">
             <summary>
             Initializes the audio capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.Start">
             <summary>
             Starts the audio capture.
             </summary>
             <returns>
               <c>true</c> if the capture was started successfully; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.Stop">
             <summary>
             Stops the audio capture.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.Destroy">
             <summary>
             Destroys the audio capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoDeviceNumberChangedArgs">
             <summary>
             Arguments for the VideoCaptureProvider OnDeviceNumberChanged event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoDeviceNumberChangedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoDeviceNumberChangedArgs.LastDeviceNumber">
             <summary>
             Gets or sets the last device number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoDeviceNumberChangedArgs.DeviceNumber">
             <summary>
             Gets or sets the new device number.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoFrameCapturedArgs">
             <summary>
             Arguments for the VideoCaptureProvider OnFrame event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoFrameCapturedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoFrameCapturedArgs.Buffer">
             <summary>
             Gets or sets the buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoFrameCapturedArgs.PeerIds">
             <summary>
             Gets or sets the peer IDs being targeted (or <c>null</c> if targeting all).
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoCaptureMutedArgs">
             <summary>
             Arguments for the VideoCaptureProvider OnMuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureMutedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoCaptureUnmutedArgs">
             <summary>
             Arguments for the VideoCaptureProvider OnUnmuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureUnmutedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoCapturePreviewMutedArgs">
             <summary>
             Arguments for the VideoCaptureProvider OnPreviewMuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCapturePreviewMutedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoCapturePreviewUnmutedArgs">
             <summary>
             Arguments for the VideoCaptureProvider OnPreviewUnmuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCapturePreviewUnmutedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoCaptureDisconnectedArgs">
             <summary>
             Arguments for the VideoCaptureProvider OnDisconnected event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureDisconnectedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoCaptureProvider">
             <summary>
             Abstract definition for a video capture implementation.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.IsMuted">
             <summary>
             Gets whether the video capture is muted. 
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.IsPreviewMuted">
             <summary>
             Gets whether the video capture preview is muted. 
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.DeviceNumber">
             <summary>
             Gets or sets the video device number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.DesiredDeviceNumber">
             <summary>
             Gets the desired device number.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.DesiredFrameRate">
             <summary>
             Gets the desired frame rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.DesiredWidth">
             <summary>
             Gets the desired video width.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.DesiredHeight">
             <summary>
             Gets the desired video height.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.DesiredClockRate">
             <summary>
             Gets the desired clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.MutedFrame">
             <summary>
             Gets or sets the buffer to use when the provider is muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.VideoCaptureProvider.OnDeviceNumberChanged">
             <summary>
             Raised whenever the current device number changes.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.VideoCaptureProvider.OnFrame">
             <summary>
             Raised whenever a frame is captured from the video device.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.VideoCaptureProvider.OnMuted">
             <summary>
             Raised whenever the capture is muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.VideoCaptureProvider.OnUnmuted">
             <summary>
             Raised whenever the capture is unmuted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.VideoCaptureProvider.OnPreviewMuted">
             <summary>
             Raised whenever the capture preview is muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.VideoCaptureProvider.OnPreviewUnmuted">
             <summary>
             Raised whenever the capture preview is unmuted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.VideoCaptureProvider.OnDisconnected">
             <summary>
             Raised when the device is disconnected.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.IsInitialized">
             <summary>
             Gets or sets whether the video capture provider has been initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.IsRunning">
             <summary>
             Gets or sets whether the video capture is running.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.IsDestroyed">
             <summary>
             Gets or sets whether the video capture provider has been destroyed.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCaptureProvider.TargetPeerIds">
             <summary>
             Gets or sets which peer IDs should receive
             raised frames. Defaults to <c>null</c>, which
             means all peers get raised frames.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.RaiseFrame(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Raises a captured video buffer for processing.
             </summary>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.RaiseFrame(FM.IceLink.WebRTC.VideoBuffer,System.String[])">
             <summary>
             Raises a captured video buffer for processing to specific peers.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="peerIds">The peer IDs to target, or <c>null</c> to target all.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.GetLabel">
             <summary>
             Gets the label of the video device.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.Initialize(FM.IceLink.WebRTC.VideoCaptureInitializeArgs)">
             <summary>
             Initializes the video capture provider.
             </summary>
             <param name="captureArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.Start">
             <summary>
             Starts the video capture provider.
             </summary>
             <returns><c>true</c> if the capture was started successfully; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.Stop">
             <summary>
             Stops the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.Destroy">
             <summary>
             Destroys the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.GetPreviewControl">
             <summary>
             Gets the video capture preview control.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.GetDeviceNames">
             <summary>
             Gets the connected device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.GetFrontDeviceNumber">
             <summary>
             Gets the front device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.GetRearDeviceNumber">
             <summary>
             Gets the rear device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.SwitchToDeviceNumber(System.Int32)">
             <summary>
             Attempts to switch to a desired device number.
             </summary>
             <param name="deviceNumber">The desired device number.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.SwitchParameters(System.Int32,System.Int32,System.Int32)">
             <summary>
             Attempts to switch to a new width/height/frame-rate.
             </summary>
             <param name="width">The desired width.</param>
             <param name="height">The desired height.</param>
             <param name="frameRate">The desired frame rate.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.Mute">
             <summary>
             Mutes the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.Unmute">
             <summary>
             Unmutes the video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.MutePreview">
             <summary>
             Mutes the video capture provider preview.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.UnmutePreview">
             <summary>
             Unmutes the video capture provider preview.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.GetSizeDistance(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Gets the distance between two sizes.
             </summary>
             <param name="width1">The first width.</param>
             <param name="height1">The first height.</param>
             <param name="width2">The second width.</param>
             <param name="height2">The second height.</param>
             <returns>The positive linear distance between the two sizes.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.GetFrameRateDistance(System.Int32,System.Int32)">
             <summary>
             Gets the distance between two frame rates.
             </summary>
             <param name="frameRate1">The first frame rate.</param>
             <param name="frameRate2">The second frame rate.</param>
             <returns>The positive distance between the two frame rates.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.GetClosestSize(System.Int32,System.Int32,System.Int32[],System.Int32[])">
             <summary>
             Gets the index of the closest possible size.
             </summary>
             <param name="desiredWidth">The desired width.</param>
             <param name="desiredHeight">The desired height.</param>
             <param name="widths">The possible widths.</param>
             <param name="heights">The possible heights.</param>
             <returns>The index of the closest possible size.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCaptureProvider.GetClosestFrameRate(System.Int32,System.Int32[])">
             <summary>
             Gets the index of the closest possible frame rate.
             </summary>
             <param name="desiredFrameRate">The desired frame rate.</param>
             <param name="frameRates">The possible frame rates.</param>
             <returns>The index of the closest possible frame rate.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.CodecUsage">
             <summary>
             Definitions of codec usage types.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.CodecUsage.Encoder">
             <summary>
             Indicates use as an encoder.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.CodecUsage.Decoder">
             <summary>
             Indicates use as a decoder.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.CodecUsage.Packetizer">
             <summary>
             Indicates use as a packetizer.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.Codec">
             <summary>
             Abstract definition of an encoder/decoder.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Codec.Usage">
             <summary>
             Gets the usage of this codec.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Codec.Conference">
             <summary>
             Gets the conference for which this codec was initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Codec.Link">
             <summary>
             Gets the link for which this codec was initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Codec.PeerId">
             <summary>
             Gets or sets the ID of the peer for which this codec was initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Codec.PeerState">
             <summary>
             Gets or sets the "state" object of the peer for which this codec was initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Codec.EncodingName">
             <summary>
             Gets or sets the encoding name.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Codec.ClockRate">
             <summary>
             Gets or sets the clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Codec.PayloadType">
             <summary>
             Gets or sets the payload type, used by
             decoders to determine whether an incoming
             packet should be decoded.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Codec.Initialized">
             <summary>
             Gets or sets whether the codec has been initialized.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Codec.ProcessRTCP(FM.IceLink.RTCPPacket[])">
             <summary>
             Processes RTCP packets.
             </summary>
             <param name="packets">The packets to process.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.Codec.Destroy">
             <summary>
             Destroys the codec.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioCodec">
             <summary>
             Abstract definition of an audio encoder/decoder.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCodec.Channels">
             <summary>
             Gets or sets the number of channels.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCodec.PacketTime">
             <summary>
             Gets or sets the desired packet time for this codec
             in milliseconds. A zero or negative value indicates
             any packet time is acceptable.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCodec.BytesPerSample">
             <summary>
             Gets or sets the number of bytes per
             sample of audio data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCodec.PacketSize">
             <summary>
             Gets or sets the packet size.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCodec._Resampler">
             <summary>
             Gets or sets the resampler.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCodec.CaptureClockRate">
             <summary>
             Gets the clock rate for captured data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCodec.CaptureChannels">
             <summary>
             Gets the number of channels for captured data.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AudioCodec" /> class.
             </summary>
             <param name="packetTime">The desired packet time for this codec
             in milliseconds. A zero or negative value indicates
             any packet time is acceptable.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.#ctor(System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AudioCodec" /> class.
             </summary>
             <param name="packetTime">The desired packet time for this codec
             in milliseconds. A zero or negative value indicates
             any packet time is acceptable.</param>
             <param name="bytesPerSample">The number of bytes per sample of audio data.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.Initialize(FM.IceLink.WebRTC.CodecUsage,System.String,System.Int32,System.Int32)">
             <summary>
             Initializes the codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="encodingName">The encoding name, as defined in SDP.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="channels">The channels.</param>
             <returns><c>true</c> if initialized; <c>false</c> if previously initialized.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.Initialize(FM.IceLink.WebRTC.CodecUsage,FM.IceLink.Conference,FM.IceLink.Link,System.String,System.Object,System.String,System.Int32,System.Int32)">
             <summary>
             Initializes the codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="peerId">The ID of the remote peer (or null).</param>
             <param name="peerState">Custom state associated with the remote peer (or null).</param>
             <param name="encodingName">The encoding name, as defined in SDP.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="channels">The channels.</param>
             <returns><c>true</c> if initialized; <c>false</c> if previously initialized.</returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCodec.Key">
             <summary>
             Gets the key used to identify this audio codec.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.CreateKey(System.String,System.Int32,System.Int32)">
             <summary>
             Gets a unique key for a given encoding name, clock rate, and channel count.
             </summary>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="channels">The number of channels.</param>
             <returns>A unique key.</returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioCodec.ResetTimestamp">
             <summary>
             Gets or sets a value indicating whether the
             next audio buffer has requested that the RTP
             timestamp be reset.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.Encode(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Encodes a frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.Decode(System.Byte[])">
             <summary>
             Decodes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.Packetize(System.Byte[])">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioCodec.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.GetMediaCompleteArgs">
             <summary>
             Arguments for the get-media complete event.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.GetMediaFailureArgs">
             <summary>
             Arguments for the get-media failure event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.CreateAudioRenderProviderArgs">
             <summary>
             Arguments for a callback that creates an audio render provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.CreateAudioRenderProviderArgs.PeerId">
             <summary>
             Gets or sets the ID of the peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.CreateAudioRenderProviderArgs.PeerState">
             <summary>
             Gets or sets custom state associated with the peer.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.CreateVideoRenderProviderArgs">
             <summary>
             Arguments for a callback that creates a video render provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.CreateVideoRenderProviderArgs.PeerId">
             <summary>
             Gets or sets the ID of the peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.CreateVideoRenderProviderArgs.PeerState">
             <summary>
             Gets or sets custom state associated with the peer.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoSource">
             <summary>
             Possible video sources.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoSource.Camera">
             <summary>
             Indicates a device camera.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoSource.Screen">
             <summary>
             Indicates the device screen.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.GetMediaArgs">
             <summary>
             Arguments for UserMedia.GetMedia.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaArgs.AudioCaptureProvider">
             <summary>
             Gets or sets the local audio capture provider.
             If <see cref="P:FM.IceLink.WebRTC.BaseMediaArgs.Audio" /> is set to true and this is null,
             a default audio capture provider will be initialized
             that uses the device microphone as the media source.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaArgs.VideoCaptureProvider">
             <summary>
             Gets or sets the local video capture provider.
             If <see cref="P:FM.IceLink.WebRTC.BaseMediaArgs.Video" /> is set to true and this is null,
             a default video capture provider will be initialized
             that uses the device camera as the media source.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaArgs.CreateAudioRenderProvider">
             <summary>
             Gets or sets the callback for creating a local audio render provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaArgs.CreateVideoRenderProvider">
             <summary>
             Gets or sets the callback for creating a local video render provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke when the local media stream is ready.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke if a local media stream cannot be created.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke when the operation completes, whether it succeeds or not.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.GetMediaArgs.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.GetMediaArgs" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.GetMediaArgs.#ctor(System.Boolean,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.GetMediaArgs" /> class.
             </summary>
             <param name="audio">Whether to initialize the audio capture provider.</param>
             <param name="video">Whether to initialize the video capture provider.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.GetMediaSuccessArgs">
             <summary>
             Arguments for the get-media success event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaSuccessArgs.LocalStream">
             <summary>
             Gets or sets the local media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaSuccessArgs.LocalVideoControl">
             <summary>
             Gets or sets the local video control.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaSuccessArgs.AudioDeviceLabel">
             <summary>
             Gets or sets the audio device label.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.GetMediaSuccessArgs.VideoDeviceLabel">
             <summary>
             Gets or sets the video device label.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioBuffer">
             <summary>
             An audio buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioBuffer.Data">
             <summary>
             Gets or sets the buffer data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioBuffer.Index">
             <summary>
             Gets or sets the <see cref="P:FM.IceLink.WebRTC.AudioBuffer.Data" /> index.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioBuffer.Length">
             <summary>
             Gets or sets the <see cref="P:FM.IceLink.WebRTC.AudioBuffer.Data" /> length.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioBuffer.Encoded">
             <summary>
             Gets or sets whether the contents of this 
             buffer are pre-encoded.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioBuffer.PresentationTimestamp">
             <summary>
             Gets or sets the presentation timestamp,
             if it is available, or -1 if it is not.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioBuffer.ResetTimestamp">
             <summary>
             Gets or sets a value indicating whether the
             packetizer should reset the RTP timestamp.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioBuffer.PreviousBuffer">
             <summary>
             Gets or sets the previous buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioBuffer.PreviousBuffers">
             <summary>
             Gets or sets the previous buffers.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AudioBuffer" /> class.
             </summary>
             <param name="data">The buffer data.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.#ctor(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.AudioBuffer" /> class.
             </summary>
             <param name="data">The buffer data.</param>
             <param name="index">The buffer index.</param>
             <param name="length">The buffer length.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.Clone">
             <summary>
             Creates a clone of this instance
             using the current data/index/length.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.Clone(System.Int32,System.Int32)">
             <summary>
             Creates a clone of this instance
             using the current data but new index/length.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.Clone(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Creates a clone of this instance
             using new data/index/length.
             </summary>
             <param name="data">The data.</param>
             <param name="index">The index.</param>
             <param name="length">The length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.GetEncodedData(System.String)">
             <summary>
             Gets the encoded data.
             </summary>
             <param name="key">The codec key.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.Encode(FM.IceLink.WebRTC.AudioCodec)">
             <summary>
             Encode the buffer contents using the
             specified codec. The buffer will be
             split into chunks based on the packet
             size specified by the codec.
             </summary>
             <param name="codec">The codec.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.Mute">
             <summary>
             Zeroes out (mutes) the data buffer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.FloatsFromBinary(System.Byte[])">
             <summary>
             Converts binary to an array of floating-point values.
             </summary>
             <param name="data">The binary data.</param>
             <returns>The array of floating-point values.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.BinaryFromFloats(System.Single[])">
             <summary>
             Converts an array of floating-point values to binary.
             </summary>
             <param name="floatData">The floating-point data.</param>
             <returns>The binary data.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.FloatsFromBinary(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Converts binary to an array of floating-point values.
             </summary>
             <param name="data">The binary data.</param>
             <param name="index">The binary index.</param>
             <param name="length">The number of bytes.</param>
             <returns>The array of floating-point values.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.BinaryFromFloats(System.Single[],System.Int32,System.Int32)">
             <summary>
             Converts an array of floating-point values to binary.
             </summary>
             <param name="floatData">The floating-point data.</param>
             <param name="floatIndex">The floating-point index.</param>
             <param name="floatLength">The number of floating-point values.</param>
             <returns>The binary data.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.FloatsFromBinary(System.Byte[],System.Int32,System.Int32,System.Single[],System.Int32)">
             <summary>
             Converts binary to an array of floating-point values.
             </summary>
             <param name="data">The binary data.</param>
             <param name="index">The binary index.</param>
             <param name="length">The number of bytes.</param>
             <param name="floatData">The floating-point data.</param>
             <param name="floatIndex">The floating-point index.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.BinaryFromFloats(System.Single[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             <summary>
             Converts an array of floating-point values to binary.
             </summary>
             <param name="floatData">The floating-point data.</param>
             <param name="floatIndex">The floating-point index.</param>
             <param name="floatLength">The number of floating-point values.</param>
             <param name="data">The binary data.</param>
             <param name="index">The binary index.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.ShortsFromBinary(System.Byte[])">
             <summary>
             Converts binary to an array of short values.
             </summary>
             <param name="data">The binary data.</param>
             <returns>The array of short values.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.BinaryFromShorts(System.Int16[])">
             <summary>
             Converts an array of short values to binary.
             </summary>
             <param name="shortData">The short data.</param>
             <returns>The binary data.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.ShortsFromBinary(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Converts binary to an array of short values.
             </summary>
             <param name="data">The binary data.</param>
             <param name="index">The binary index.</param>
             <param name="length">The number of bytes.</param>
             <returns>The array of short values.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.BinaryFromShorts(System.Int16[],System.Int32,System.Int32)">
             <summary>
             Converts an array of short values to binary.
             </summary>
             <param name="shortData">The short data.</param>
             <param name="shortIndex">The short index.</param>
             <param name="shortLength">The number of short values.</param>
             <returns>The binary data.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.ShortsFromBinary(System.Byte[],System.Int32,System.Int32,System.Int16[],System.Int32)">
             <summary>
             Converts binary to an array of short values.
             </summary>
             <param name="data">The binary data.</param>
             <param name="index">The binary index.</param>
             <param name="length">The number of bytes.</param>
             <param name="shortData">The short data.</param>
             <param name="shortIndex">The short index.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.BinaryFromShorts(System.Int16[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             <summary>
             Converts an array of short values to binary.
             </summary>
             <param name="shortData">The short data.</param>
             <param name="shortIndex">The short index.</param>
             <param name="shortLength">The number of short values.</param>
             <param name="data">The binary data.</param>
             <param name="index">The binary index.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.ShortFromFloat(System.Single)">
             <summary>
             Converts a floating-point value to a short value.
             </summary>
             <param name="value">The floating-point value.</param>
             <returns>The short value.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.FloatFromShort(System.Int16)">
             <summary>
             Converts a short value to a floating-point value.
             </summary>
             <param name="value">The short value.</param>
             <returns>The floating-point value.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.ShortsFromFloats(System.Single[])">
             <summary>
             Converts an array of floating-point values to an array of short values.
             </summary>
             <param name="floatData">The floating-point data.</param>
             <returns>The short data.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.FloatsFromShorts(System.Int16[])">
             <summary>
             Converts an array of short values to an array of floating-point values.
             </summary>
             <param name="shortData">The short data.</param>
             <returns>The floating-point data.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.ShortsFromFloats(System.Single[],System.Int32,System.Int32)">
             <summary>
             Converts an array of floating-point values to an array of short values.
             </summary>
             <param name="floatData">The floating-point data.</param>
             <param name="floatIndex">The floating-point index.</param>
             <param name="floatLength">The number of floating-point values.</param>
             <returns>The short data.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.FloatsFromShorts(System.Int16[],System.Int32,System.Int32)">
             <summary>
             Converts an array of short values to an array of floating-point values.
             </summary>
             <param name="shortData">The short data.</param>
             <param name="shortIndex">The short index.</param>
             <param name="shortLength">The number of short values.</param>
             <returns>The floating-point data.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.ShortsFromFloats(System.Single[],System.Int32,System.Int32,System.Int16[],System.Int32)">
             <summary>
             Converts an array of floating-point values to an array of short values.
             </summary>
             <param name="floatData">The binary data.</param>
             <param name="floatIndex">The binary index.</param>
             <param name="floatLength">The number of bytes.</param>
             <param name="shortData">The short data.</param>
             <param name="shortIndex">The short index.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.FloatsFromShorts(System.Int16[],System.Int32,System.Int32,System.Single[],System.Int32)">
             <summary>
             Converts an array of short values to an array of floating-point values.
             </summary>
             <param name="shortData">The short data.</param>
             <param name="shortIndex">The short index.</param>
             <param name="shortLength">The number of short values.</param>
             <param name="floatData">The binary data.</param>
             <param name="floatIndex">The binary index.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.ConvertMonoToStereo">
             <summary>
             Converts each sample into two identical samples.
             </summary>
             <returns><c>true</c> if the data was converted; otherwise, <c>false</c></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioBuffer.ConvertStereoToMono">
             <summary>
             Converts each pair of samples into one mixed sample.
             </summary>
             <returns><c>true</c> if the data was converted; otherwise, <c>false</c></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.BasicVideoPadep">
             <summary>
             An implementation of a basic video packetizer/depacketizer
             that maps each frame to an RTP packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BasicVideoPadep.Packetize(System.Byte[],System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BasicVideoPadep.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.BasicAudioPadep">
             <summary>
             An implementation of a basic audio packetizer/depacketizer
             that maps each frame to an RTP packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.BasicAudioPadep.Packetize(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="packetTime">The packet time.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BasicAudioPadep.Packetize(System.Byte[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="packetTime">The packet time.</param>
             <param name="resetTimestamp">Whether to reset the RTP timestamp.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.BasicAudioPadep.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoFormat">
             <summary>
             A format for a video buffer.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.Custom">
             <summary>
             Indicates that the video buffer is using a custom, unspecified data format.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.RGB">
             <summary>
             Indicates that each pixel occupies 24 bits (8 bits for red, then 8 bits for green, then 8 bits for blue).
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.BGR">
             <summary>
             Indicates that each pixel occupies 24 bits (8 bits for blue, then 8 bits for green, then 8 bits for red).
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.NV12">
             <summary>
             Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
             Y plane is followed by interleaved U/V plane.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.NV21">
             <summary>
             Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
             Y plane is followed by interleaved V/U plane.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.I420">
             <summary>
             Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
             Y plane is followed by U plane and then V plane.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.YV12">
             <summary>
             Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
             Y plane is followed by V plane and then U plane.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.ARGB">
             <summary>
             Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for red, then 8 bits for green, then 8 bits for blue).
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.ABGR">
             <summary>
             Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for blue, then8 bits for green, then 8 bits for red).
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.RGBA">
             <summary>
             Indicates that each pixel occupies 32 bits (8 bits for red, then 8 bits for green, then 8 bits for blue, then 8 bits for alpha).
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.VideoFormat.BGRA">
             <summary>
             Indicates that each pixel occupies 32 bits (8 bits for blue, then8 bits for green, then 8 bits for red, then 8 bits for alpha).
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoPlane">
             <summary>
             A plane of data for a video buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoPlane.Data">
             <summary>
             Gets or sets the plane data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoPlane.Stride">
             <summary>
             Gets or sets the plane stride.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoPlane.Index">
             <summary>
             Gets or sets the starting index within the data.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoPlane.Length">
             <summary>
             Gets or sets the number of bytes.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoPlane.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoPlane" /> class.
             </summary>
             <param name="data">The plane data.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoPlane.#ctor(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoPlane" /> class.
             </summary>
             <param name="data">The plane data.</param>
             <param name="index">The starting index for the buffer.</param>
             <param name="length">The number of bytes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoPlane.#ctor(System.Byte[],System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoPlane" /> class.
             </summary>
             <param name="data">The plane data.</param>
             <param name="stride">The plane stride.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoPlane.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoPlane" /> class.
             </summary>
             <param name="data">The plane data.</param>
             <param name="stride">The plane stride.</param>
             <param name="index">The starting index for the buffer.</param>
             <param name="length">The number of bytes.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoBuffer">
             <summary>
             A video buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.Plane">
             <summary>
             Gets or sets the first buffer plane.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.Planes">
             <summary>
             Gets or sets the buffer planes.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.Format">
             <summary>
             Gets or sets the format of the video frame.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.FourCC">
             <summary>
             Gets the FOURCC code for the <see cref="P:FM.IceLink.WebRTC.VideoBuffer.Format" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.Width">
             <summary>
             Gets or sets the width of the video frame.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.Height">
             <summary>
             Gets or sets the height of the video frame.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.Rotate">
             <summary>
             Gets or sets the number of degrees to rotate
             in a clock-wise direction. Valid values are
             0, 90, 180, and 270.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.Encoded">
             <summary>
             Gets or sets whether the contents of this 
             buffer are pre-encoded.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.PresentationTimestamp">
             <summary>
             Gets or sets the presentation timestamp,
             if it is available, or -1 if it is not.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.ResetKeyFrame">
             <summary>
             Gets or sets a value indicating whether the
             encoder should treat this as a key frame.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.PreviousBuffer">
             <summary>
             Gets or sets the previous buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoBuffer.PreviousBuffers">
             <summary>
             Gets or sets the previous buffers.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.#ctor(System.Int32,System.Int32,FM.IceLink.WebRTC.VideoPlane)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoBuffer" /> class.
             </summary>
             <param name="width">The width of the video frame.</param>
             <param name="height">The height of the video frame.</param>
             <param name="plane">The buffer data plane.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.#ctor(System.Int32,System.Int32,FM.IceLink.WebRTC.VideoPlane[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoBuffer" /> class.
             </summary>
             <param name="width">The width of the video frame.</param>
             <param name="height">The height of the video frame.</param>
             <param name="planes">The buffer data planes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.#ctor(System.Int32,System.Int32,System.Int32,FM.IceLink.WebRTC.VideoPlane)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoBuffer" /> class.
             </summary>
             <param name="width">The width of the video frame.</param>
             <param name="height">The height of the video frame.</param>
             <param name="rotate">The number of degrees to rotate.</param>
             <param name="plane">The buffer data plane.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.#ctor(System.Int32,System.Int32,System.Int32,FM.IceLink.WebRTC.VideoPlane[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoBuffer" /> class.
             </summary>
             <param name="width">The width of the video frame.</param>
             <param name="height">The height of the video frame.</param>
             <param name="rotate">The number of degrees to rotate.</param>
             <param name="planes">The buffer data planes.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.#ctor(System.Int32,System.Int32,FM.IceLink.WebRTC.VideoPlane,FM.IceLink.WebRTC.VideoFormat)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoBuffer" /> class.
             </summary>
             <param name="width">The width of the video frame.</param>
             <param name="height">The height of the video frame.</param>
             <param name="plane">The buffer data plane.</param>
             <param name="format">The data format.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.#ctor(System.Int32,System.Int32,FM.IceLink.WebRTC.VideoPlane[],FM.IceLink.WebRTC.VideoFormat)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoBuffer" /> class.
             </summary>
             <param name="width">The width of the video frame.</param>
             <param name="height">The height of the video frame.</param>
             <param name="planes">The buffer data planes.</param>
             <param name="format">The data format.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.#ctor(System.Int32,System.Int32,System.Int32,FM.IceLink.WebRTC.VideoPlane,FM.IceLink.WebRTC.VideoFormat)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoBuffer" /> class.
             </summary>
             <param name="width">The width of the video frame.</param>
             <param name="height">The height of the video frame.</param>
             <param name="rotate">The number of degrees to rotate.</param>
             <param name="plane">The buffer data plane.</param>
             <param name="format">The data format.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.#ctor(System.Int32,System.Int32,System.Int32,FM.IceLink.WebRTC.VideoPlane[],FM.IceLink.WebRTC.VideoFormat)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.VideoBuffer" /> class.
             </summary>
             <param name="width">The width of the video frame.</param>
             <param name="height">The height of the video frame.</param>
             <param name="rotate">The number of degrees to rotate.</param>
             <param name="planes">The buffer data planes.</param>
             <param name="format">The data format.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.GetEncodedData(System.String)">
             <summary>
             Gets the encoded data.
             </summary>
             <param name="key">The codec key.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.Encode(FM.IceLink.WebRTC.VideoCodec)">
             <summary>
             Encode the buffer contents using the
             specified codec.
             </summary>
             <param name="codec">The codec.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateBlack(System.Int32,System.Int32)">
             <summary>
             Creates a black (0, 0, 0) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateGray(System.Int32,System.Int32)">
             <summary>
             Creates a gray (255, 255, 255) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateWhite(System.Int32,System.Int32)">
             <summary>
             Creates a white (255, 255, 255) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateRed(System.Int32,System.Int32)">
             <summary>
             Creates a red (255, 0, 0) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateGreen(System.Int32,System.Int32)">
             <summary>
             Creates a green (0, 255, 0) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateBlue(System.Int32,System.Int32)">
             <summary>
             Creates a blue (0, 0, 255) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateDarkRed(System.Int32,System.Int32)">
             <summary>
             Creates a dark red (128, 0, 0) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateDarkGreen(System.Int32,System.Int32)">
             <summary>
             Creates a dark green (0, 128, 0) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateDarkBlue(System.Int32,System.Int32)">
             <summary>
             Creates a dark blue (0, 0, 128) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateYellow(System.Int32,System.Int32)">
             <summary>
             Creates a yellow (255, 255, 0) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateMagenta(System.Int32,System.Int32)">
             <summary>
             Creates a magenta (255, 0, 255) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateCyan(System.Int32,System.Int32)">
             <summary>
             Creates a cyan (0, 255, 255) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateOlive(System.Int32,System.Int32)">
             <summary>
             Creates an olive (128, 128, 0) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreatePurple(System.Int32,System.Int32)">
             <summary>
             Creates a purple (128, 0, 128) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateTeal(System.Int32,System.Int32)">
             <summary>
             Creates a teal (0, 128, 128) RGB video buffer with the specified width/height.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.CreateCustom(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates a custom RGB video buffer with the specified width/height and red/green/blue values.
             </summary>
             <param name="width">The width.</param>
             <param name="height">The height.</param>
             <param name="red">The red value.</param>
             <param name="green">The green value.</param>
             <param name="blue">The blue value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoBuffer.FourCCFromFormat(FM.IceLink.WebRTC.VideoFormat)">
             <summary>
             Gets the FOURCC code for a video format.
             </summary>
             <param name="format">The format.</param>
             <returns>The FOURCC code.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.RedCodec">
             <summary>
             An implementation of a RED encoder/decoder.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RedCodec.Encode(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Encodes a frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RedCodec.Decode(System.Byte[])">
             <summary>
             Decodes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RedCodec.DecoderNeedsKeyFrame">
             <summary>
             Gets whether the decoder needs a keyframe. This
             is checked after every failed Decode operation.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RedCodec.Packetize(System.Byte[])">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RedCodec.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RedCodec.ProcessRTCP(FM.IceLink.RTCPPacket[])">
             <summary>
             Processes RTCP packets.
             </summary>
             <param name="packets">The packets to process.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RedCodec.Destroy">
             <summary>
             Destroys the codec.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.DefaultProviders">
             <summary>
             For platforms that support it, this class provides sensible
             default values for typical audio/video capturing and rendering.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DefaultProviders.IsMobile">
             <summary>
             Determines whether this is a mobile platform.
             </summary>
             <returns><c>true</c> on mobile platforms, and <c>false</c> elsewhere.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DefaultProviders.ForceMobile">
             <summary>
             Forces this instance to be treated as a mobile platform.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DefaultProviders.ForceDesktop">
             <summary>
             Forces this instance to be treated as a desktop platform.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DefaultProviders.AndroidActivity">
             <summary>
             Gets or sets the current Android activity.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DefaultProviders.AndroidContext">
             <summary>
             Gets or sets the current Android application context.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DefaultProviders.RunOnAndroidUIThread(System.Action)">
             <summary>
             Executes an action on the Android UI thread.
             </summary>
             <param name="action">The action to execute.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DefaultProviders.RunOnAndroidUIThread(System.Boolean,System.Action)">
             <summary>
             Executes an action on the Android UI thread.
             </summary>
             <param name="action">The action to execute.</param>
             <param name="forceSync">Whether to force the code to run synchronously.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DefaultProviders.GetAudioCaptureProvider">
             <summary>
             Returns an audio capture provider that uses the AudioRecord API.
             </summary>
             <returns>An audio capture provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DefaultProviders.GetVideoCaptureProvider(FM.IceLink.WebRTC.LayoutScale)">
             <summary>
             Returns a video capture provider that uses the Camera API.
             </summary>
             <param name="previewScale">The video preview scaling mode.</param>
             <returns>A video capture provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DefaultProviders.GetCreateAudioRenderProvider">
             <summary>
             Returns a function that returns an audio render provider
             that uses the AudioTrack API.
             </summary>
             <returns>A function that returns an audio render provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DefaultProviders.GetCreateVideoRenderProvider(FM.IceLink.WebRTC.LayoutScale)">
             <summary>
             Returns a function that returns a video render provider
             that uses the ImageView API.
             </summary>
             <param name="scale">The video scaling mode.</param>
             <returns>A function that returns a video render provider.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.LinkExtensions">
             <summary>
             Extension methods for <see cref="T:FM.IceLink.Link" /> instances.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteVideoWidth(FM.IceLink.Link)">
             <summary>
             Gets the remote video width.
             </summary>
             <param name="link">The link.</param>
             <returns>The remote video width.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteVideoHeight(FM.IceLink.Link)">
             <summary>
             Gets the remote video height.
             </summary>
             <param name="link">The link.</param>
             <returns>The remote video height.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.RemoteAudioIsMuted(FM.IceLink.Link)">
             <summary>
             Gets whether the remote audio is muted.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the remote audio is muted; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.ToggleRemoteAudioMute(FM.IceLink.Link)">
             <summary>
             Toggles the rendering of incoming remote audio frames.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.MuteRemoteAudio(FM.IceLink.Link)">
             <summary>
             Stops the rendering of incoming remote audio frames.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the mute operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnmuteRemoteAudio(FM.IceLink.Link)">
             <summary>
             Starts the rendering of incoming remote audio frames.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the unmute operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteAudioVolume(FM.IceLink.Link)">
             <summary>
             Gets the volume of the remote audio stream.
             </summary>
             <param name="link">The link.</param>
             <returns>The volume (1.0 is unity gain).</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetRemoteAudioVolume(FM.IceLink.Link,System.Single)">
             <summary>
             Sets the volume of the remote audio stream.
             </summary>
             <param name="link">The link.</param>
             <param name="volume">The volume (1.0 is unity gain).</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.RemoteVideoIsMuted(FM.IceLink.Link)">
             <summary>
             Gets whether the remote video is muted.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the remote video is muted; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.ToggleRemoteVideoMute(FM.IceLink.Link)">
             <summary>
             Toggles the rendering of incoming remote video frames.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.MuteRemoteVideo(FM.IceLink.Link)">
             <summary>
             Stops the rendering of incoming remote video frames.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the mute operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnmuteRemoteVideo(FM.IceLink.Link)">
             <summary>
             Starts the rendering of incoming remote video frames.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the unmute operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.RenderRemoteAudio(FM.IceLink.Link,FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Force-renders audio to the audio control used to play remote audio.
             </summary>
             <param name="link">The link.</param>
             <param name="audioBuffer">The audio buffer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.RenderRemoteVideo(FM.IceLink.Link,FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Force-renders video to the video control used to display remote video.
             </summary>
             <param name="link">The link.</param>
             <param name="videoBuffer">The video buffer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteVideoControl(FM.IceLink.Link)">
             <summary>
             Gets the video control used for rendering remote video.
             </summary>
             <param name="link">The link.</param>
             <returns>The remote video control.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteVideoControl(FM.IceLink.Link,System.Int32)">
             <summary>
             Gets the video control used for rendering remote video.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the video stream.</param>
             <returns>The remote video control.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteStream(FM.IceLink.Link)">
             <summary>
             Gets the remote media stream.
             </summary>
             <param name="link">The link.</param>
             <returns>The remote media stream.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetInsertRemoteStream(FM.IceLink.Link)">
             <summary>
             Gets the remote stream, creating one if none exists.
             </summary>
             <param name="link">The link.</param>
             <returns>The remote media stream.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetRemoteStream(FM.IceLink.Link,FM.IceLink.WebRTC.MediaStream)">
             <summary>
             Gets the remote stream, creating one if none exists.
             </summary>
             <param name="link">The link.</param>
             <param name="remoteStream">The remote stream.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetDeleteRemoteStream(FM.IceLink.Link)">
             <summary>
             Gets the remote stream, deleting it if one exists.
             </summary>
             <param name="link">The link.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnsetRemoteStream(FM.IceLink.Link)">
             <summary>
             Gets the remote stream, creating one if none exists.
             </summary>
             <param name="link">The link.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetLocalAudioRenderProvider(FM.IceLink.Link)">
             <summary>
             Gets the local audio render provider.
             </summary>
             <param name="link">The link.</param>
             <returns>The local audio render provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetLocalAudioRenderProvider(FM.IceLink.Link,System.Int32)">
             <summary>
             Gets the local audio render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the audio stream.</param>
             <returns>The local audio render provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetLocalAudioRenderProvider(FM.IceLink.Link,FM.IceLink.WebRTC.AudioRenderProvider,System.Int32)">
             <summary>
             Sets the local audio render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the audio stream.</param>
             <param name="localAudioRender">The local audio render provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnsetLocalAudioRenderProvider(FM.IceLink.Link,System.Int32)">
             <summary>
             Unsets the local audio render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the audio stream.</param>
             <returns><c>true</c> if the local audio render provider was unset; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetLocalVideoRenderProvider(FM.IceLink.Link)">
             <summary>
             Gets the local video render provider.
             </summary>
             <param name="link">The link.</param>
             <returns>The local video render provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetLocalVideoRenderProvider(FM.IceLink.Link,System.Int32)">
             <summary>
             Gets the local video render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the video stream.</param>
             <returns>The local video render provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetLocalVideoRenderProvider(FM.IceLink.Link,FM.IceLink.WebRTC.VideoRenderProvider,System.Int32)">
             <summary>
             Sets the local video render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the video stream.</param>
             <param name="localVideoRender">The local video render provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnsetLocalVideoRenderProvider(FM.IceLink.Link,System.Int32)">
             <summary>
             Unsets the local video render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the video stream.</param>
             <returns><c>true</c> if the local video render provider was unset; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteAudioRenderProvider(FM.IceLink.Link,System.Int32)">
             <summary>
             Gets the remote audio render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the audio stream.</param>
             <returns>The remote audio render provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetRemoteAudioRenderProvider(FM.IceLink.Link,FM.IceLink.WebRTC.RemoteAudioRenderProvider,System.Int32)">
             <summary>
             Sets the remote audio render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the audio stream.</param>
             <param name="remoteAudioRender">The remote audio render provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnsetRemoteAudioRenderProvider(FM.IceLink.Link,System.Int32)">
             <summary>
             Unsets the remote audio render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the audio stream.</param>
             <returns><c>true</c> if the remote audio render provider was unset; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteVideoRenderProvider(FM.IceLink.Link,System.Int32)">
             <summary>
             Gets the remote video render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the video stream.</param>
             <returns>The remote video render provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetRemoteVideoRenderProvider(FM.IceLink.Link,FM.IceLink.WebRTC.RemoteVideoRenderProvider,System.Int32)">
             <summary>
             Sets the remote video render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the video stream.</param>
             <param name="remoteVideoRender">The remote video render provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnsetRemoteVideoRenderProvider(FM.IceLink.Link,System.Int32)">
             <summary>
             Unsets the remote video render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the video stream.</param>
             <returns><c>true</c> if the remote video render provider was unset; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteDataChannelRenderProvider(FM.IceLink.Link)">
             <summary>
             Gets the remote data channel render provider.
             </summary>
             <param name="link">The link.</param>
             <returns>The remote data channel render provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetRemoteDataChannelRenderProvider(FM.IceLink.Link,FM.IceLink.WebRTC.RemoteDataChannelRenderProvider)">
             <summary>
             Sets the remote data channel render provider.
             </summary>
             <param name="link">The link.</param>
             <param name="remoteDataChannelRender">The remote data channel render provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnsetRemoteDataChannelRenderProvider(FM.IceLink.Link)">
             <summary>
             Unsets the remote data channel render provider.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the remote data channel render provider was unset; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetRemoteDataChannelCaptureProvider(FM.IceLink.Link)">
             <summary>
             Gets the remote data channel capture provider.
             </summary>
             <param name="link">The link.</param>
             <returns>The remote data channel capture provider.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetReliableDataManager(FM.IceLink.Link,FM.IceLink.WebRTC.ReliableDataManager)">
             <summary>
             Sets the reliable data manager.
             </summary>
             <param name="link">The link.</param>
             <param name="reliableDataManager">The reliable data manager.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnsetReliableDataManager(FM.IceLink.Link)">
             <summary>
             Unsets the reliable data manager.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the remote data channel capture provider was unset; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetReliableDataManager(FM.IceLink.Link)">
             <summary>
             Sets the reliable data manager.
             </summary>
             <param name="link">The link.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetRemoteDataChannelCaptureProvider(FM.IceLink.Link,FM.IceLink.WebRTC.RemoteDataChannelCaptureProvider)">
             <summary>
             Sets the remote data channel capture provider.
             </summary>
             <param name="link">The link.</param>
             <param name="remoteDataChannelCapture">The remote data channel capture provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnsetRemoteDataChannelCaptureProvider(FM.IceLink.Link)">
             <summary>
             Unsets the remote data channel capture provider.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the remote data channel capture provider was unset; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.GetDataChannelSsrcMap(FM.IceLink.Link)">
             <summary>
             Gets the data channel SSRC map.
             </summary>
             <param name="link">The link.</param>
             <returns>The data channel SSRC map.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetDataChannelSsrcMap(FM.IceLink.Link,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Sets the data channel SSRC map.
             </summary>
             <param name="link">The link.</param>
             <param name="remoteDataSsrcMap">The data channel SSRC map.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.UnsetDataChannelSsrcMap(FM.IceLink.Link)">
             <summary>
             Unsets the data channel SSRC map.
             </summary>
             <param name="link">The link.</param>
             <returns><c>true</c> if the data channel SSRC map was unset; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SendData(FM.IceLink.Link,FM.IceLink.WebRTC.DataChannelInfo,System.String)">
             <summary>
             Sends a data channel packet to the peer.
             </summary>
             <param name="link">The link.</param>
             <param name="channelInfo">The data channel description.</param>
             <param name="data">The data to send.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SendReliableString(FM.IceLink.Link,FM.IceLink.WebRTC.ReliableDataChannel,System.String)">
             <summary>
             Sends a data channel packet to the peer.
             </summary>
             <param name="link">The link.</param>
             <param name="channel">The data channel description.</param>
             <param name="dataString">The data string.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SendReliableBytes(FM.IceLink.Link,FM.IceLink.WebRTC.ReliableDataChannel,System.Byte[])">
             <summary>
             Sends a data channel packet to the peer.
             </summary>
             <param name="link">The link.</param>
             <param name="channel">The data channel description.</param>
             <param name="dataBytes">The data binary.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetKeyFecParameters(FM.IceLink.Link,FM.IceLink.WebRTC.FecProtectionParameters)">
             <summary>
             Sets the keyframe FEC parameters for a remote video stream.
             </summary>
             <param name="link">The link.</param>
             <param name="keyFecParameters">The keyframe FEC parameters.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetKeyFecParameters(FM.IceLink.Link,System.Int32,FM.IceLink.WebRTC.FecProtectionParameters)">
             <summary>
             Sets the keyframe FEC parameters for a remote video stream.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the video stream.</param>
             <param name="keyFecParameters">The keyframe FEC parameters.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetDeltaFecParameters(FM.IceLink.Link,FM.IceLink.WebRTC.FecProtectionParameters)">
             <summary>
             Sets the delta-frame FEC parameters for a remote video stream.
             </summary>
             <param name="link">The link.</param>
             <param name="deltaFecParameters">The delta-frame FEC parameters.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LinkExtensions.SetDeltaFecParameters(FM.IceLink.Link,System.Int32,FM.IceLink.WebRTC.FecProtectionParameters)">
             <summary>
             Sets the delta-frame FEC parameters for a remote video stream.
             </summary>
             <param name="link">The link.</param>
             <param name="index">The index of the video stream.</param>
             <param name="deltaFecParameters">The delta-frame FEC parameters.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelInfo">
             <summary>
             An ureliable (UDP-based) WebRTC data channel description.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelInfo.Label">
             <summary>
             Gets or sets the channel label.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.DataChannelInfo.OnUnhandledException">
             <summary>
             Raised when an exception is thrown in user code and not handled,
             typically in a callback or event handler.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelInfo.OnReceive">
             <summary>
             Gets or sets the callback to invoke when data is received on the channel.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelInfo.SynchronizationSource">
             <summary>
             Gets or sets the local synchronization source.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelInfo.Cname">
             <summary>
             Gets or sets the Canonical End-Point Identifier (CNAME).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelInfo.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.DataChannelInfo" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelInfo.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.DataChannelInfo" /> class.
             </summary>
             <param name="label">The channel label.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelInfo.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelInfo.ToJson(FM.IceLink.WebRTC.DataChannelInfo)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="dataChannelInfo">The data channel description to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelInfo.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="dataChannelInfoJson">The JSON to deserialize.</param>
             <returns>The deserialized data channel description.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelInfo.ToJsonMultiple(FM.IceLink.WebRTC.DataChannelInfo[])">
             <summary>
             Serializes an array of instances to JSON.
             </summary>
             <param name="dataChannelInfos">The data channel descriptions to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelInfo.FromJsonMultiple(System.String)">
             <summary>
             Deserializes an array of instances from JSON.
             </summary>
             <param name="dataChannelInfosJson">The JSON to deserialize.</param>
             <returns>The deserialized data channel descriptions.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MixedAudioRenderProvider">
             <summary>
             Audio render provider implementation that renders to a mixer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MixedAudioRenderProvider.Mixer">
             <summary>
             Gets the mixer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MixedAudioRenderProvider.MixerSourceId">
             <summary>
             Gets the mixer source identifier.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioRenderProvider.#ctor(FM.IceLink.WebRTC.AudioMixer)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MixedAudioRenderProvider" /> class.
             </summary>
             <param name="mixer">The mixer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioRenderProvider.#ctor(FM.IceLink.WebRTC.AudioMixer,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MixedAudioRenderProvider" /> class.
             </summary>
             <param name="mixer">The mixer.</param>
             <param name="mixerSourceId">The mixer source identifier.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioRenderProvider.Initialize(FM.IceLink.WebRTC.AudioRenderInitializeArgs)">
             <summary>
             Initializes the audio render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioRenderProvider.Destroy">
             <summary>
             Destroys the audio render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MixedAudioRenderProvider.Render(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Renders an audio frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.OpenGLVideoRenderProvider">
             <summary>
             An OpenGL-based video render provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OpenGLVideoRenderProvider.#ctor">
             <summary>
             Creates a new OpenGL video render provider  using DefaultProviders.AndroidContext.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OpenGLVideoRenderProvider.#ctor(Android.Content.Context)">
             <summary>
             Creates a new OpenGL video render provider.
             </summary>
             <param name="context">The current Android context, used to create the video view.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OpenGLVideoRenderProvider.#ctor(Android.Content.Context,FM.IceLink.WebRTC.LayoutScale)">
             <summary>
             Creates a new OpenGL video render provider.
             </summary>
             <param name="context">The current Android context, used to create the video view.</param>
             <param name="scale">The scaling algorithm to use.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OpenGLVideoRenderProvider.Initialize(FM.IceLink.WebRTC.VideoRenderInitializeArgs)">
             <summary>
             Initializes the video render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OpenGLVideoRenderProvider.Destroy">
             <summary>
             Destroys the video render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.OpenGLVideoRenderProvider.Render(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Renders a video frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.OpenGLVideoRenderProvider.GetControl">
             <summary>
             Gets the underlying UI control.
             </summary>
             <returns>
             The underlying UI control.
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelRenderInitializeArgs">
             <summary>
             Arguments for data channel render initialization.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelRenderInitializeArgs.Channels">
             <summary>
             Gets or sets the data channels.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.NullVideoRenderProvider">
             <summary>
             A null video render provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoRenderProvider.Initialize(FM.IceLink.WebRTC.VideoRenderInitializeArgs)">
             <summary>
             Initializes the video render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoRenderProvider.Render(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Renders an video frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoRenderProvider.Destroy">
             <summary>
             Destroys the video render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullVideoRenderProvider.GetControl">
             <summary>
             Gets the underlying UI control.
             </summary>
             <returns>
             The underlying UI control.
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.IncomingVideoRenderProvider">
             <summary>
             A video render provider that takes incoming frames and routes
             them to an outgoing video capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.IncomingVideoRenderProvider.OutgoingCaptureProviders">
             <summary>
             Gets or sets the outgoing capture providers.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingVideoRenderProvider.AddOutgoingCaptureProvider(FM.IceLink.WebRTC.OutgoingVideoCaptureProvider)">
             <summary>
             Adds an outgoing capture provider.
             </summary>
             <param name="outgoingCaptureProvider">The outgoing capture provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingVideoRenderProvider.RemoveOutgoingCaptureProvider(FM.IceLink.WebRTC.OutgoingVideoCaptureProvider)">
             <summary>
             Removes an outgoing capture provider.
             </summary>
             <param name="outgoingCaptureProvider">The outgoing capture provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingVideoRenderProvider.Initialize(FM.IceLink.WebRTC.VideoRenderInitializeArgs)">
             <summary>
             Initializes the video render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingVideoRenderProvider.Render(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Renders an video frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingVideoRenderProvider.Destroy">
             <summary>
             Destroys the video render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingVideoRenderProvider.GetControl">
             <summary>
             Gets the underlying UI control.
             </summary>
             <returns>
             The underlying UI control.
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelRenderProvider">
             <summary>
             Abstract definition for a data channel render implementation.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelRenderProvider.Render(FM.IceLink.WebRTC.DataChannelBuffer)">
             <summary>
             Renders a data frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns>The number of bytes rendered.</returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelRenderProvider.IsInitialized">
             <summary>
             Gets whether the data-channel render provider has been initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelRenderProvider.IsDestroyed">
             <summary>
             Gets whether the data-channel render provider has been destroyed.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelRenderProvider.Initialize(FM.IceLink.WebRTC.DataChannelRenderInitializeArgs)">
             <summary>
             Initializes the data render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelRenderProvider.Destroy">
             <summary>
             Destroys the data render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.IncomingAudioRenderProvider">
             <summary>
             An audio render provider that takes incoming frames and routes
             them to one or more outgoing audio capture providers.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.IncomingAudioRenderProvider.OutgoingCaptureProviders">
             <summary>
             Gets or sets the outgoing capture providers.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingAudioRenderProvider.AddOutgoingCaptureProvider(FM.IceLink.WebRTC.OutgoingAudioCaptureProvider)">
             <summary>
             Adds an outgoing capture provider.
             </summary>
             <param name="outgoingCaptureProvider">The outgoing capture provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingAudioRenderProvider.RemoveOutgoingCaptureProvider(FM.IceLink.WebRTC.OutgoingAudioCaptureProvider)">
             <summary>
             Removes an outgoing capture provider.
             </summary>
             <param name="outgoingCaptureProvider">The outgoing capture provider.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingAudioRenderProvider.Initialize(FM.IceLink.WebRTC.AudioRenderInitializeArgs)">
             <summary>
             Initializes the audio render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingAudioRenderProvider.Render(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Renders an audio frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IncomingAudioRenderProvider.Destroy">
             <summary>
             Destroys the audio render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.NullAudioRenderProvider">
             <summary>
             A null audio render provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullAudioRenderProvider.Initialize(FM.IceLink.WebRTC.AudioRenderInitializeArgs)">
             <summary>
             Initializes the audio render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullAudioRenderProvider.Render(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Renders an audio frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.NullAudioRenderProvider.Destroy">
             <summary>
             Destroys the audio render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider">
             <summary>
             Data render provider that handles an outgoing remote data stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.Conference">
             <summary>
             Gets or sets the conference.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.Link">
             <summary>
             Gets or sets the link.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.Format">
             <summary>
             Gets or sets the stream format.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.Registration">
             <summary>
             Gets or sets the registration.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.#ctor(FM.IceLink.Conference,FM.IceLink.Link,FM.IceLink.Stream,FM.IceLink.StreamFormat,FM.IceLink.WebRTC.DataChannelRegistration)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider" /> class.
             </summary>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="stream">The stream.</param>
             <param name="format">The stream format.</param>
             <param name="registration">The registration.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.Initialize(FM.IceLink.WebRTC.DataChannelRenderInitializeArgs)">
             <summary>
             Initializes the data render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.Render(FM.IceLink.WebRTC.DataChannelBuffer)">
             <summary>
             Sends out a data channel buffer.
             </summary>
             <param name="frame">The frame.</param>
             <returns>The number of bytes rendered.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.Destroy">
             <summary>
             Destroys the data render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.DequeueRtcpPackets">
             <summary>
             Dequeues all pending RTCP packets.
             </summary>
             <returns>The queued RTCP packets.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteDataChannelRenderProvider.EnqueueRtcpPackets(FM.IceLink.RTCPPacket[])">
             <summary>
             Enqueues RTCP packets for processing.
             </summary>
             <param name="packets">The packets.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.RenderProvider">
             <summary>
             Base render provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RenderProvider.ShouldDropPacket(System.Int32)">
             <summary>
             Determines (randomly) whether a packet should be dropped.
             </summary>
             <param name="dropPacketProbability">The drop packet probability.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RenderProvider.ShouldDelayPacket(System.Int32)">
             <summary>
             Determines (randomly) whether a packet should be delayed.
             </summary>
             <param name="delayPacketProbability">The delay packet probability.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RenderProvider.GetPacketDelay(System.Int32)">
             <summary>
             Determines (randomly) how many packets should go out before a delayed packet is sent.
             </summary>
             <param name="delayPacketMaximum">The delay packet maximum.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.IvfVideoRecordingProvider">
             <summary>
             A video render provider that writes video frames to an IVF-formatted file.
             DEPRECATED: use IvfVideoRenderProvider instead.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRecordingProvider.#ctor(System.String,FM.IceLink.WebRTC.VideoCodec)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.IvfVideoRecordingProvider" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="codec">The video codec (must be VP8).</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.IvfVideoRenderProvider">
             <summary>
             A video render provider that writes video frames to an IVF-formatted file.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.IvfVideoRenderProvider.Codec">
             <summary>
             Gets the codec.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.IvfVideoRenderProvider.Recorder">
             <summary>
             Gets the recorder.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRenderProvider.#ctor(System.String,FM.IceLink.WebRTC.VideoCodec)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.IvfVideoRenderProvider" /> class.
             </summary>
             <param name="path">The path.</param>
             <param name="codec">The video codec (must be VP8).</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRenderProvider.Initialize(FM.IceLink.WebRTC.VideoRenderInitializeArgs)">
             <summary>
             Initializes the video render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRenderProvider.Render(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Renders a video frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRenderProvider.Destroy">
             <summary>
             Destroys the video render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.IvfVideoRenderProvider.GetControl">
             <summary>
             Returns null.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.Serializer">
             <summary>
             Provides methods for serializing/deserializing IceLink WebRTC objects.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeLayoutScale(FM.IceLink.WebRTC.LayoutScale)">
             <summary>
             Serializes a layout scale to JSON.
             </summary>
             <param name="layoutScale">The layout scale to serialize.</param>
             <returns>The serialized layout scale.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeLayoutScale(System.String)">
             <summary>
             Deserializes a layout scale from JSON.
             </summary>
             <param name="layoutScaleJson">The layout scale (in JSON) to deserialize.</param>
             <returns>The deserialized layout scale.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeVideoSource(FM.IceLink.WebRTC.VideoSource)">
             <summary>
             Serializes a video source to JSON.
             </summary>
             <param name="videoSource">The video source to serialize.</param>
             <returns>The serialized video source.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeVideoSource(System.String)">
             <summary>
             Deserializes a video source from JSON.
             </summary>
             <param name="videoSourceJson">The video source (in JSON) to deserialize.</param>
             <returns>The deserialized video source.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeLocalStartArgs(FM.IceLink.WebRTC.LocalStartArgs)">
             <summary>
             Serializes local start arguments to JSON.
             </summary>
             <param name="startArgs">The local start arguments to serialize.</param>
             <returns>The serialized local start arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeLocalStartArgs(System.String)">
             <summary>
             Deserializes local start arguments from JSON.
             </summary>
             <param name="startArgsJson">The local start arguments (in JSON) to deserialize.</param>
             <returns>The deserialized local start arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeLocalStartSuccessArgs(FM.IceLink.WebRTC.LocalStartSuccessArgs)">
             <summary>
             Serializes local start arguments to JSON.
             </summary>
             <param name="startSuccessArgs">The local start arguments to serialize.</param>
             <returns>The serialized local start arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeLocalStartSuccessArgs(System.String)">
             <summary>
             Deserializes local start arguments from JSON.
             </summary>
             <param name="startSuccessArgsJson">The local start arguments (in JSON) to deserialize.</param>
             <returns>The deserialized local start arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeLocalStartFailureArgs(FM.IceLink.WebRTC.LocalStartFailureArgs)">
             <summary>
             Serializes local start arguments to JSON.
             </summary>
             <param name="startFailureArgs">The local start arguments to serialize.</param>
             <returns>The serialized local start arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeLocalStartFailureArgs(System.String)">
             <summary>
             Deserializes local start arguments from JSON.
             </summary>
             <param name="startFailureArgsJson">The local start arguments (in JSON) to deserialize.</param>
             <returns>The deserialized local start arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeDataChannelInfo(FM.IceLink.WebRTC.DataChannelInfo)">
             <summary>
             Serializes a data channel description to JSON.
             </summary>
             <param name="dataChannelInfo">The data channel description to serialize.</param>
             <returns>The serialized data channel description.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeDataChannelInfo(System.String)">
             <summary>
             Deserializes a data channel description from JSON.
             </summary>
             <param name="dataChannelInfoJson">The data channel description (in JSON) to deserialize.</param>
             <returns>The deserialized data channel description.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeDataChannelInfoArray(FM.IceLink.WebRTC.DataChannelInfo[])">
             <summary>
             Serializes an array of data channel descriptions to JSON.
             </summary>
             <param name="dataChannelInfos">The data channel descriptions to serialize.</param>
             <returns>The serialized data channel descriptions.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeDataChannelInfoArray(System.String)">
             <summary>
             Deserializes an array of data channel descriptions from JSON.
             </summary>
             <param name="dataChannelInfosJson">The data channel descriptions (in JSON) to deserialize.</param>
             <returns>The deserialized data channel descriptions.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeDataChannelReceiveArgs(FM.IceLink.WebRTC.DataChannelReceiveArgs)">
             <summary>
             Serializes a data channel receive args to JSON.
             </summary>
             <param name="dataChannelReceiveArgs">The data channel receive args to serialize.</param>
             <returns>The serialized data channel receive args.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeDataChannelReceiveArgs(System.String)">
             <summary>
             Deserializes a data channel receive args from JSON.
             </summary>
             <param name="dataChannelReceiveArgsJson">The data channel receive args (in JSON) to deserialize.</param>
             <returns>The deserialized data channel receive args.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeReliableDataChannel(FM.IceLink.WebRTC.ReliableDataChannel)">
             <summary>
             Serializes a data channel description to JSON.
             </summary>
             <param name="reliableDataChannel">The data channel description to serialize.</param>
             <returns>The serialized data channel description.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeReliableDataChannel(System.String)">
             <summary>
             Deserializes a data channel description from JSON.
             </summary>
             <param name="reliableDataChannelJson">The data channel description (in JSON) to deserialize.</param>
             <returns>The deserialized data channel description.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeReliableDataChannelArray(FM.IceLink.WebRTC.ReliableDataChannel[])">
             <summary>
             Serializes an array of data channel descriptions to JSON.
             </summary>
             <param name="reliableDataChannels">The data channel descriptions to serialize.</param>
             <returns>The serialized data channel descriptions.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeReliableDataChannelArray(System.String)">
             <summary>
             Deserializes an array of data channel descriptions from JSON.
             </summary>
             <param name="reliableDataChannelsJson">The data channel descriptions (in JSON) to deserialize.</param>
             <returns>The deserialized data channel descriptions.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeReliableDataReceiveArgs(FM.IceLink.WebRTC.ReliableDataReceiveArgs)">
             <summary>
             Serializes a data channel receive args to JSON.
             </summary>
             <param name="reliableDataReceiveArgs">The data channel receive args to serialize.</param>
             <returns>The serialized data channel receive args.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeReliableDataReceiveArgs(System.String)">
             <summary>
             Deserializes a data channel receive args from JSON.
             </summary>
             <param name="reliableDataReceiveArgsJson">The data channel receive args (in JSON) to deserialize.</param>
             <returns>The deserialized data channel receive args.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeAudioCaptureInitializeArgs(FM.IceLink.WebRTC.AudioCaptureInitializeArgs)">
             <summary>
             Serializes audio capture initialize arguments to JSON.
             </summary>
             <param name="audioCaptureInitializeArgs">The audio capture initialize arguments to serialize.</param>
             <returns>The serialized audio capture initialize arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeAudioCaptureInitializeArgs(System.String)">
             <summary>
             Deserializes audio capture initialize arguments from JSON.
             </summary>
             <param name="audioCaptureInitializeArgsJson">The audio capture initialize arguments (in JSON) to deserialize.</param>
             <returns>The deserialized audio capture initialize arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeVideoCaptureInitializeArgs(FM.IceLink.WebRTC.VideoCaptureInitializeArgs)">
             <summary>
             Serializes video capture initialize arguments to JSON.
             </summary>
             <param name="videoCaptureInitializeArgs">The video capture initialize arguments to serialize.</param>
             <returns>The serialized video capture initialize arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeVideoCaptureInitializeArgs(System.String)">
             <summary>
             Deserializes video capture initialize arguments from JSON.
             </summary>
             <param name="videoCaptureInitializeArgsJson">The video capture initialize arguments (in JSON) to deserialize.</param>
             <returns>The deserialized video capture initialize arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeAudioRenderInitializeArgs(FM.IceLink.WebRTC.AudioRenderInitializeArgs)">
             <summary>
             Serializes audio render initialize arguments to JSON.
             </summary>
             <param name="audioRenderInitializeArgs">The audio render initialize arguments to serialize.</param>
             <returns>The serialized audio render initialize arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeAudioRenderInitializeArgs(System.String)">
             <summary>
             Deserializes audio render initialize arguments from JSON.
             </summary>
             <param name="audioRenderInitializeArgsJson">The audio render initialize arguments (in JSON) to deserialize.</param>
             <returns>The deserialized audio render initialize arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.SerializeVideoRenderInitializeArgs(FM.IceLink.WebRTC.VideoRenderInitializeArgs)">
             <summary>
             Serializes video render initialize arguments to JSON.
             </summary>
             <param name="videoRenderInitializeArgs">The video render initialize arguments to serialize.</param>
             <returns>The serialized video render initialize arguments.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.Serializer.DeserializeVideoRenderInitializeArgs(System.String)">
             <summary>
             Deserializes video render initialize arguments from JSON.
             </summary>
             <param name="videoRenderInitializeArgsJson">The video render initialize arguments (in JSON) to deserialize.</param>
             <returns>The deserialized video render initialize arguments.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.SoundUtility">
             <summary>
             Utility class for common sound operations.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.SoundUtility.ReadPcmShort(System.Byte[],System.Int32)">
             <summary>
             Reads a PCM short value from a byte array.
             </summary>
             <param name="input">The source byte array.</param>
             <param name="index">The source index in the byte array.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.SoundUtility.WritePcmShort(System.Int16,System.Byte[],System.Int32)">
             <summary>
             Writes a PCM short value to a byte array.
             </summary>
             <param name="input">The short value to write.</param>
             <param name="output">The target byte array.</param>
             <param name="index">The target index in the byte array.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.SoundUtility.ReadPcmInt(System.Byte[],System.Int32)">
             <summary>
             Reads a PCM int value from a byte array.
             </summary>
             <param name="input">The source byte array.</param>
             <param name="index">The source index in the byte array.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.SoundUtility.WritePcmInt(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Writes a PCM int value to a byte array.
             </summary>
             <param name="input">The short value to write.</param>
             <param name="output">The target byte array.</param>
             <param name="index">The target index in the byte array.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.SoundUtility.ReadPcmFloat(System.Byte[],System.Int32)">
             <summary>
             Reads a PCM float value from a byte array.
             </summary>
             <param name="input">The source byte array.</param>
             <param name="index">The source index in the byte array.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.SoundUtility.WritePcmFloat(System.Single,System.Byte[],System.Int32)">
             <summary>
             Writes a PCM float value to a byte array.
             </summary>
             <param name="input">The short value to write.</param>
             <param name="output">The target byte array.</param>
             <param name="index">The target index in the byte array.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoStream">
             <summary>
             A WebRTC video stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.JpegEncodingName">
             <summary>
             Gets the encoding name for JPEG packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.RedEncodingName">
             <summary>
             Gets the encoding name for RED packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.UlpFecEncodingName">
             <summary>
             Gets the encoding name for ULP FEC packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.Vp8EncodingName">
             <summary>
             Gets the encoding name for VP8 packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.H264EncodingName">
             <summary>
             Gets the encoding name for H264 packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.JpegPayloadType">
             <summary>
             Gets the static payload type for JPEG packets (26).
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoStream.RegisterCodec(System.String,FM.EmptyFunction{FM.IceLink.WebRTC.VideoCodec})">
             <summary>
             Registers a non-preferred video codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="createCodec">The codec creation callback.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoStream.RegisterCodec(System.String,FM.EmptyFunction{FM.IceLink.WebRTC.VideoCodec},System.Boolean)">
             <summary>
             Registers a video codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="createCodec">The codec creation callback.</param>
             <param name="preferred">Whether to prefer the payload type in SDP offers.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoStream.RegisterCodec(System.String,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.VideoCodec})">
             <summary>
             Registers a non-preferred video codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="createCodec">The codec creation callback.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoStream.RegisterCodec(System.String,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.VideoCodec},System.Boolean)">
             <summary>
             Registers a video codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="createCodec">The codec creation callback.</param>
             <param name="preferred">Whether to prefer the payload type in SDP offers.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoStream.RegisterCodec(System.String,System.Int32,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.VideoCodec})">
             <summary>
             Registers a non-preferred video codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="staticPayloadType">The static payload type.</param>
             <param name="createCodec">The codec creation callback.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoStream.RegisterCodec(System.String,System.Int32,System.Int32,FM.EmptyFunction{FM.IceLink.WebRTC.VideoCodec},System.Boolean)">
             <summary>
             Registers a video codec.
             </summary>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="staticPayloadType">The static payload type.</param>
             <param name="createCodec">The codec creation callback.</param>
             <param name="preferred">Whether to prefer the payload type in SDP offers.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.DropPacketProbability">
             <summary>
             Gets or sets <see cref="P:FM.IceLink.WebRTC.VideoStream.OutgoingDropPacketProbability" />.
             Deprecated. Use <see cref="P:FM.IceLink.WebRTC.VideoStream.OutgoingDropPacketProbability" />
             or <see cref="P:FM.IceLink.WebRTC.VideoStream.IncomingDropPacketProbability" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.OutgoingDropPacketProbability">
             <summary>
             Gets or sets the probability that an
             outgoing packet should be dropped.
             Affects outgoing data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.IncomingDropPacketProbability">
             <summary>
             Gets or sets the probability that an
             incoming packet should be dropped.
             Affects incoming data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.DelayPacketProbability">
             <summary>
             Gets or sets <see cref="P:FM.IceLink.WebRTC.VideoStream.OutgoingDelayPacketProbability" />.
             Deprecated. Use <see cref="P:FM.IceLink.WebRTC.VideoStream.OutgoingDelayPacketProbability" />
             or <see cref="P:FM.IceLink.WebRTC.VideoStream.IncomingDelayPacketProbability" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.OutgoingDelayPacketProbability">
             <summary>
             Gets or sets the probability that an
             outgoing packet should be delayed.
             Affects outgoing data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.IncomingDelayPacketProbability">
             <summary>
             Gets or sets the probability that an
             incoming packet should be delayed.
             Affects incoming data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.DelayPacketMaximum">
             <summary>
             Gets or sets <see cref="P:FM.IceLink.WebRTC.VideoStream.OutgoingDelayPacketMaximum" />.
             Deprecated. Use <see cref="P:FM.IceLink.WebRTC.VideoStream.OutgoingDelayPacketMaximum" />
             or <see cref="P:FM.IceLink.WebRTC.VideoStream.IncomingDelayPacketMaximum" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.OutgoingDelayPacketMaximum">
             <summary>
             Gets or sets the maximum number of
             milliseconds that may elapse before
             a delayed packet is sent.
             Affects outgoing data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.IncomingDelayPacketMaximum">
             <summary>
             Gets or sets the maximum number of
             milliseconds that may elapse before
             a delayed packet is received.
             Affects incoming data only.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.DisablePLI">
             <summary>
             Gets or sets a flag indicating whether picture
             loss indicator (PLI) packets should be disabled.
             If set to true, a PLI packet will be generated
             and sent over the RTCP component if the RTP
             packet sequence is violated.
             Defaults to false.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.BypassCodec">
             <summary>
             Gets or sets a flag indicating whether
             encoding and decoding should be bypassed
             for outgoing and incoming media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.BypassEncode">
             <summary>
             Gets or sets a flag indicating whether
             encoding should be bypassed
             for outgoing media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.BypassDecode">
             <summary>
             Gets or sets a flag indicating whether
             decoding should be bypassed
             for incoming media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.DisableJitterBuffer">
             <summary>
             Gets or sets a value indicating whether
             the jitter buffer should be disabled.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.DisableNackBuffer">
             <summary>
             Gets or sets a value indicating whether
             the generic NACK buffer should be disabled.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.DelayDecodeOnPendingKeyFrame">
             <summary>
             Gets or sets a flag indicating whether 
             decoding should be bypassed for
             incoming media packetts when a
             key frame request has been made via
             a PLI message.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.JitterBufferLength">
             <summary>
             Gets or sets the initial jitter buffer length in milliseconds.
             Defaults to 100 (ms).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.JitterBufferMaxLength">
             <summary>
             Gets or sets the maximum jitter buffer length in milliseconds.
             Defaults to 300 (ms).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.NackBufferLength">
             <summary>
             Gets or sets the number of packets to hold in the generic
             NACK buffer awaiting an earlier packet before releasing them.
             Defaults to 128.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.PercentLossToTriggerFEC">
             <summary>
             Gets or sets the loss percentage (0-100)
             before forward error correction (FEC) is
             activated (only if supported by the remote peer).
             Affects outgoing data only.
             Defaults to 5.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.DisableFEC">
             <summary>
             Gets or sets a value indicating whether to
             disable forward error correction (FEC) completely.
             If set to true, FEC will never activate.
             Affects outgoing data only.
             Defaults to false.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoStream.BurstyFEC">
             <summary>
             Gets or sets a value indicating whether to
             use FEC algorithms tuned for bursty packet loss.
             Bursty packet loss is more common on wireless
             networks.
             Defaults to false on desktop platforms and true
             on mobile platforms.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoStream.#ctor(FM.IceLink.WebRTC.LocalMediaStream)">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.VideoStream" /> class.
             </summary>
             <param name="localStream">The local media stream.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoStream.#ctor(FM.IceLink.WebRTC.LocalMediaStream,System.Boolean)">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.VideoStream" /> class.
             </summary>
             <param name="localStream">The local media stream.</param>
             <param name="offerDtls">Whether to offer to exchange SRTP keys using DTLS.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoStream.#ctor(FM.IceLink.WebRTC.LocalMediaStream,System.Boolean,FM.IceLink.StreamFormat[])">
             <summary>
             Initializes a new instance of the WebRTC <see cref="T:FM.IceLink.WebRTC.VideoStream" /> class.
             </summary>
             <param name="localStream">The local media stream.</param>
             <param name="offerDtls">Whether to offer to exchange SRTP keys using DTLS.</param>
             <param name="formats">The stream formats to allow.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.DataChannelRegistration">
             <summary>
             A data channel codec registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelRegistration.CreateCodecCallback">
             <summary>
             Gets or sets the callback function that creates the codec.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelRegistration.EncodingParameters">
             <summary>
             Gets the encoding parameters (always <c>null</c>).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.DataChannelRegistration.Key">
             <summary>
             Gets the key used to identify this data channel registration.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelRegistration.CreateCodec(FM.IceLink.WebRTC.CodecUsage,FM.IceLink.Conference,FM.IceLink.Link,System.String,System.Object)">
             <summary>
             Creates a codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="peerId">The peer ID.</param>
             <param name="peerState">The peer state.</param>
             <returns>A new codec.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.DataChannelRegistration.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.MediaStreamTrackKind">
             <summary>
             The kind of media stream track.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.MediaStreamTrackKind.Audio">
             <summary>
             Track represents an audio source.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.MediaStreamTrackKind.Video">
             <summary>
             Track represents a video source.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.LocalMediaStream">
             <summary>
             A local media stream.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.LocalMediaStream.OnVideoPreviewMuted">
             <summary>
             Raised when the video preview is muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.LocalMediaStream.OnVideoPreviewUnmuted">
             <summary>
             Raised when the video preview is unmuted.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.MutedVideoFrame">
             <summary>
             Gets or sets the buffer to use when the video capture provider is muted.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.ToggleVideoPreviewMute">
             <summary>
             Toggles the video preview's muted state.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.MuteVideoPreview">
             <summary>
             Mutes the video preview.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.UnmuteVideoPreview">
             <summary>
             Unmutes the video preview.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.VideoPreviewIsMuted">
             <summary>
             Gets a value indicating whether or not the video preview is muted.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.AudioCaptureProvider">
             <summary>
             Gets or sets the audio capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.VideoCaptureProvider">
             <summary>
             Gets or sets the video capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.CreateAudioRenderProvider">
             <summary>
             Gets or sets the callback used to create an audio render provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.CreateVideoRenderProvider">
             <summary>
             Gets or sets the callback used to create a video render provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.DefaultVideoScale">
             <summary>
             Gets or sets the scaling to apply to the controls created by the
             default video render providers.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.DefaultVideoPreviewScale">
             <summary>
             Gets or sets the scaling to apply to the preview control created by the
             default video capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.DefaultVideoSource">
             <summary>
             Gets or sets the video source used by the default video capture provider.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.LocalMediaStream" /> class.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.LocalMediaStream.OnAudioDeviceNumberChanged">
             <summary>
             Raised whenever the current audio device number changes.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.LocalMediaStream.OnVideoDeviceNumberChanged">
             <summary>
             Raised whenever the current video device number changes.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.LocalMediaStream.OnAudioPaused">
             <summary>
             Raised when the audio is paused.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.LocalMediaStream.OnAudioResumed">
             <summary>
             Raised when the audio is resumed.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.LocalMediaStream.OnVideoPaused">
             <summary>
             Raised when the video is paused.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.LocalMediaStream.OnVideoResumed">
             <summary>
             Raised when the video is resumed.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.ToggleAudioPause">
             <summary>
             Toggles the audio capture's paused state.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.ToggleVideoPause">
             <summary>
             Toggles the video capture's paused state.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.PauseAudio">
             <summary>
             Pauses audio capture.
             </summary>
             <returns><c>true</c> if audio capture was stopped; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.ResumeAudio">
             <summary>
             Resumes audio capture.
             </summary>
             <returns><c>true</c> if audio capture was started; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.PauseVideo">
             <summary>
             Pauses video capture.
             </summary>
             <returns><c>true</c> if video capture was stopped; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.ResumeVideo">
             <summary>
             Resumes video capture.
             </summary>
             <returns><c>true</c> if video capture was started; otherwise, <c>false</c>.</returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.AudioIsPaused">
             <summary>
             Gets a value indicating whether audio is paused.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.VideoIsPaused">
             <summary>
             Gets a value indicating whether video is paused.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.AudioTargetPeerIds">
             <summary>
             Gets or sets which peer IDs should receive
             captured audio frames. Defaults to <c>null</c>, which
             means all peers get captured audio frames.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.LocalMediaStream.VideoTargetPeerIds">
             <summary>
             Gets or sets which peer IDs should receive
             captured video frames. Defaults to <c>null</c>, which
             means all peers get captured video frames.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.Initialize">
             <summary>
             Initializes the local media stream.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.Initialize(FM.SingleAction{FM.IceLink.WebRTC.LocalMediaStream})">
             <summary>
             Initializes the local media stream.
             </summary>
             <param name="callback">The callback to invoke when the local media stream is initialized.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.Stop">
             <summary>
             Permanently halts the generation of data for the tracks' sources and removes the references to the sources.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.Start(FM.IceLink.WebRTC.LocalStartArgs)">
             <summary>
             Initializes the local media stream, setting up any audio/video providers and preparing for media.
             </summary>
             <param name="args">The start arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.GetAudioDeviceNames">
             <summary>
             Gets a list of connected audio device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.GetVideoDeviceNames">
             <summary>
             Gets a list of connected video device names.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.GetAudioDeviceNumber">
             <summary>
             Gets the current audio device number.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.SetAudioDeviceNumber(System.Int32)">
             <summary>
             Sets the desired audio device number.
             </summary>
             <param name="audioDeviceNumber">The desired audio device number.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.GetVideoDeviceNumber">
             <summary>
             Gets the current video device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.SetVideoDeviceNumber(System.Int32)">
             <summary>
             Sets the desired video device number.
             </summary>
             <param name="videoDeviceNumber">The desired video device number.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.GetFrontVideoDeviceNumber">
             <summary>
             Gets the front video device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.GetRearVideoDeviceNumber">
             <summary>
             Gets the rear video device number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.UseNextAudioDevice">
             <summary>
             Sets the desired audio device number to that of the
             next audio device.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.UseNextVideoDevice">
             <summary>
             Sets the desired video device number to that of the
             next video device.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.UseFrontVideoDevice">
             <summary>
             Sets the desired video device number to that of the
             front video device.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.UseRearVideoDevice">
             <summary>
             Sets the desired video device number to that of the
             rear video device.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.SetVideoParameters(System.Int32,System.Int32)">
             <summary>
             Sets the video parameters to new width and/or height.
             Use 0 to leave a parameter as-is.
             </summary>
             <param name="videoWidth">The desired width.</param>
             <param name="videoHeight">The desired height.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.LocalMediaStream.SetVideoParameters(System.Int32,System.Int32,System.Int32)">
             <summary>
             Sets the video parameters to new width, height,
             and/or frame rate. Use 0 to leave a parameter as-is.
             </summary>
             <param name="videoWidth">The desired width.</param>
             <param name="videoHeight">The desired height.</param>
             <param name="videoFrameRate">The desired frame rate.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.MediaStream">
             <summary>
             A media stream (local or remote).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.VideoWidth">
             <summary>
             Gets the video width.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.VideoHeight">
             <summary>
             Gets the video height.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnAudioMuted">
             <summary>
             Raised when the audio is muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnAudioUnmuted">
             <summary>
             Raised when the audio is unmuted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnAudioCaptured">
             <summary>
             Raised when audio is captured.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnAudioEncoded">
             <summary>
             Raised when audio is encoded.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnVideoMuted">
             <summary>
             Raised when the video is muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnVideoUnmuted">
             <summary>
             Raised when the video is unmuted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnVideoCaptured">
             <summary>
             Raised when video is captured.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnVideoEncoded">
             <summary>
             Raised when video is encoded.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.ToggleAudioMute">
             <summary>
             Toggles the audio tracks' muted state.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.ToggleVideoMute">
             <summary>
             Toggles the video tracks' muted state.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.MuteAudio">
             <summary>
             Mutes all audio tracks.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.MuteVideo">
             <summary>
             Mutes all video tracks.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.UnmuteAudio">
             <summary>
             Unmutes all audio tracks.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.UnmuteVideo">
             <summary>
             Unmutes all video tracks.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.AudioVolume">
             <summary>
             Gets or sets the volume of the audio tracks.
             (1.0 is unity gain.)
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.AudioIsMuted">
             <summary>
             Gets a value indicating whether or not all audio tracks are muted.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.VideoIsMuted">
             <summary>
             Gets a value indicating whether or not all video tracks are muted.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.DisablePLC">
             <summary>
             Gets or sets a value indicating whether packet
             loss concealment (PLC) is disabled on any of the
             remote incoming audio streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.DisablePLI">
             <summary>
             Gets or sets a value indicating whether picture
             loss indications (PLIs) are disabled on any of the
             remote incoming video streams.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.RenderAudio(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Force-renders audio to the media stream output.
             </summary>
             <param name="audioBuffer">The audio buffer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.RenderVideo(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Force-renders video to the media stream output.
             </summary>
             <param name="videoBuffer">The video buffer.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.AudioTracks">
             <summary>
             Gets the audio track list.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.VideoTracks">
             <summary>
             Gets the video track list.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.AudioTrack">
             <summary>
             Gets the first audio track.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.VideoTrack">
             <summary>
             Gets the first video track.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.Ended">
             <summary>
             Gets or sets whether the <see cref="E:FM.IceLink.WebRTC.MediaStream.OnEnded" /> event has fired.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.Label">
             <summary>
             Gets or sets the identifier that describes the media stream.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnEnded">
             <summary>
             Raised when all tracks of the media stream have ended.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnAddAudioTrack">
             <summary>
             Raised when an audio track has been added.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnAddVideoTrack">
             <summary>
             Raised when a video track has been added.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnRemoveAudioTrack">
             <summary>
             Raised when an audio track has been removed.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnRemoveVideoTrack">
             <summary>
             Raised when a video track has been removed.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStream.OnAudioLevel">
             <summary>
             Raised whenever the current audio level changes.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.PeerId">
             <summary>
             Gets or sets the peer ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStream.PeerState">
             <summary>
             Gets or sets custom state data to associate with the peer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MediaStream" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.#ctor(System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.MediaStream" /> class.
             </summary>
             <param name="peerId">The peer ID.</param>
             <param name="peerState">State of the peer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.AddAudioTrack(FM.IceLink.WebRTC.MediaStreamTrack)">
             <summary>
             Adds an audio track.
             </summary>
             <param name="audioTrack">The audio track.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.RemoveAudioTrack(FM.IceLink.WebRTC.MediaStreamTrack)">
             <summary>
             Removes an audio track.
             </summary>
             <param name="audioTrack">The audio track.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.AddVideoTrack(FM.IceLink.WebRTC.MediaStreamTrack)">
             <summary>
             Adds a video track.
             </summary>
             <param name="videoTrack">The video track.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStream.RemoveVideoTrack(FM.IceLink.WebRTC.MediaStreamTrack)">
             <summary>
             Removes a video track.
             </summary>
             <param name="videoTrack">The video track.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioFrameEncodedArgs">
             <summary>
             Arguments for the MediaStreamTrack OnAudioEncoded event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioFrameEncodedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioFrameEncodedArgs.Buffer">
             <summary>
             Gets or sets the buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioFrameEncodedArgs.Codec">
             <summary>
             Gets or sets the codec.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioFrameEncodedArgs.EncodedFrames">
             <summary>
             Gets or sets the encoded frames.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioFrameEncodedArgs.PeerIds">
             <summary>
             Gets or sets the peer IDs being targeted (or <c>null</c> if targeting all).
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoFrameEncodedArgs">
             <summary>
             Arguments for the MediaStreamTrack OnVideoEncoded event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoFrameEncodedArgs.CaptureProvider">
             <summary>
             Gets or sets the capture provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoFrameEncodedArgs.Buffer">
             <summary>
             Gets or sets the buffer.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoFrameEncodedArgs.Codec">
             <summary>
             Gets or sets the codec.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoFrameEncodedArgs.EncodedFrame">
             <summary>
             Gets or sets the encoded frame.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoFrameEncodedArgs.PeerIds">
             <summary>
             Gets or sets the peer IDs being targeted (or <c>null</c> if targeting all).
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.MediaStreamTrack">
             <summary>
             A media-stream track that represents a media source.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.Enabled">
             <summary>
             Gets or sets whether the track is still associated with its source.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.Ended">
             <summary>
             Gets or sets whether the track has ended.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.Local">
             <summary>
             Gets or sets whether the track is local.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.Kind">
             <summary>
             Gets or sets the kind of the track.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.Label">
             <summary>
             Gets or sets the user agent-assigned string that identifies the track source.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnEnded">
             <summary>
             Raised when the source will not provide data.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnCaptureMuted">
             <summary>
             Raised when the capture source has been muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnCaptureUnmuted">
             <summary>
             Raised when the capture source has been unmuted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnRenderMuted">
             <summary>
             Raised when the render target has been muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnRenderUnmuted">
             <summary>
             Raised when the render target has been unmuted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnAudioCaptured">
             <summary>
             Raised when audio is captured.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnVideoCaptured">
             <summary>
             Raised when video is captured.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnAudioEncoded">
             <summary>
             Raised when audio is encoded.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnVideoEncoded">
             <summary>
             Raised when video is encoded.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.MediaStreamTrack.OnAudioLevel">
             <summary>
             Raised when the audio level changes.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.State">
             <summary>
             Gets or sets the track state.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.VideoWidth">
             <summary>
             Gets the video width.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.VideoHeight">
             <summary>
             Gets the video height.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.IsCaptureMuted">
             <summary>
             Gets whether the capture source is muted.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.IsRenderMuted">
             <summary>
             Gets whether the render target is muted.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.MuteCapture">
             <summary>
             Mutes the capture source.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.MuteRender">
             <summary>
             Mutes the render target.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.UnmuteCapture">
             <summary>
             Unmutes the capture source.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.UnmuteRender">
             <summary>
             Unmutes the render target.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.RenderAudio(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Force-renders audio to the media stream track output.
             </summary>
             <param name="audioBuffer">The audio buffer.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.RenderVideo(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Force-renders video to the media stream track output.
             </summary>
             <param name="videoBuffer">The video buffer.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.CaptureVolume">
             <summary>
             Gets or sets the capture volume.
             (1.0 is unity gain. Only applies to audio tracks.)
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.RenderVolume">
             <summary>
             Gets or sets the render volume.
             (1.0 is unity gain. Only applies to audio tracks.)
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.DisablePLC">
             <summary>
             Gets or sets a value indicating whether packet
             loss concealment (PLC) is disabled on the
             remote incoming audio stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.DisablePLI">
             <summary>
             Gets or sets a value indicating whether picture
             loss indications (PLIs) are disabled on the
             remote incoming video stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.AudioRenders">
             <summary>
             Gets or sets the current audio-renders.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.VideoRenders">
             <summary>
             Gets or sets the current video-renders.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.AddAudioRender(FM.IceLink.WebRTC.AudioRenderProvider)">
             <summary>
             Adds an audio render to the collection of audio renders.
             </summary>
             <param name="audioRender">The audio render.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.AddVideoRender(FM.IceLink.WebRTC.VideoRenderProvider)">
             <summary>
             Adds a video render to the collection of video renders.
             </summary>
             <param name="videoRender">The video render.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.RemoveAudioRender(FM.IceLink.WebRTC.AudioRenderProvider)">
             <summary>
             Removes an audio render from the collection of audio renders.
             </summary>
             <param name="audioRender">The audio render.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.MediaStreamTrack.RemoveVideoRender(FM.IceLink.WebRTC.VideoRenderProvider)">
             <summary>
             Removes a video render from the collection of video renders.
             </summary>
             <param name="videoRender">The video render.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.AudioCapture">
             <summary>
             Gets or sets the current audio-capture.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.MediaStreamTrack.VideoCapture">
             <summary>
             Gets or sets the current video-capture.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.MediaStreamTrackState">
             <summary>
             The state of a media stream track.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.MediaStreamTrackState.Live">
             <summary>
             The track is active.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.MediaStreamTrackState.Muted">
             <summary>
             The track's underlying media source is temporarily unable to provide realtime data.
             </summary>
            </member>
        <member name="F:FM.IceLink.WebRTC.MediaStreamTrackState.Ended">
             <summary>
             The track has ended, and the underlying media source will not provide further data.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.Padep">
             <summary>
             Abstract definition of a packetizer/depacketizer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.Padep.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.PcmaCodec">
             <summary>
             An implementation of a PCMA encoder/decoder.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmaCodec.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.PcmaCodec" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmaCodec.Encode(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Encodes a frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmaCodec.Decode(System.Byte[])">
             <summary>
             Decodes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmaCodec.Packetize(System.Byte[])">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmaCodec.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmaCodec.ProcessRTCP(FM.IceLink.RTCPPacket[])">
             <summary>
             Processes RTCP packets.
             </summary>
             <param name="packets">The packets to process.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmaCodec.Destroy">
             <summary>
             Destroys the codec.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.PcmuCodec">
             <summary>
             An implementation of a PCMU encoder/decoder.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmuCodec.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.PcmuCodec" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmuCodec.Encode(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Encodes a frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmuCodec.Decode(System.Byte[])">
             <summary>
             Decodes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmuCodec.Packetize(System.Byte[])">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmuCodec.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmuCodec.ProcessRTCP(FM.IceLink.RTCPPacket[])">
             <summary>
             Processes RTCP packets.
             </summary>
             <param name="packets">The packets to process.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.PcmuCodec.Destroy">
             <summary>
             Destroys the codec.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioRegistration">
             <summary>
             An audio codec registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRegistration.Channels">
             <summary>
             Gets or sets the number of channels to use.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRegistration.CreateCodecCallback">
             <summary>
             Gets or sets the callback function that creates the codec.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRegistration.EncodingParameters">
             <summary>
             Gets the encoding parameters (if <see cref="P:FM.IceLink.WebRTC.AudioRegistration.Channels" /> &gt; 1, then the number of channels; otherwise, <c>null</c>).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRegistration.Key">
             <summary>
             Gets the key used to identify this audio registration.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRegistration.CreateCodec(FM.IceLink.WebRTC.CodecUsage,FM.IceLink.Conference,FM.IceLink.Link,System.String,System.Object)">
             <summary>
             Creates a codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="peerId">The peer ID.</param>
             <param name="peerState">The peer state.</param>
             <returns>A new codec.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRegistration.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoRegistration">
             <summary>
             A video codec registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRegistration.CreateCodecCallback">
             <summary>
             Gets or sets the callback function that creates the codec.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRegistration.EncodingParameters">
             <summary>
             Gets the encoding parameters (always <c>null</c>).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRegistration.Key">
             <summary>
             Gets the key used to identify this video registration.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRegistration.CreateCodec(FM.IceLink.WebRTC.CodecUsage,FM.IceLink.Conference,FM.IceLink.Link,System.String,System.Object)">
             <summary>
             Creates a codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="peerId">The peer ID.</param>
             <param name="peerState">The peer state.</param>
             <returns>A new codec.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRegistration.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.Registration">
             <summary>
             A codec registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Registration.Preferred">
             <summary>
             Gets or sets whether the codec is preferred (listed first in SDP offer).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Registration.StaticPayloadType">
             <summary>
             Gets or sets the static payload type for this registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Registration.EncodingName">
             <summary>
             Gets or sets the codec name.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.Registration.ClockRate">
             <summary>
             Gets or sets the clock rate to use.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.RemoteVideoRenderProvider">
             <summary>
             Video render provider that handles an outgoing remote video stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.Conference">
             <summary>
             Gets or sets the conference.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.Link">
             <summary>
             Gets or sets the link.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.Format">
             <summary>
             Gets or sets the stream format.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.Formats">
             <summary>
             Gets or sets the stream formats.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.Registration">
             <summary>
             Gets or sets the registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.DropPacketProbability">
             <summary>
             Gets or sets the probability that a
             packet should be dropped.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.DelayPacketProbability">
             <summary>
             Gets or sets the probability that a
             packet should be delayed.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.DelayPacketMaximum">
             <summary>
             Gets or sets the maximum number of
             milliseconds that may elapse before
             a delayed packet is sent.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.BypassEncode">
             <summary>
             Gets or sets a flag indicating whether
             encoding should be bypassed
             for outgoing media packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.PercentLossToTriggerFEC">
             <summary>
             Gets or sets the loss percentage (0-100)
             before forward error correction (FEC) is
             activated (only if supported by the remote peer).
             Defaults to 5.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.DisableFEC">
             <summary>
             Gets a value indicating whether to
             disable forward error correction (FEC) completely.
             If set to true, FEC will never activate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.BurstyFEC">
             <summary>
             Gets or sets a value indicating whether to
             use FEC algorithms tuned for bursty packet loss.
             Bursty packet loss is more common on wireless
             networks.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.FecActive">
             <summary>
             Gets or sets a value indicating whether forward
             error correction (FEC) is currently active.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.DeltaFecParameters">
             <summary>
             Gets or sets the delta-frame FEC parameters.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteVideoRenderProvider.KeyFecParameters">
             <summary>
             Gets or sets the keyframe FEC parameters.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoRenderProvider.#ctor(FM.IceLink.Conference,FM.IceLink.Link,FM.IceLink.WebRTC.VideoStream,FM.IceLink.StreamFormat,FM.IceLink.StreamFormat[],FM.IceLink.WebRTC.VideoRegistration,System.Boolean,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.RemoteVideoRenderProvider" /> class.
             </summary>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="stream">The stream.</param>
             <param name="format">The stream format.</param>
             <param name="formats">The stream foramts.</param>
             <param name="registration">The registration.</param>
             <param name="disableFEC">Whether to disable forward error correction (FEC).</param>
             <param name="burstyFEC">Whether to use bursty FEC algorithms.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoRenderProvider.Initialize(FM.IceLink.WebRTC.VideoRenderInitializeArgs)">
             <summary>
             Initializes the audio render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoRenderProvider.Render(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Sends out a video buffer.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoRenderProvider.Destroy">
             <summary>
             Destroys the video render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoRenderProvider.DequeueRtcpPackets">
             <summary>
             Dequeues all pending RTCP packets.
             </summary>
             <returns>The queued RTCP packets.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoRenderProvider.EnqueueRtcpPackets(FM.IceLink.RTCPPacket[])">
             <summary>
             Enqueues RTCP packets for processing.
             </summary>
             <param name="packets">The packets.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteVideoRenderProvider.GetControl">
             <summary>
             Unused. Gets the underlying UI control.
             </summary>
             <returns>
             The underlying UI control.
             </returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.RemoteAudioRenderProvider">
             <summary>
             Audio render provider that handles an outgoing remote audio stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioRenderProvider.Conference">
             <summary>
             Gets or sets the conference.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioRenderProvider.Link">
             <summary>
             Gets or sets the link.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioRenderProvider.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioRenderProvider.Format">
             <summary>
             Gets or sets the stream format.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioRenderProvider.Registration">
             <summary>
             Gets or sets the registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioRenderProvider.DropPacketProbability">
             <summary>
             Gets or sets the probability that a
             packet should be dropped.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioRenderProvider.DelayPacketProbability">
             <summary>
             Gets or sets the probability that a
             packet should be delayed.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioRenderProvider.DelayPacketMaximum">
             <summary>
             Gets or sets the maximum number of
             milliseconds that may elapse before
             a delayed packet is sent.
             FOR TESTING PURPOSES ONLY.
             Defaults to zero.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.RemoteAudioRenderProvider.BypassEncode">
             <summary>
             Gets or sets a flag indicating whether
             encoding should be bypassed
             for outgoing media packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioRenderProvider.#ctor(FM.IceLink.Conference,FM.IceLink.Link,FM.IceLink.WebRTC.AudioStream,FM.IceLink.StreamFormat,FM.IceLink.WebRTC.AudioRegistration)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.WebRTC.RemoteAudioRenderProvider" /> class.
             </summary>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="stream">The stream.</param>
             <param name="format">The stream format.</param>
             <param name="registration">The registration.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioRenderProvider.Initialize(FM.IceLink.WebRTC.AudioRenderInitializeArgs)">
             <summary>
             Initializes the audio render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioRenderProvider.Render(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Sends out an audio buffer.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioRenderProvider.Destroy">
             <summary>
             Destroys the audio render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioRenderProvider.DequeueRtcpPackets">
             <summary>
             Dequeues all pending RTCP packets.
             </summary>
             <returns>The queued RTCP packets.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.RemoteAudioRenderProvider.EnqueueRtcpPackets(FM.IceLink.RTCPPacket[])">
             <summary>
             Enqueues RTCP packets for processing.
             </summary>
             <param name="packets">The packets.</param>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoCodec">
             <summary>
             Abstract definition of a video encoder/decoder.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCodec.CaptureClockRate">
             <summary>
             Gets the clock rate for captured data.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.Initialize(FM.IceLink.WebRTC.CodecUsage,System.String)">
             <summary>
             Initializes the codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="encodingName">The encoding name, as defined in SDP.</param>
             <returns><c>true</c> if initialized; <c>false</c> if previously initialized.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.Initialize(FM.IceLink.WebRTC.CodecUsage,System.String,System.Int32)">
             <summary>
             Initializes the codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="encodingName">The encoding name, as defined in SDP.</param>
             <param name="clockRate">The clock rate.</param>
             <returns><c>true</c> if initialized; <c>false</c> if previously initialized.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.Initialize(FM.IceLink.WebRTC.CodecUsage,FM.IceLink.Conference,FM.IceLink.Link,System.String,System.Object,System.String)">
             <summary>
             Initializes the codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="peerId">The ID of the remote peer (or null).</param>
             <param name="peerState">Custom state associated with the remote peer (or null).</param>
             <param name="encodingName">The encoding name, as defined in SDP.</param>
             <returns><c>true</c> if initialized; <c>false</c> if previously initialized.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.Initialize(FM.IceLink.WebRTC.CodecUsage,FM.IceLink.Conference,FM.IceLink.Link,System.String,System.Object,System.String,System.Int32)">
             <summary>
             Initializes the codec.
             </summary>
             <param name="usage">The codec usage.</param>
             <param name="conference">The conference.</param>
             <param name="link">The link.</param>
             <param name="peerId">The ID of the remote peer (or null).</param>
             <param name="peerState">Custom state associated with the remote peer (or null).</param>
             <param name="encodingName">The encoding name, as defined in SDP.</param>
             <param name="clockRate">The clock rate.</param>
             <returns><c>true</c> if initialized; <c>false</c> if previously initialized.</returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoCodec.Key">
             <summary>
             Gets the key used to identify this video codec.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.CreateKey(System.String,System.Int32)">
             <summary>
             Gets a unique key for a given encoding name and clock rate.
             </summary>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
             <returns>A unique key.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.Encode(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Encodes a frame.
             </summary>
             <param name="frame">The frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.Decode(System.Byte[])">
             <summary>
             Decodes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.DecoderNeedsKeyFrame">
             <summary>
             Gets whether the decoder needs a keyframe. This
             is checked after every Decode operation.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.Packetize(System.Byte[])">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.Depacketize(FM.IceLink.RTPPacket)">
             <summary>
             Depacketizes a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoCodec.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioRenderInitializeArgs">
             <summary>
             Arguments for audio render initialization.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderInitializeArgs.LocalStream">
             <summary>
             Gets or sets the local media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderInitializeArgs.RemoteStream">
             <summary>
             Gets or sets the remote media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderInitializeArgs.ClockRate">
             <summary>
             Gets or sets the clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderInitializeArgs.Channels">
             <summary>
             Gets or sets the number of channels.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRenderInitializeArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRenderInitializeArgs.ToJson(FM.IceLink.WebRTC.AudioRenderInitializeArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRenderInitializeArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoRenderInitializeArgs">
             <summary>
             Arguments for video render initialization.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderInitializeArgs.LocalStream">
             <summary>
             Gets or sets the local media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderInitializeArgs.RemoteStream">
             <summary>
             Gets or sets the remote media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderInitializeArgs.ClockRate">
             <summary>
             Gets or sets the clock rate.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRenderInitializeArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRenderInitializeArgs.ToJson(FM.IceLink.WebRTC.VideoRenderInitializeArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRenderInitializeArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioRenderMutedArgs">
             <summary>
             Arguments for the AudioRenderProvider OnMuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderMutedArgs.RenderProvider">
             <summary>
             Gets or sets the render provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioRenderUnmutedArgs">
             <summary>
             Arguments for the AudioRenderProvider OnUnmuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderUnmutedArgs.RenderProvider">
             <summary>
             Gets or sets the render provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.AudioRenderProvider">
             <summary>
             Abstract definition for an audio render implementation.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderProvider.IsMuted">
             <summary>
             Gets whether or not the provider is muted.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderProvider.Volume">
             <summary>
             Gets or sets the volume (1.0 is unity gain).
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderProvider.IsRendering">
             <summary>
             Gets whether or not the provider is currently rendering audio.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderProvider.ClockRate">
             <summary>
             Gets the clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderProvider.Channels">
             <summary>
             Gets the channel count.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.AudioRenderProvider.OnMuted">
             <summary>
             Raised whenever the render is muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.AudioRenderProvider.OnUnmuted">
             <summary>
             Raised whenever the render is unmuted.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRenderProvider.Mute">
             <summary>
             Stops playback of incoming frames.
             </summary>
             <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRenderProvider.Unmute">
             <summary>
             Starts playback of incoming frames.
             </summary>
             <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRenderProvider.Render(FM.IceLink.WebRTC.AudioBuffer)">
             <summary>
             Renders an audio frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderProvider.IsInitialized">
             <summary>
             Gets or sets whether the audio render provider has been initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.AudioRenderProvider.IsDestroyed">
             <summary>
             Gets or sets whether the audio render provider has been destroyed.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRenderProvider.Initialize(FM.IceLink.WebRTC.AudioRenderInitializeArgs)">
             <summary>
             Initializes the audio render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.AudioRenderProvider.Destroy">
             <summary>
             Destroys the audio render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoRenderMutedArgs">
             <summary>
             Arguments for the VideoRenderProvider OnMuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderMutedArgs.RenderProvider">
             <summary>
             Gets or sets the render provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoRenderUnmutedArgs">
             <summary>
             Arguments for the VideoRenderProvider OnUnmuted event.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderUnmutedArgs.RenderProvider">
             <summary>
             Gets or sets the render provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoRenderProvider">
             <summary>
             Abstract definition for a video render implementation.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderProvider.IsMuted">
             <summary>
             Gets whether or not the provider is muted.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderProvider.IsRendering">
             <summary>
             Gets whether or not the provider is currently rendering audio.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderProvider.ClockRate">
             <summary>
             Gets the clock rate.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.VideoRenderProvider.OnMuted">
             <summary>
             Raised whenever the render is muted.
             </summary>
            </member>
        <member name="E:FM.IceLink.WebRTC.VideoRenderProvider.OnUnmuted">
             <summary>
             Raised whenever the render is unmuted.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRenderProvider.Mute">
             <summary>
             Stops playback of incoming frames.
             </summary>
             <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRenderProvider.Unmute">
             <summary>
             Starts playback of incoming frames.
             </summary>
             <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRenderProvider.Render(FM.IceLink.WebRTC.VideoBuffer)">
             <summary>
             Renders a video frame.
             </summary>
             <param name="frame">The frame.</param>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderProvider.IsInitialized">
             <summary>
             Gets whether the video render provider has been initialized.
             </summary>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoRenderProvider.IsDestroyed">
             <summary>
             Gets whether the video render provider has been destroyed.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRenderProvider.Initialize(FM.IceLink.WebRTC.VideoRenderInitializeArgs)">
             <summary>
             Initializes the video render provider.
             </summary>
             <param name="renderArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRenderProvider.Destroy">
             <summary>
             Destroys the video render provider. No additional rendering will take place.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoRenderProvider.GetControl">
             <summary>
             Gets the underlying UI control.
             </summary>
             <returns>The underlying UI control.</returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.VideoPadep">
             <summary>
             Abstract definition of a video packetizer/depacketizer.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoPadep.Packetize(System.Byte[],System.Int32)">
             <summary>
             Packetizes an encoded frame.
             </summary>
             <param name="encodedFrame">The encoded frame.</param>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.WebRTC.VideoPadep.AverageFrameRate">
             <summary>
             Gets the average frame rate.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.VideoPadep.GetNextTimestamp(System.Int32)">
             <summary>
             Gets the next timestamp for an RTP packet.
             </summary>
             <param name="clockRate">The clock rate.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.WebRTC.UserMedia">
             <summary>
             Provides static access to local media devices.
             </summary>
            </member>
        <member name="M:FM.IceLink.WebRTC.UserMedia.GetAudioDeviceNames">
             <summary>
             Gets a list of connected audio device names using the
             default audio capture provider.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.UserMedia.GetAudioDeviceNames(FM.IceLink.WebRTC.AudioCaptureProvider)">
             <summary>
             Gets a list of connected audio device names.
             </summary>
             <param name="audioCaptureProvider">The audio capture provider.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.UserMedia.GetVideoDeviceNames">
             <summary>
             Gets a list of connected video device names using the
             default video capture provider.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.UserMedia.GetVideoDeviceNames(FM.IceLink.WebRTC.VideoCaptureProvider)">
             <summary>
             Gets a list of connected video device names.
             </summary>
             <param name="videoCaptureProvider">The video capture provider.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.WebRTC.UserMedia.GetMedia(FM.IceLink.WebRTC.GetMediaArgs)">
             <summary>
             Gets a local media stream using the specified arguments.
             If audio and/or video are requested, the corresponding
             audio/video capture providers will be initialized. If
             no audio/video capture providers are defined, default
             providers will be initialized which use the device
             microphone/camera as the media source. If no default
             providers exist for the platform, an error will be
             thrown during initialization.
             </summary>
             <param name="getMediaArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.WebRTC.UserMedia.GetMediaAsync(FM.IceLink.WebRTC.GetMediaArgs)">
             <summary>
             Invokes the GetMedia operation using .NET async tasks.
             </summary>
             <param name="getMediaArgs">The get-media arguments.</param>
             <returns></returns>
            </member>
    </members>
</doc>
