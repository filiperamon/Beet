<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FM</name>
    </assembly>
    <members>
        <member name="T:FM.AndroidLogProvider">
             <summary>
             Log provider that writes output to the Android log.
             </summary>
            </member>
        <member name="M:FM.AndroidLogProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.AndroidLogProvider" /> class.
             </summary>
            </member>
        <member name="M:FM.AndroidLogProvider.#ctor(FM.LogLevel)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.AndroidLogProvider" /> class.
             </summary>
             <param name="level">The log level.</param>
            </member>
        <member name="M:FM.AndroidLogProvider.WriteLine(System.String)">
             <summary>
             Writes a line of text to the log.
             </summary>
             <param name="text">The text to write to the log.</param>
            </member>
        <member name="M:FM.AndroidLogProvider.Log(FM.LogLevel,System.String)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.AndroidLogProvider.Log(FM.LogLevel,System.String,System.Exception)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="T:FM.TcpOutputArgs">
             <summary>
             TCP output args.
             </summary>
            </member>
        <member name="P:FM.TcpOutputArgs.Socket">
             <summary>
             Gets or sets the socket.
             </summary>
            </member>
        <member name="P:FM.TcpOutputArgs.State">
             <summary>
             Gets or sets the custom state object.
             </summary>
            </member>
        <member name="T:FM.TcpAcceptArgs">
             <summary>
             TCP accept arguments.
             </summary>
            </member>
        <member name="P:FM.TcpAcceptArgs.State">
             <summary>
             Gets or sets the custom state object.
             </summary>
            </member>
        <member name="P:FM.TcpAcceptArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke on success.
             </summary>
            </member>
        <member name="P:FM.TcpAcceptArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke on failure.
             </summary>
            </member>
        <member name="P:FM.TcpAcceptArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke on complete.
             </summary>
            </member>
        <member name="M:FM.TcpAcceptArgs.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TcpAcceptArgs" /> class.
             </summary>
             <param name="state">The custom state object.</param>
            </member>
        <member name="T:FM.TcpAcceptCompleteArgs">
             <summary>
             TCP accept-complete arguments.
             </summary>
            </member>
        <member name="T:FM.TcpAcceptFailureArgs">
             <summary>
             TCP accept-failure arguments.
             </summary>
            </member>
        <member name="P:FM.TcpAcceptFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.TcpAcceptSuccessArgs">
             <summary>
             TCP accept-success arguments.
             </summary>
            </member>
        <member name="P:FM.TcpAcceptSuccessArgs.AcceptSocket">
             <summary>
             Gets or sets the new socket.
             </summary>
            </member>
        <member name="T:FM.UdpOutputArgs">
             <summary>
             UDP output args.
             </summary>
            </member>
        <member name="P:FM.UdpOutputArgs.Socket">
             <summary>
             Gets or sets the socket.
             </summary>
            </member>
        <member name="P:FM.UdpOutputArgs.State">
             <summary>
             Gets or sets the custom state object.
             </summary>
            </member>
        <member name="T:FM.UdpReceiveArgs">
             <summary>
             UDP receive arguments.
             </summary>
            </member>
        <member name="P:FM.UdpReceiveArgs.State">
             <summary>
             Gets or sets the custom state object.
             </summary>
            </member>
        <member name="P:FM.UdpReceiveArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke on success.
             </summary>
            </member>
        <member name="P:FM.UdpReceiveArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke on failure.
             </summary>
            </member>
        <member name="P:FM.UdpReceiveArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke on complete.
             </summary>
            </member>
        <member name="M:FM.UdpReceiveArgs.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.UdpReceiveArgs" /> class.
             </summary>
             <param name="state">A custom state object.</param>
            </member>
        <member name="T:FM.UdpReceiveCompleteArgs">
             <summary>
             UDP receive-complete arguments.
             </summary>
            </member>
        <member name="T:FM.UdpReceiveFailureArgs">
             <summary>
             UDP receive-failure arguments.
             </summary>
            </member>
        <member name="P:FM.UdpReceiveFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.UdpReceiveSuccessArgs">
             <summary>
             UDP receive-success arguments.
             </summary>
            </member>
        <member name="P:FM.UdpReceiveSuccessArgs.Buffer">
             <summary>
             Gets or sets the buffer of received data.
             </summary>
            </member>
        <member name="P:FM.UdpReceiveSuccessArgs.RemoteIPAddress">
             <summary>
             Gets or sets the remote IP address.
             </summary>
            </member>
        <member name="P:FM.UdpReceiveSuccessArgs.RemotePort">
             <summary>
             Gets or sets the remote port.
             </summary>
            </member>
        <member name="P:FM.UdpReceiveSuccessArgs.DiscardedPacketCount">
             <summary>
             Gets or sets the number of packets discarded after this read.
             For more information, see <see cref="P:FM.UdpSocket.MaxQueuedPackets" />.
             </summary>
            </member>
        <member name="T:FM.UdpSendArgs">
             <summary>
             UDP send arguments.
             </summary>
            </member>
        <member name="P:FM.UdpSendArgs.Buffer">
             <summary>
             Gets or sets the buffer of data to send.
             </summary>
            </member>
        <member name="P:FM.UdpSendArgs.IPAddress">
             <summary>
             Gets or sets the remote IP address.
             </summary>
            </member>
        <member name="P:FM.UdpSendArgs.Port">
             <summary>
             Gets or sets the remote port.
             </summary>
            </member>
        <member name="P:FM.UdpSendArgs.State">
             <summary>
             Gets or sets the custom state object.
             </summary>
            </member>
        <member name="P:FM.UdpSendArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke on success.
             </summary>
            </member>
        <member name="P:FM.UdpSendArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke on failure.
             </summary>
            </member>
        <member name="P:FM.UdpSendArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke on complete.
             </summary>
            </member>
        <member name="M:FM.UdpSendArgs.#ctor(System.Byte[],System.String,System.Int32,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.UdpSendArgs" /> class.
             </summary>
             <param name="buffer">The buffer of data to send.</param>
             <param name="ipAddress">The remote IP address.</param>
             <param name="port">The remote port.</param>
             <param name="state">The custom state object.</param>
            </member>
        <member name="T:FM.UdpSendCompleteArgs">
             <summary>
             UDP send-complete arguments.
             </summary>
            </member>
        <member name="P:FM.UdpSendCompleteArgs.Buffer">
             <summary>
             Gets or sets the original buffer of data to send.
             </summary>
            </member>
        <member name="P:FM.UdpSendCompleteArgs.IPAddress">
             <summary>
             Gets or sets the original remote IP address.
             </summary>
            </member>
        <member name="P:FM.UdpSendCompleteArgs.Port">
             <summary>
             Gets or sets the original remote port.
             </summary>
            </member>
        <member name="T:FM.UdpSendFailureArgs">
             <summary>
             UDP send-failure arguments.
             </summary>
            </member>
        <member name="P:FM.UdpSendFailureArgs.Buffer">
             <summary>
             Gets or sets the original buffer of data to send.
             </summary>
            </member>
        <member name="P:FM.UdpSendFailureArgs.IPAddress">
             <summary>
             Gets or sets the original remote IP address.
             </summary>
            </member>
        <member name="P:FM.UdpSendFailureArgs.Port">
             <summary>
             Gets or sets the original remote port.
             </summary>
            </member>
        <member name="P:FM.UdpSendFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.UdpSendSuccessArgs">
             <summary>
             UDP send-success arguments.
             </summary>
            </member>
        <member name="P:FM.UdpSendSuccessArgs.Buffer">
             <summary>
             Gets or sets the original buffer of data to send.
             </summary>
            </member>
        <member name="P:FM.UdpSendSuccessArgs.IPAddress">
             <summary>
             Gets or sets the original remote IP address.
             </summary>
            </member>
        <member name="P:FM.UdpSendSuccessArgs.Port">
             <summary>
             Gets or sets the original remote port.
             </summary>
            </member>
        <member name="T:FM.TcpReceiveArgs">
             <summary>
             TCP receive arguments.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveArgs.Timeout">
             <summary>
             Gets or sets the timeout.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveArgs.State">
             <summary>
             Gets or sets the custom state object.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveArgs.WillTimeout">
             <summary>
             Gets whether the receive will timeout eventually.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke on success.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke on failure.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke on complete.
             </summary>
            </member>
        <member name="M:FM.TcpReceiveArgs.#ctor(System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TcpReceiveArgs" /> class.
             </summary>
             <param name="state">The custom state object.</param>
            </member>
        <member name="M:FM.TcpReceiveArgs.#ctor(System.Object,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TcpReceiveArgs" /> class.
             </summary>
             <param name="state">The custom state object.</param>
             <param name="timeout">The timeout.</param>
            </member>
        <member name="T:FM.TcpReceiveCompleteArgs">
             <summary>
             TCP receive-complete arguments.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveCompleteArgs.Timeout">
             <summary>
             Gets or sets the original timeout.
             </summary>
            </member>
        <member name="T:FM.TcpReceiveFailureArgs">
             <summary>
             TCP receive-failure arguments.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveFailureArgs.Timeout">
             <summary>
             Gets or sets the original timeout.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveFailureArgs.TimedOut">
             <summary>
             Gets or sets whether the receive timed out.
             </summary>
            </member>
        <member name="T:FM.TcpReceiveSuccessArgs">
             <summary>
             TCP receive-success arguments.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveSuccessArgs.Timeout">
             <summary>
             Gets or sets the original timeout.
             </summary>
            </member>
        <member name="P:FM.TcpReceiveSuccessArgs.Buffer">
             <summary>
             Gets or sets the buffer of received data.
             </summary>
            </member>
        <member name="T:FM.TcpSendArgs">
             <summary>
             TCP send arguments.
             </summary>
            </member>
        <member name="P:FM.TcpSendArgs.Buffer">
             <summary>
             Gets or sets the buffer of data to send.
             </summary>
            </member>
        <member name="P:FM.TcpSendArgs.Timeout">
             <summary>
             Gets or sets the timeout.
             </summary>
            </member>
        <member name="P:FM.TcpSendArgs.State">
             <summary>
             Gets or sets the custom state object.
             </summary>
            </member>
        <member name="P:FM.TcpSendArgs.WillTimeout">
             <summary>
             Gets whether the send will timeout eventually.
             </summary>
            </member>
        <member name="P:FM.TcpSendArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke on success.
             </summary>
            </member>
        <member name="P:FM.TcpSendArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke on failure.
             </summary>
            </member>
        <member name="P:FM.TcpSendArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke on complete.
             </summary>
            </member>
        <member name="M:FM.TcpSendArgs.#ctor(System.Byte[],System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TcpSendArgs" /> class.
             </summary>
             <param name="buffer">The buffer of data to send.</param>
             <param name="state">The custom state object.</param>
            </member>
        <member name="M:FM.TcpSendArgs.#ctor(System.Byte[],System.Object,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TcpSendArgs" /> class.
             </summary>
             <param name="buffer">The buffer of data to send.</param>
             <param name="state">The custom state object.</param>
             <param name="timeout">The timeout.</param>
            </member>
        <member name="T:FM.TcpSendCompleteArgs">
             <summary>
             TCP send-complete arguments.
             </summary>
            </member>
        <member name="P:FM.TcpSendCompleteArgs.Buffer">
             <summary>
             Gets or sets the original buffer of data to send.
             </summary>
            </member>
        <member name="P:FM.TcpSendCompleteArgs.Timeout">
             <summary>
             Gets or sets the original timeout.
             </summary>
            </member>
        <member name="T:FM.TcpSendFailureArgs">
             <summary>
             TCP send-failure arguments.
             </summary>
            </member>
        <member name="P:FM.TcpSendFailureArgs.Buffer">
             <summary>
             Gets or sets the original buffer of data to send.
             </summary>
            </member>
        <member name="P:FM.TcpSendFailureArgs.Timeout">
             <summary>
             Gets or sets the original timeout.
             </summary>
            </member>
        <member name="P:FM.TcpSendFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="P:FM.TcpSendFailureArgs.TimedOut">
             <summary>
             Gets or sets whether the send timed out.
             </summary>
            </member>
        <member name="T:FM.TcpSendSuccessArgs">
             <summary>
             TCP send-success arguments.
             </summary>
            </member>
        <member name="P:FM.TcpSendSuccessArgs.Buffer">
             <summary>
             Gets or sets the original buffer of data to send.
             </summary>
            </member>
        <member name="P:FM.TcpSendSuccessArgs.Timeout">
             <summary>
             Gets or sets the original timeout.
             </summary>
            </member>
        <member name="T:FM.TcpConnectCompleteArgs">
             <summary>
             TCP connect-complete arguments.
             </summary>
            </member>
        <member name="P:FM.TcpConnectCompleteArgs.Timeout">
             <summary>
             Gets or sets the original timeout.
             </summary>
            </member>
        <member name="T:FM.TcpConnectFailureArgs">
             <summary>
             TCP connect-failure arguments.
             </summary>
            </member>
        <member name="P:FM.TcpConnectFailureArgs.Timeout">
             <summary>
             Gets or sets the original timeout.
             </summary>
            </member>
        <member name="P:FM.TcpConnectFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="P:FM.TcpConnectFailureArgs.TimedOut">
             <summary>
             Gets or sets whether the send timed out.
             </summary>
            </member>
        <member name="T:FM.TcpConnectSuccessArgs">
             <summary>
             TCP connect-success arguments.
             </summary>
            </member>
        <member name="P:FM.TcpConnectSuccessArgs.Timeout">
             <summary>
             Gets or sets the original timeout.
             </summary>
            </member>
        <member name="T:FM.TcpConnectArgs">
             <summary>
             TCP connect arguments.
             </summary>
            </member>
        <member name="P:FM.TcpConnectArgs.IPAddress">
             <summary>
             Gets or sets the remote IP address.
             </summary>
            </member>
        <member name="P:FM.TcpConnectArgs.Port">
             <summary>
             Gets or sets the remote port.
             </summary>
            </member>
        <member name="P:FM.TcpConnectArgs.Timeout">
             <summary>
             Gets or sets the timeout.
             </summary>
            </member>
        <member name="P:FM.TcpConnectArgs.State">
             <summary>
             Gets or sets the custom state object.
             </summary>
            </member>
        <member name="P:FM.TcpConnectArgs.WillTimeout">
             <summary>
             Gets whether the send will timeout eventually.
             </summary>
            </member>
        <member name="P:FM.TcpConnectArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke on success.
             </summary>
            </member>
        <member name="P:FM.TcpConnectArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke on failure.
             </summary>
            </member>
        <member name="P:FM.TcpConnectArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke on complete.
             </summary>
            </member>
        <member name="M:FM.TcpConnectArgs.#ctor(System.String,System.Int32,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TcpConnectArgs" /> class.
             </summary>
             <param name="ipAddress">The remote IP address.</param>
             <param name="port">The remote port.</param>
             <param name="state">The custom state object.</param>
            </member>
        <member name="M:FM.TcpConnectArgs.#ctor(System.String,System.Int32,System.Object,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TcpConnectArgs" /> class.
             </summary>
             <param name="ipAddress">The remote IP address.</param>
             <param name="port">The remote port.</param>
             <param name="state">The custom state object.</param>
             <param name="timeout">The timeout.</param>
            </member>
        <member name="T:FM.HttpResponseReceivedArgs">
             <summary>
             Arguments passed into callbacks when an HTTP response is received.
             </summary>
            </member>
        <member name="P:FM.HttpResponseReceivedArgs.RequestArgs">
             <summary>
             Gets or sets the original request arguments.
             </summary>
            </member>
        <member name="P:FM.HttpResponseReceivedArgs.Sender">
             <summary>
             Gets or sets the sender of the request, either a client or publisher.
             </summary>
            </member>
        <member name="P:FM.HttpResponseReceivedArgs.Response">
             <summary>
             Gets or sets the incoming HTTP response received from the server.
             </summary>
            </member>
        <member name="T:FM.WebSocketCloseArgs">
             <summary>
             Close arguments for the <see cref="T:FM.WebSocket" /> class.
             </summary>
            </member>
        <member name="P:FM.WebSocketCloseArgs.OnComplete">
             <summary>
             Gets or sets the callback to execute when the connection is closed.
             </summary>
            </member>
        <member name="P:FM.WebSocketCloseArgs.StatusCode">
             <summary>
             Gets or sets the status code to send with the close frame.
             </summary>
            </member>
        <member name="P:FM.WebSocketCloseArgs.Reason">
             <summary>
             Gets or sets the reason to send with the close frame.
             </summary>
            </member>
        <member name="M:FM.WebSocketCloseArgs.#ctor">
             <summary>
             Creates a new instance of <see cref="T:FM.WebSocketCloseArgs" />
             with default values.
             </summary>
            </member>
        <member name="T:FM.WebSocketCloseCompleteArgs">
             <summary>
             Arguments for <see cref="P:FM.WebSocketCloseArgs.OnComplete" />.
             </summary>
            </member>
        <member name="P:FM.WebSocketCloseCompleteArgs.CloseArgs">
             <summary>
             Gets or sets the original arguments passed to the close method.
             </summary>
            </member>
        <member name="P:FM.WebSocketCloseCompleteArgs.StatusCode">
             <summary>
             Gets or sets the status code associated with the close operation.
             </summary>
            </member>
        <member name="P:FM.WebSocketCloseCompleteArgs.Reason">
             <summary>
             Gets or sets the reason given for closing the connection.
             </summary>
            </member>
        <member name="T:FM.WebSocketOpenArgs">
             <summary>
             Open arguments for the <see cref="T:FM.WebSocket" /> class.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.Headers">
             <summary>
             Gets or sets headers to send with the handshake request.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke when a successful connection has been established.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke when a connection could not be established.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.OnStreamFailure">
             <summary>
             Gets or sets the callback to invoke when a successful connection breaks down.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.OnRequestCreated">
             <summary>
             Gets or sets the callback to invoke before the handshake request is sent.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.OnResponseReceived">
             <summary>
             Gets or sets the callback to invoke after the handshake response is received.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.OnReceive">
             <summary>
             Gets or sets the callback to invoke when a message is received.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.HandshakeTimeout">
             <summary>
             Gets or sets the timeout for the handshake.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.StreamTimeout">
             <summary>
             Gets or sets the timeout for the stream.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenArgs.Sender">
             <summary>
             Gets or sets the sender of the request.
             </summary>
            </member>
        <member name="M:FM.WebSocketOpenArgs.#ctor">
             <summary>
             Creates a new instance of 
             </summary>
            </member>
        <member name="T:FM.WebSocketOpenFailureArgs">
             <summary>
             Arguments for <see cref="P:FM.WebSocketOpenArgs.OnFailure" />.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenFailureArgs.OpenArgs">
             <summary>
             Gets or sets the original arguments passed to the open method.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenFailureArgs.Exception">
             <summary>
             Gets or sets the exception generated while connecting.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenFailureArgs.StatusCode">
             <summary>
             Gets or sets the status code associated with the failure to connect.
             </summary>
            </member>
        <member name="T:FM.WebSocketOpenSuccessArgs">
             <summary>
             Arguments for <see cref="P:FM.WebSocketOpenArgs.OnSuccess" />.
             </summary>
            </member>
        <member name="P:FM.WebSocketOpenSuccessArgs.OpenArgs">
             <summary>
             Gets or sets the original arguments passed to the open method.
             </summary>
            </member>
        <member name="T:FM.WebSocketReceiveArgs">
             <summary>
             Arguments for <see cref="P:FM.WebSocketOpenArgs.OnReceive" />.
             </summary>
            </member>
        <member name="P:FM.WebSocketReceiveArgs.OpenArgs">
             <summary>
             Gets or sets the original arguments passed to the open method.
             </summary>
            </member>
        <member name="P:FM.WebSocketReceiveArgs.TextMessage">
             <summary>
             Gets or sets the message received from the server as text data.
             </summary>
            </member>
        <member name="P:FM.WebSocketReceiveArgs.BinaryMessage">
             <summary>
             Gets or sets the message received from the server as binary data.
             </summary>
            </member>
        <member name="P:FM.WebSocketReceiveArgs.IsText">
             <summary>
             Gets whether or not the received message is text.
             </summary>
            </member>
        <member name="T:FM.WebSocketSendArgs">
             <summary>
             Send arguments for the <see cref="T:FM.WebSocket" /> class.
             </summary>
            </member>
        <member name="P:FM.WebSocketSendArgs.TextMessage">
             <summary>
             Gets or sets the message to send as text data.
             </summary>
            </member>
        <member name="P:FM.WebSocketSendArgs.BinaryMessage">
             <summary>
             Gets or sets the message to send as binary data.
             </summary>
            </member>
        <member name="P:FM.WebSocketSendArgs.Timeout">
             <summary>
             Gets or sets the timeout for the request.
             </summary>
            </member>
        <member name="P:FM.WebSocketSendArgs.IsText">
             <summary>
             Gets whether or not the message should be sent as text.
             </summary>
            </member>
        <member name="M:FM.WebSocketSendArgs.#ctor">
             <summary>
             Creates a new <see cref="T:FM.WebSocketSendArgs" /> instance.
             </summary>
            </member>
        <member name="T:FM.WebSocketStreamFailureArgs">
             <summary>
             Arguments for <see cref="P:FM.WebSocketOpenArgs.OnStreamFailure" />.
             </summary>
            </member>
        <member name="P:FM.WebSocketStreamFailureArgs.OpenArgs">
             <summary>
             Gets or sets the original arguments passed to the open method.
             </summary>
            </member>
        <member name="P:FM.WebSocketStreamFailureArgs.Exception">
             <summary>
             Gets or sets the exception generated by the active connection.
             </summary>
            </member>
        <member name="P:FM.WebSocketStreamFailureArgs.StatusCode">
             <summary>
             Gets or sets the status code associated with the stream failure.
             </summary>
            </member>
        <member name="T:FM.AsyncException">
             <summary>
             Throws exceptions on a separate thread.
             </summary>
            </member>
        <member name="P:FM.AsyncException.Rethrow">
             <summary>
             Gets or sets whether exceptions should be thrown or
             just written to the log as an error-level message.
             Defaults to <c>true</c>.
             </summary>
            </member>
        <member name="M:FM.AsyncException.AsyncThrow(System.Exception,System.String)">
             <summary>
             Throws an exception on a separate thread.
             </summary>
             <param name="ex">The exception to throw.</param>
             <param name="source">The source of the exception.</param>
            </member>
        <member name="T:FM.BaseTimeoutTimer">
             <summary>
             Contract for a thread-safe class for running timeouts on asynchronous methods.
             </summary>
            </member>
        <member name="M:FM.BaseTimeoutTimer.Start(System.Int32)">
             <summary>
             Starts the timer.
             </summary>
             <param name="timeout">The timeout length, in milliseconds.</param>
            </member>
        <member name="M:FM.BaseTimeoutTimer.Stop">
             <summary>
             Stops the timer, notifying the calling code if the timeout has already elapsed.
             </summary>
             <returns><c>true</c> if the timer was successfully stopped in time; <c>false</c>
             if the timeout elapsed and the timeout callback has been invoked.</returns>
            </member>
        <member name="T:FM.BaseWebSocket">
             <summary>
             Contract for an implementation of the WebSocket protocol v8.
             </summary>
            </member>
        <member name="P:FM.BaseWebSocket.BufferedAmount">
             <summary>
             Gets the number of bytes buffered in the send queue.
             </summary>
            </member>
        <member name="P:FM.BaseWebSocket.IsOpen">
             <summary>
             Gets a value indicating whether the WebSocket is connected.
             </summary>
            </member>
        <member name="P:FM.BaseWebSocket.Secure">
             <summary>
             Gets a value indicating whether the WebSocket is secure.
             </summary>
            </member>
        <member name="M:FM.BaseWebSocket.Open(FM.WebSocketOpenArgs)">
             <summary>
             Opens the WebSocket connection.
             </summary>
             <param name="openArgs">The open arguments.</param>
            </member>
        <member name="M:FM.BaseWebSocket.Send(FM.WebSocketSendArgs)">
             <summary>
             Sends a message to the WebSocket server.
             </summary>
             <param name="sendArgs">The send arguments.</param>
            </member>
        <member name="M:FM.BaseWebSocket.Close">
             <summary>
             Closes the WebSocket connection.
             </summary>
            </member>
        <member name="M:FM.BaseWebSocket.Close(FM.WebSocketCloseArgs)">
             <summary>
             Closes the WebSocket connection.
             </summary>
             <param name="closeArgs">The close arguments</param>
            </member>
        <member name="T:FM.Binary">
             <summary>
             Bitwise buffer operations.
             </summary>
            </member>
        <member name="M:FM.Binary.ToBytes16(System.Int32,System.Boolean)">
             <summary>
             Converts a 16-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The output byte array.</returns>
            </member>
        <member name="M:FM.Binary.ToBytes16(System.Int32,System.Boolean,System.Byte[],System.Int32)">
             <summary>
             Writes a 16-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <param name="output">The output byte array.</param>
             <param name="outputIndex">The index to start writing.</param>
            </member>
        <member name="M:FM.Binary.ToBytes24(System.Int32,System.Boolean)">
             <summary>
             Converts a 24-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The output byte array.</returns>
            </member>
        <member name="M:FM.Binary.ToBytes24(System.Int32,System.Boolean,System.Byte[],System.Int32)">
             <summary>
             Writes a 24-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <param name="output">The output byte array.</param>
             <param name="outputIndex">The index to start writing.</param>
            </member>
        <member name="M:FM.Binary.ToBytes32(System.Int64,System.Boolean)">
             <summary>
             Converts a 32-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The output byte array.</returns>
            </member>
        <member name="M:FM.Binary.ToBytes32(System.Int64,System.Boolean,System.Byte[],System.Int32)">
             <summary>
             Writes a 32-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <param name="output">The output byte array.</param>
             <param name="outputIndex">The index to start writing.</param>
            </member>
        <member name="M:FM.Binary.ToBytes40(System.Int64,System.Boolean)">
             <summary>
             Converts a 40-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The output byte array.</returns>
            </member>
        <member name="M:FM.Binary.ToBytes40(System.Int64,System.Boolean,System.Byte[],System.Int32)">
             <summary>
             Writes a 40-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <param name="output">The output byte array.</param>
             <param name="outputIndex">The index to start writing.</param>
            </member>
        <member name="M:FM.Binary.ToBytes48(System.Int64,System.Boolean)">
             <summary>
             Converts a 48-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The output byte array.</returns>
            </member>
        <member name="M:FM.Binary.ToBytes48(System.Int64,System.Boolean,System.Byte[],System.Int32)">
             <summary>
             Writes a 48-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <param name="output">The output byte array.</param>
             <param name="outputIndex">The index to start writing.</param>
            </member>
        <member name="M:FM.Binary.ToBytes56(System.Int64,System.Boolean)">
             <summary>
             Converts a 56-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The output byte array.</returns>
            </member>
        <member name="M:FM.Binary.ToBytes56(System.Int64,System.Boolean,System.Byte[],System.Int32)">
             <summary>
             Writes a 56-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <param name="output">The output byte array.</param>
             <param name="outputIndex">The index to start writing.</param>
            </member>
        <member name="M:FM.Binary.ToBytes64(System.Int64,System.Boolean)">
             <summary>
             Converts a 64-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The output byte array.</returns>
            </member>
        <member name="M:FM.Binary.ToBytes64(System.Int64,System.Boolean,System.Byte[],System.Int32)">
             <summary>
             Writes a 64-bit value to a byte array.
             </summary>
             <param name="value">The value to write.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <param name="output">The output byte array.</param>
             <param name="outputIndex">The index to start writing.</param>
            </member>
        <member name="M:FM.Binary.FromBytes16(System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Reads a 16-bit value from a byte array.
             </summary>
             <param name="input">The input byte array.</param>
             <param name="inputIndex">The index to start reading.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The value.</returns>
            </member>
        <member name="M:FM.Binary.FromBytes24(System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Reads a 24-bit value from a byte array.
             </summary>
             <param name="input">The input byte array.</param>
             <param name="inputIndex">The index to start reading.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The value.</returns>
            </member>
        <member name="M:FM.Binary.FromBytes32(System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Reads a 32-bit value from a byte array.
             </summary>
             <param name="input">The input byte array.</param>
             <param name="inputIndex">The index to start reading.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The value.</returns>
            </member>
        <member name="M:FM.Binary.FromBytes40(System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Reads a 40-bit value from a byte array.
             </summary>
             <param name="input">The input byte array.</param>
             <param name="inputIndex">The index to start reading.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The value.</returns>
            </member>
        <member name="M:FM.Binary.FromBytes48(System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Reads a 48-bit value from a byte array.
             </summary>
             <param name="input">The input byte array.</param>
             <param name="inputIndex">The index to start reading.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The value.</returns>
            </member>
        <member name="M:FM.Binary.FromBytes56(System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Reads a 56-bit value from a byte array.
             </summary>
             <param name="input">The input byte array.</param>
             <param name="inputIndex">The index to start reading.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The value.</returns>
            </member>
        <member name="M:FM.Binary.FromBytes64(System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Reads a 64-bit value from a byte array.
             </summary>
             <param name="input">The input byte array.</param>
             <param name="inputIndex">The index to start reading.</param>
             <param name="littleEndian">Whether to use little-endian format.</param>
             <returns>The value.</returns>
            </member>
        <member name="M:FM.Binary.Interleave(System.Byte[],System.Byte[])">
             <summary>
             Interleaves a byte array i.e.
             XXXXYYYY -&gt; XYXYXYXY
             </summary>
             <param name="inputFrame"></param>
             <param name="outputFrame"></param>
            </member>
        <member name="M:FM.Binary.Interleave(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Interleaves a byte array i.e.
             XXXXYYYY -&gt; XYXYXYXY
             </summary>
             <param name="inputFrame"></param>
             <param name="inputStart"></param>
             <param name="outputFrame"></param>
             <param name="outputStart"></param>
             <param name="inputLength"></param>
            </member>
        <member name="M:FM.Binary.Interleave(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Interleaves a byte array  i.e.
             XXXXYYYY -&gt; XYXYXYXY
             </summary>
             <param name="inputFrame"></param>
             <param name="inputStart"></param>
             <param name="outputFrame"></param>
             <param name="outputStart"></param>
             <param name="inputLength"></param>
             <param name="reversePlanes">XXXXYYYY -&gt; YXYXYXYX</param>
            </member>
        <member name="M:FM.Binary.InterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Interleave and transform (rotate) a byte array containing two planes
             </summary>
             <param name="inputFrame"></param>
             <param name="outputFrame"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="stride"></param>
             <param name="rotation">Values 0, 90, 180, 270.</param>
            </member>
        <member name="M:FM.Binary.InterleaveTransform(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Interleave and transform (rotate) a byte array containing two planes
             </summary>
             <param name="inputFrame"></param>
             <param name="inputStart"></param>
             <param name="outputFrame"></param>
             <param name="outputStart"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="stride"></param>
             <param name="rotation">Values 0, 90, 180, 270.</param>
            </member>
        <member name="M:FM.Binary.InterleaveTransform(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Interleave and transform (rotate) a byte array containing two planes
             </summary>
             <param name="inputFrame"></param>
             <param name="inputStart"></param>
             <param name="outputFrame"></param>
             <param name="outputStart"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="stride"></param>
             <param name="rotation">Values 0, 90, 180, 270.</param>
             <param name="reversePlanes">Reverse output plane order.</param>
            </member>
        <member name="M:FM.Binary.Deinterleave(System.Byte[],System.Byte[])">
             <summary>
             Deinterleaves a byte array i.e.
             XYXYXYXY -&gt; XXXXYYYY
             </summary>
             <param name="inputFrame"></param>
             <param name="outputFrame"></param>
            </member>
        <member name="M:FM.Binary.Deinterleave(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Deinterleaves a byte array i.e.
             XYXYXYXY -&gt; XXXXYYYY
             </summary>
             <param name="inputFrame"></param>
             <param name="outputFrame"></param>
             <param name="inputLength"></param>
            </member>
        <member name="M:FM.Binary.Deinterleave(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
             <summary>
             Deinterleaves a byte array 
             </summary>
             <param name="inputFrame"></param>
             <param name="inputStart"></param>
             <param name="outputFrame"></param>
             <param name="outputStart"></param>
             <param name="length"></param>
             <param name="reversePlanes"></param>
            </member>
        <member name="M:FM.Binary.DeinterleaveTransform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Deinterleave and transform (rotate) a byte array containing two planes
             </summary>
             <param name="inputFrame"></param>
             <param name="outputFrame"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="stride"></param>
             <param name="rotation">Values 0, 90, 180, 270.</param>
            </member>
        <member name="M:FM.Binary.DeinterleaveTransform(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Deinterleave and transform (rotate) a byte array containing two planes
             </summary>
             <param name="inputFrame"></param>
             <param name="inputStart"></param>
             <param name="outputFrame"></param>
             <param name="outputStart"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="stride"></param>
             <param name="rotation">Values 0, 90, 180, 270.</param>
             <param name="reversePlanes">Reverse output plane order.</param>
            </member>
        <member name="M:FM.Binary.Transform(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Transforms a byte containing a 2D plane (rotates 90, 180, 270)
             </summary>
             <param name="inputFrame"></param>
             <param name="outputFrame"></param>
             <param name="rotation"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="stride"></param>
            </member>
        <member name="M:FM.Binary.Transform(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Transforms a byte containing a 2D plane (rotates 90, 180, 270)
             </summary>
             <param name="inputFrame"></param>
             <param name="inputStart"></param>
             <param name="outputFrame"></param>
             <param name="outputStart"></param>
             <param name="rotation"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="stride"></param>
            </member>
        <member name="M:FM.Binary.Transform(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Transforms a byte containing a 2D plane (rotates 90, 180, 270).
             When transforming interleaved planes. Set the chunkLength to 
             the number of planes.
             </summary>
             <param name="inputFrame"></param>
             <param name="inputStart"></param>
             <param name="outputFrame"></param>
             <param name="outputStart"></param>
             <param name="rotation"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="stride"></param>
             <param name="chunkLength"></param>
            </member>
        <member name="M:FM.Binary.Test">
             <summary>
             Tests the binary implementation.
             </summary>
            </member>
        <member name="T:FM.ByteCollection">
             <summary>
             A collection of bytes.
             </summary>
            </member>
        <member name="P:FM.ByteCollection.Count">
             <summary>
             Gets the number of bytes in the collection.
             </summary>
            </member>
        <member name="M:FM.ByteCollection.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ByteCollection" /> class.
             </summary>
            </member>
        <member name="M:FM.ByteCollection.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ByteCollection" /> class.
             </summary>
             <param name="buffer">The bytes to use as initial data.</param>
            </member>
        <member name="M:FM.ByteCollection.Add(System.Byte)">
             <summary>
             Adds a byte to the collection.
             </summary>
             <param name="b">The byte to add.</param>
            </member>
        <member name="M:FM.ByteCollection.AddRange(System.Byte[])">
             <summary>
             Adds a range of bytes to the collection.
             </summary>
             <param name="buffer">The range of bytes to add.</param>
            </member>
        <member name="M:FM.ByteCollection.AddRange(FM.ByteCollection)">
             <summary>
             Adds a byte collection to this collection.
             </summary>
             <param name="collection">The byte collection to add.</param>
            </member>
        <member name="M:FM.ByteCollection.RemoveRange(System.Int32,System.Int32)">
             <summary>
             Removes a range of bytes from the collection.
             </summary>
             <param name="index">The index to start removing.</param>
             <param name="count">The number of bytes to remove.</param>
            </member>
        <member name="M:FM.ByteCollection.InsertRange(System.Int32,System.Byte[])">
             <summary>
             Inserts a range of bytes into the collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="buffer">The range of bytes to insert.</param>
            </member>
        <member name="M:FM.ByteCollection.InsertRange(System.Int32,FM.ByteCollection)">
             <summary>
             Inserts a byte collection into this collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="collection">The byte collection to insert.</param>
            </member>
        <member name="M:FM.ByteCollection.GetRange(System.Int32,System.Int32)">
             <summary>
             Gets a range of bytes from the collection.
             </summary>
             <param name="index">The index to start getting.</param>
             <param name="count">The number of bytes to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.ByteCollection.Get(System.Int32)">
             <summary>
             Gets a byte from the collection.
             </summary>
             <param name="index">The index to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.ByteCollection.ToArray">
             <summary>
             Converts this collection to an array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.ByteHolder">
             <summary>
             Class to hold a byte value passed by reference.
             </summary>
            </member>
        <member name="P:FM.ByteHolder.Value">
             <summary>
             Gets or sets the value.
             </summary>
            </member>
        <member name="M:FM.ByteHolder.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ByteHolder" /> class.
             </summary>
            </member>
        <member name="M:FM.ByteHolder.#ctor(System.Byte)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ByteHolder" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.ByteInputStream">
             <summary>
             An buffer of bytes that can be read sequentially.
             </summary>
            </member>
        <member name="M:FM.ByteInputStream.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ByteInputStream" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.ByteInputStream.#ctor(System.Byte[],System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ByteInputStream" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="P:FM.ByteInputStream.Available">
             <summary>
             Gets the number of available bytes for reading.
             </summary>
            </member>
        <member name="M:FM.ByteInputStream.Mark">
             <summary>
             Marks the current position for a later reset.
             </summary>
            </member>
        <member name="M:FM.ByteInputStream.Read">
             <summary>
             Reads a value from the byte array.
             </summary>
             <returns>The byte, or -1 if no more bytes are available for reading.</returns>
            </member>
        <member name="M:FM.ByteInputStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Reads a segment from the byte array.
             </summary>
             <returns>The number of bytes read.</returns>
            </member>
        <member name="M:FM.ByteInputStream.Reset">
             <summary>
             Resets the stream to the marked position.
             </summary>
            </member>
        <member name="M:FM.ByteInputStream.Skip(System.Int32)">
             <summary>
             Advances the stream position by the amount specified.
             </summary>
             <param name="n">The number of bytes to skip.</param>
             <returns>The number of bytes skipped.</returns>
            </member>
        <member name="T:FM.CallbackState">
             <summary>
             A wrapper for a callback and state object.
             </summary>
            </member>
        <member name="P:FM.CallbackState.Callback">
             <summary>
             Gets or sets the callback.
             </summary>
            </member>
        <member name="P:FM.CallbackState.State">
             <summary>
             Gets or sets the state.
             </summary>
            </member>
        <member name="M:FM.CallbackState.Execute">
             <summary>
             Executes the callback, passing in the state as a parameter.
             </summary>
            </member>
        <member name="M:FM.CallbackState.#ctor(FM.SingleAction{System.Object},System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.CallbackState" /> class.
             </summary>
             <param name="callback">The callback.</param>
             <param name="state">The state.</param>
            </member>
        <member name="T:FM.Action3`3">
             <summary>
             Generic method signature for callbacks with three parameters.
             </summary>
            </member>
        <member name="T:FM.Action4`4">
             <summary>
             Generic method signature for callbacks with four parameters.
             </summary>
            </member>
        <member name="T:FM.Action5`5">
             <summary>
             Generic method signature for callbacks with five parameters.
             </summary>
            </member>
        <member name="T:FM.Action6`6">
             <summary>
             Generic method signature for callbacks with six parameters.
             </summary>
            </member>
        <member name="T:FM.Function3`4">
             <summary>
             Generic method signature for callbacks with three parameters and a return value.
             </summary>
            </member>
        <member name="T:FM.Function4`5">
             <summary>
             Generic method signature for callbacks with four parameters and a return value.
             </summary>
            </member>
        <member name="T:FM.Function5`6">
             <summary>
             Generic method signature for callbacks with five parameters and a return value.
             </summary>
            </member>
        <member name="T:FM.Function6`7">
             <summary>
             Generic method signature for callbacks with six parameters and a return value.
             </summary>
            </member>
        <member name="T:FM.CharacterHolder">
             <summary>
             Class to hold a character value passed by reference.
             </summary>
            </member>
        <member name="P:FM.CharacterHolder.Value">
             <summary>
             Gets or sets the value.
             </summary>
            </member>
        <member name="M:FM.CharacterHolder.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.CharacterHolder" /> class.
             </summary>
            </member>
        <member name="M:FM.CharacterHolder.#ctor(System.Char)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.CharacterHolder" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.ConsoleLogProvider">
             <summary>
             Log provider that writes output to the Console.
             </summary>
            </member>
        <member name="M:FM.ConsoleLogProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ConsoleLogProvider" /> class using <see cref="F:FM.LogLevel.Warn" />.
             </summary>
            </member>
        <member name="M:FM.ConsoleLogProvider.#ctor(FM.LogLevel)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ConsoleLogProvider" /> class.
             </summary>
             <param name="level">The log level.</param>
            </member>
        <member name="M:FM.ConsoleLogProvider.WriteLine(System.String)">
             <summary>
             Writes a line of text to the log.
             </summary>
             <param name="text">The text to write to the log.</param>
            </member>
        <member name="M:FM.ConsoleLogProvider.Log(FM.LogLevel,System.String,System.Exception)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.ConsoleLogProvider.Log(FM.LogLevel,System.String)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.ByteOutputStream">
             <summary>
             An buffer of bytes that can be written sequentially.
             </summary>
            </member>
        <member name="M:FM.ByteOutputStream.Reset">
             <summary>
             Empties this stream and resets it.
             </summary>
            </member>
        <member name="P:FM.ByteOutputStream.Size">
             <summary>
             Gets the number of bytes written to the stream.
             </summary>
            </member>
        <member name="M:FM.ByteOutputStream.ToArray">
             <summary>
             Converts the stream to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.ByteOutputStream.WriteBuffer(System.Byte[])">
             <summary>
             Writes a buffer to the stream.
             </summary>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.ByteOutputStream.WriteBuffer(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Writes a buffer to the stream.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="length">The length.</param>
            </member>
        <member name="M:FM.ByteOutputStream.Write(System.Byte)">
             <summary>
             Writes a value to the stream.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.ByteOutputStream.WriteTo(FM.ByteOutputStream)">
             <summary>
             Writes the contents of this stream to another stream.
             </summary>
             <param name="stream">The stream.</param>
            </member>
        <member name="T:FM.BooleanHolder">
             <summary>
             Class to hold a boolean value passed by reference.
             </summary>
            </member>
        <member name="P:FM.BooleanHolder.Value">
             <summary>
             Gets or sets the value.
             </summary>
            </member>
        <member name="M:FM.BooleanHolder.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.BooleanHolder" /> class.
             </summary>
            </member>
        <member name="M:FM.BooleanHolder.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.BooleanHolder" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.BooleanCollection">
             <summary>
             A collection of booleans.
             </summary>
            </member>
        <member name="P:FM.BooleanCollection.Count">
             <summary>
             Gets the number of booleans in the collection.
             </summary>
            </member>
        <member name="M:FM.BooleanCollection.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.BooleanCollection" /> class.
             </summary>
            </member>
        <member name="M:FM.BooleanCollection.#ctor(System.Boolean[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.BooleanCollection" /> class.
             </summary>
             <param name="buffer">The booleans to use as initial data.</param>
            </member>
        <member name="M:FM.BooleanCollection.Add(System.Boolean)">
             <summary>
             Adds a boolean to the collection.
             </summary>
             <param name="b">The boolean to add.</param>
            </member>
        <member name="M:FM.BooleanCollection.AddRange(System.Boolean[])">
             <summary>
             Adds a range of booleans to the collection.
             </summary>
             <param name="buffer">The range of booleans to add.</param>
            </member>
        <member name="M:FM.BooleanCollection.AddRange(FM.BooleanCollection)">
             <summary>
             Adds a boolean collection to this collection.
             </summary>
             <param name="collection">The boolean collection to add.</param>
            </member>
        <member name="M:FM.BooleanCollection.RemoveRange(System.Int32,System.Int32)">
             <summary>
             Removes a range of booleans from the collection.
             </summary>
             <param name="index">The index to start removing.</param>
             <param name="count">The number of booleans to remove.</param>
            </member>
        <member name="M:FM.BooleanCollection.InsertRange(System.Int32,System.Boolean[])">
             <summary>
             Inserts a range of booleans into the collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="buffer">The range of booleans to insert.</param>
            </member>
        <member name="M:FM.BooleanCollection.InsertRange(System.Int32,FM.BooleanCollection)">
             <summary>
             Inserts a boolean collection into this collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="collection">The boolean collection to insert.</param>
            </member>
        <member name="M:FM.BooleanCollection.GetRange(System.Int32,System.Int32)">
             <summary>
             Gets a range of booleans from the collection.
             </summary>
             <param name="index">The index to start getting.</param>
             <param name="count">The number of booleans to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BooleanCollection.Get(System.Int32)">
             <summary>
             Gets a boolean from the collection.
             </summary>
             <param name="index">The index to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BooleanCollection.ToArray">
             <summary>
             Converts this collection to an array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.CharacterCollection">
             <summary>
             A collection of characters.
             </summary>
            </member>
        <member name="P:FM.CharacterCollection.Count">
             <summary>
             Gets the number of characters in the collection.
             </summary>
            </member>
        <member name="M:FM.CharacterCollection.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.CharacterCollection" /> class.
             </summary>
            </member>
        <member name="M:FM.CharacterCollection.#ctor(System.Char[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.CharacterCollection" /> class.
             </summary>
             <param name="buffer">The characters to use as initial data.</param>
            </member>
        <member name="M:FM.CharacterCollection.Add(System.Char)">
             <summary>
             Adds a character to the collection.
             </summary>
             <param name="b">The character to add.</param>
            </member>
        <member name="M:FM.CharacterCollection.AddRange(System.Char[])">
             <summary>
             Adds a range of characters to the collection.
             </summary>
             <param name="buffer">The range of characters to add.</param>
            </member>
        <member name="M:FM.CharacterCollection.AddRange(FM.CharacterCollection)">
             <summary>
             Adds a character collection to this collection.
             </summary>
             <param name="collection">The character collection to add.</param>
            </member>
        <member name="M:FM.CharacterCollection.RemoveRange(System.Int32,System.Int32)">
             <summary>
             Removes a range of characters from the collection.
             </summary>
             <param name="index">The index to start removing.</param>
             <param name="count">The number of characters to remove.</param>
            </member>
        <member name="M:FM.CharacterCollection.InsertRange(System.Int32,System.Char[])">
             <summary>
             Inserts a range of characters into the collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="buffer">The range of characters to insert.</param>
            </member>
        <member name="M:FM.CharacterCollection.InsertRange(System.Int32,FM.CharacterCollection)">
             <summary>
             Inserts a character collection into this collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="collection">The character collection to insert.</param>
            </member>
        <member name="M:FM.CharacterCollection.GetRange(System.Int32,System.Int32)">
             <summary>
             Gets a range of characters from the collection.
             </summary>
             <param name="index">The index to start getting.</param>
             <param name="count">The number of characters to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.CharacterCollection.Get(System.Int32)">
             <summary>
             Gets a character from the collection.
             </summary>
             <param name="index">The index to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.CharacterCollection.ToArray">
             <summary>
             Converts this collection to an array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.BooleanMap">
             <summary>
             A map of strings to booleans.
             </summary>
            </member>
        <member name="T:FM.ByteMap">
             <summary>
             A map of strings to bytes.
             </summary>
            </member>
        <member name="T:FM.CharacterMap">
             <summary>
             A map of strings to characters.
             </summary>
            </member>
        <member name="T:FM.Crypto">
             <summary>
             Cryptographic functions used by WebSync.
             </summary>
            </member>
        <member name="M:FM.Crypto.Sha1Hash(System.String)">
             <summary>
             Computes the SHA-1 hash of a given string.
             </summary>
             <param name="s">The input string.</param>
             <returns>The SHA-1 hash.</returns>
            </member>
        <member name="M:FM.Crypto.Base64Encode(System.Byte[])">
             <summary>
             Computes the base-64 representation of a byte array.
             </summary>
             <param name="b">The input byte array.</param>
             <returns>The base-64 string.</returns>
            </member>
        <member name="M:FM.Crypto.Base64Decode(System.String)">
             <summary>
             Computes the byte representation of a base-64 string.
             </summary>
             <param name="s">The input base-64 string.</param>
             <returns>The byte array.</returns>
            </member>
        <member name="M:FM.Crypto.TryBase64Encode(System.Byte[],System.String@)">
             <summary>
             Computes the base-64 representation of a byte array.
             </summary>
             <param name="b">The input byte array.</param>
             <param name="encoded">The base-64 string.</param>
             <returns><c>true</c> if the encode succeeds; otherwise <c>false</c></returns>
            </member>
        <member name="M:FM.Crypto.TryBase64Decode(System.String,System.Byte[]@)">
             <summary>
             Computes the byte representation of a base-64 string.
             </summary>
             <param name="s">The input base-64 string.</param>
             <param name="decoded">The byte array.</param>
             <returns><c>true</c> if the decode succeeds; otherwise <c>false</c></returns>
            </member>
        <member name="T:FM.Dns">
             <summary>
             DNS utility methods.
             </summary>
            </member>
        <member name="M:FM.Dns.Resolve(System.String,FM.DoubleAction{System.String[],System.Object},System.Object)">
             <summary>
             Resolves a host name to an IP address.
             </summary>
             <param name="name">The name to resolve.</param>
             <param name="callback">The callback to invoke when resolution is complete.</param>
             <param name="state">A custom state object to pass into the callback.</param>
            </member>
        <member name="T:FM.DnsRequest">
             <summary>
             A DNS request.
             </summary>
            </member>
        <member name="P:FM.DnsRequest.Name">
             <summary>
             Gets or sets the name.
             </summary>
            </member>
        <member name="P:FM.DnsRequest.Callback">
             <summary>
             Gets or sets the callback.
             </summary>
            </member>
        <member name="P:FM.DnsRequest.State">
             <summary>
             Gets or sets the state.
             </summary>
            </member>
        <member name="M:FM.DnsRequest.#ctor(System.String,FM.DoubleAction{System.String[],System.Object},System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.DnsRequest" /> class.
             </summary>
             <param name="name">The name.</param>
             <param name="callback">The callback.</param>
             <param name="state">The state.</param>
            </member>
        <member name="M:FM.DnsRequest.Resolve">
             <summary>
             Resolves <see cref="P:FM.DnsRequest.Name" />, executing <see cref="P:FM.DnsRequest.Callback" /> when complete.
             </summary>
            </member>
        <member name="T:FM.ManagedCondition">
             <summary>
             A managed condition.
             </summary>
            </member>
        <member name="M:FM.ManagedCondition.Halt">
             <summary>
             Releases the lock on an object and blocks the current thread until it reacquires the lock.
             </summary>
            </member>
        <member name="M:FM.ManagedCondition.Halt(System.Int32)">
             <summary>
             Releases the lock on an object and blocks the current thread until it reacquires the lock.
             </summary>
             <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue.</param>
            </member>
        <member name="M:FM.ManagedCondition.Pulse">
             <summary>
             Notifies a thread in the waiting queue of a change in the locked object's state.
             </summary>
            </member>
        <member name="M:FM.ManagedCondition.PulseAll">
             <summary>
             Notifies all waiting threads of a change in the object's state.
             </summary>
            </member>
        <member name="T:FM.ManagedLock">
             <summary>
             A managed lock.
             </summary>
            </member>
        <member name="M:FM.ManagedLock.Lock">
             <summary>
             Acquires an exclusive lock.
             </summary>
            </member>
        <member name="M:FM.ManagedLock.Unlock">
             <summary>
             Releases an exclusive lock.
             </summary>
            </member>
        <member name="T:FM.WebSocketTransfer">
             <summary>
             Base class that defines methods for transferring content over the WebSocket protocol.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransfer.Url">
             <summary>
             Gets or sets the URL.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransfer.HandshakeTimeout">
             <summary>
             Gets or sets the timeout for the initial handshake.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransfer.StreamTimeout">
             <summary>
             Gets or sets the timeout for the stream.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransfer.Sender">
             <summary>
             Gets or sets the sender of the messages.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransfer.OnRequestCreated">
             <summary>
             Gets or sets the callback to invoke when the handshake request is created.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransfer.OnResponseReceived">
             <summary>
             Gets or sets the callback to invoke when the handshake response is received.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransfer.OnOpenSuccess">
             <summary>
             Gets or sets the callback to invoke if the handshake succeeds.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransfer.OnOpenFailure">
             <summary>
             Gets or sets the callback to invoke if the handshake fails.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransfer.OnStreamFailure">
             <summary>
             Gets or sets the callback to invoke if the stream errors out.
             </summary>
            </member>
        <member name="M:FM.WebSocketTransfer.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.WebSocketTransfer" /> class.
             </summary>
             <param name="url">The URL.</param>
            </member>
        <member name="M:FM.WebSocketTransfer.Open(System.Collections.Specialized.NameValueCollection)">
             <summary>
             Opens the socket.
             </summary>
             <param name="headers">The headers to pass in with the initial handshake.</param>
            </member>
        <member name="M:FM.WebSocketTransfer.Send(FM.HttpRequestArgs)">
             <summary>
             Sends a request synchronously.
             </summary>
             <param name="requestArgs">The request parameters.</param>
             <returns>The response parameters.</returns>
            </member>
        <member name="M:FM.WebSocketTransfer.SendAsync(FM.HttpRequestArgs,FM.SingleAction{FM.HttpResponseArgs})">
             <summary>
             Sends a request asynchronously.
             </summary>
             <param name="requestArgs">The request parameters.</param>
             <param name="callback">The callback to execute with the resulting response.</param>
            </member>
        <member name="M:FM.WebSocketTransfer.Shutdown">
             <summary>
             Releases any resources and shuts down.
             </summary>
            </member>
        <member name="T:FM.WebSocketTransferFactory">
             <summary>
             Creates implementations of <see cref="T:FM.WebSocketWebRequestTransfer" />.
             </summary>
            </member>
        <member name="P:FM.WebSocketTransferFactory.CreateWebSocketTransfer">
             <summary>
             Gets or sets the callback that creates a WebSocket-based transfer class.
             </summary>
            </member>
        <member name="M:FM.WebSocketTransferFactory.GetWebSocketTransfer(System.String)">
             <summary>
             Gets an instance of the WebSocket-based transfer class.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.LittleEndianBuffer">
             <summary>
             Writes little-endian data to a buffer. 
             </summary>
            </member>
        <member name="M:FM.LittleEndianBuffer.ToBytes8(System.Int32)">
             <summary>
             Converts an integer to it's 8-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ToBytes16(System.Int32)">
             <summary>
             Converts an integer to it's 16-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ToBytes24(System.Int32)">
             <summary>
             Converts an integer to it's 24-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ToBytes32(System.Int64)">
             <summary>
             Converts an integer to it's 32-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ToBytes40(System.Int64)">
             <summary>
             Converts an integer to it's 40-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ToBytes48(System.Int64)">
             <summary>
             Converts an integer to it's 48-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ToBytes56(System.Int64)">
             <summary>
             Converts an integer to it's 56-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ToBytes64(System.Int64)">
             <summary>
             Converts an integer to it's 64-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromData8(System.Byte[],System.Int32)">
             <summary>
             Converts an 8-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromData16(System.Byte[],System.Int32)">
             <summary>
             Converts a 16-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromData24(System.Byte[],System.Int32)">
             <summary>
             Converts a 24-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromData32(System.Byte[],System.Int32)">
             <summary>
             Converts a 32-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromData40(System.Byte[],System.Int32)">
             <summary>
             Converts a 40-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromData48(System.Byte[],System.Int32)">
             <summary>
             Converts a 48-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromData56(System.Byte[],System.Int32)">
             <summary>
             Converts a 56-bit network representation to an integer.
             </summary>
             <param name="data">data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromData64(System.Byte[],System.Int32)">
             <summary>
             Converts a 64-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromBuffer8(FM.ByteCollection,System.Int32)">
             <summary>
             Converts an 8-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromBuffer16(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 16-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromBuffer24(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 24-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromBuffer32(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 32-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromBuffer40(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 40-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromBuffer48(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 48-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromBuffer56(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 56-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromBuffer64(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 64-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromStream8(FM.ByteInputStream)">
             <summary>
             Converts an 8-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromStream16(FM.ByteInputStream)">
             <summary>
             Converts a 16-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromStream24(FM.ByteInputStream)">
             <summary>
             Converts a 24-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromStream32(FM.ByteInputStream)">
             <summary>
             Converts a 32-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromStream40(FM.ByteInputStream)">
             <summary>
             Converts a 40-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromStream48(FM.ByteInputStream)">
             <summary>
             Converts a 48-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromStream56(FM.ByteInputStream)">
             <summary>
             Converts a 56-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.FromStream64(FM.ByteInputStream)">
             <summary>
             Converts a 64-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="valueIndex">The index within the value.</param>
             <param name="valueLength">The length of the value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData8(System.Int32,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies an 8-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData16(System.Int32,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 16-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData24(System.Int32,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 24-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData32(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 32-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData40(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 40-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData48(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 48-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData56(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 56-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData64(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 64-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque8(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies an 8-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque16(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 16-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque24(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 24-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque32(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 32-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque40(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 40-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque48(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 48-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque56(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 56-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque64(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 64-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             <summary>
             Copies a value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="valueIndex">The index within the value.</param>
             <param name="valueLength">The length of the value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData8(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Copies an 8-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData16(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Copies a 16-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData24(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Copies a 24-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData32(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 32-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData40(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 40-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData48(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 48-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData56(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 56-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteData64(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 64-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque8(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies an 8-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque16(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 16-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque24(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 24-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque32(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 32-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque40(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 40-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque48(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 48-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque56(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 56-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteDataOpaque64(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 64-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBuffer(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBuffer8(System.Int32,FM.ByteCollection)">
             <summary>
             Adds an 8-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBuffer16(System.Int32,FM.ByteCollection)">
             <summary>
             Adds a 16-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBuffer24(System.Int32,FM.ByteCollection)">
             <summary>
             Adds a 24-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBuffer32(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 32-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBuffer40(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 40-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBuffer48(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 48-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBuffer56(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 56-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBuffer64(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 64-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBufferOpaque8(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds an 8-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBufferOpaque16(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 16-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBufferOpaque24(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 24-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBufferOpaque32(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 32-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBufferOpaque40(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 40-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBufferOpaque48(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 48-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBufferOpaque56(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 56-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteBufferOpaque64(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 64-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStream(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStream8(System.Int32,FM.ByteOutputStream)">
             <summary>
             Adds an 8-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStream16(System.Int32,FM.ByteOutputStream)">
             <summary>
             Adds a 16-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStream24(System.Int32,FM.ByteOutputStream)">
             <summary>
             Adds a 24-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStream32(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 32-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStream40(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 40-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStream48(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 48-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStream56(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 56-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStream64(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 64-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStreamOpaque8(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds an 8-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStreamOpaque16(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 16-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStreamOpaque24(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 24-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStreamOpaque32(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 32-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStreamOpaque40(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 40-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStreamOpaque48(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 48-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStreamOpaque56(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 56-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.WriteStreamOpaque64(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 64-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData(System.Int32,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a value from a buffer.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData8(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads an 8-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData16(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 16-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData24(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 24-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData32(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 32-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData40(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 40-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData48(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 48-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData56(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 56-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData64(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 64-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadDataOpaque8(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads an 8-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadDataOpaque16(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 16-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadDataOpaque24(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 24-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadDataOpaque32(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 32-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Reads a value from a buffer.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData8(System.Byte[],System.Int32)">
             <summary>
             Reads an 8-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData16(System.Byte[],System.Int32)">
             <summary>
             Reads a 16-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData24(System.Byte[],System.Int32)">
             <summary>
             Reads a 24-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData32(System.Byte[],System.Int32)">
             <summary>
             Reads a 32-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData40(System.Byte[],System.Int32)">
             <summary>
             Reads a 40-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData48(System.Byte[],System.Int32)">
             <summary>
             Reads a 48-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData56(System.Byte[],System.Int32)">
             <summary>
             Reads a 56-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadData64(System.Byte[],System.Int32)">
             <summary>
             Reads a 64-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadDataOpaque8(System.Byte[],System.Int32)">
             <summary>
             Reads an 8-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadDataOpaque16(System.Byte[],System.Int32)">
             <summary>
             Reads a 16-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadDataOpaque24(System.Byte[],System.Int32)">
             <summary>
             Reads a 24-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadDataOpaque32(System.Byte[],System.Int32)">
             <summary>
             Reads a 32-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer(System.Int32,FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a value from a buffer.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer8(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads an 8-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer16(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 16-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer24(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 24-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer32(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 32-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer40(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 40-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer48(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 48-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer56(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 56-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer64(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 64-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBufferOpaque8(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads an 8-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBufferOpaque16(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 16-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBufferOpaque24(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 24-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBufferOpaque32(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 32-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer(System.Int32,FM.ByteCollection,System.Int32)">
             <summary>
             Reads a value from a buffer.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer8(FM.ByteCollection,System.Int32)">
             <summary>
             Reads an 8-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer16(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 16-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer24(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 24-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer32(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 32-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer40(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 40-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer48(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 48-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer56(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 56-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBuffer64(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 64-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBufferOpaque8(FM.ByteCollection,System.Int32)">
             <summary>
             Reads an 8-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBufferOpaque16(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 16-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBufferOpaque24(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 24-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadBufferOpaque32(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 32-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStream(System.Int32,FM.ByteInputStream)">
             <summary>
             Reads a value from a stream.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStream8(FM.ByteInputStream)">
             <summary>
             Reads an 8-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStream16(FM.ByteInputStream)">
             <summary>
             Reads a 16-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStream24(FM.ByteInputStream)">
             <summary>
             Reads a 24-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStream32(FM.ByteInputStream)">
             <summary>
             Reads a 32-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStream40(FM.ByteInputStream)">
             <summary>
             Reads a 40-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStream48(FM.ByteInputStream)">
             <summary>
             Reads a 48-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStream56(FM.ByteInputStream)">
             <summary>
             Reads a 56-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStream64(FM.ByteInputStream)">
             <summary>
             Reads a 64-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStreamOpaque8(FM.ByteInputStream)">
             <summary>
             Reads an 8-bit-length opaque value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStreamOpaque16(FM.ByteInputStream)">
             <summary>
             Reads a 16-bit-length opaque value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStreamOpaque24(FM.ByteInputStream)">
             <summary>
             Reads a 24-bit-length opaque value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LittleEndianBuffer.ReadStreamOpaque32(FM.ByteInputStream)">
             <summary>
             Reads a 32-bit-length opaque value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="T:FM.FileAccess">
             <summary>
             The access to use when opening a file.
             </summary>
            </member>
        <member name="F:FM.FileAccess.Read">
             <summary>
             Indicates that the file should be
             opened for read access.
             </summary>
            </member>
        <member name="F:FM.FileAccess.Write">
             <summary>
             Indicates that the file should be
             opened for write access.
             </summary>
            </member>
        <member name="T:FM.File">
             <summary>
             A class representing a file on disk.
             </summary>
            </member>
        <member name="P:FM.File.Path">
             <summary>
             Gets the path.
             </summary>
            </member>
        <member name="M:FM.File.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.File" /> class.
             </summary>
             <param name="path">The path.</param>
            </member>
        <member name="P:FM.File.Length">
             <summary>
             Gets the file length (must be opened first).
             </summary>
            </member>
        <member name="M:FM.File.Exists">
             <summary>
             Returns a boolean value indicating whether the file exists.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.File.Open(FM.FileAccess)">
             <summary>
             Opens the file.
             </summary>
             <param name="access">The access requirement.</param>
            </member>
        <member name="M:FM.File.Close">
             <summary>
             Closes the file.
             </summary>
            </member>
        <member name="M:FM.File.Flush">
             <summary>
             Flushes the file contents.
             </summary>
            </member>
        <member name="M:FM.File.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Writes data to the file.
             </summary>
             <param name="data">The data to write to the file.</param>
             <param name="index">The index at which to start reading.</param>
             <param name="length">The number of bytes to write.</param>
             <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.File.WriteTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Writes data to the file.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="data">The data to write to the file.</param>
             <param name="index">The index at which to start reading.</param>
             <param name="length">The number of bytes to write.</param>
             <returns><c>true</c> if the data was written; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.File.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Reads data from the file.
             </summary>
             <param name="data">The buffer to fill with data from the file.</param>
             <param name="index">The index at which to start writing.</param>
             <param name="length">The maximum number of bytes to read.</param>
             <returns>The number of bytes read from the file.</returns>
            </member>
        <member name="T:FM.FileStream">
             <summary>
             A utility class for reading/writing from/to a <see cref="T:FM.File" />.
             </summary>
            </member>
        <member name="P:FM.FileStream.File">
             <summary>
             Gets the file.
             </summary>
            </member>
        <member name="P:FM.FileStream.LittleEndian">
             <summary>
             Gets or sets whether to read/write using little-endian ordering.
             </summary>
            </member>
        <member name="M:FM.FileStream.#ctor(FM.File)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.FileStream" /> class.
             </summary>
             <param name="file">The file.</param>
            </member>
        <member name="M:FM.FileStream.Write(System.Byte[])">
             <summary>
             Adds a value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write8(System.Int32)">
             <summary>
             Adds an 8-bit value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write16(System.Int32)">
             <summary>
             Adds a 16-bit value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write24(System.Int32)">
             <summary>
             Adds a 24-bit value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write32(System.Int64)">
             <summary>
             Adds a 32-bit value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write40(System.Int64)">
             <summary>
             Adds a 40-bit value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write48(System.Int64)">
             <summary>
             Adds a 48-bit value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write56(System.Int64)">
             <summary>
             Adds a 56-bit value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write64(System.Int64)">
             <summary>
             Adds a 64-bit value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque8(System.Byte[])">
             <summary>
             Adds an 8-bit-length opaque value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque16(System.Byte[])">
             <summary>
             Adds a 16-bit-length opaque value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque24(System.Byte[])">
             <summary>
             Adds a 24-bit-length opaque value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque32(System.Byte[])">
             <summary>
             Adds a 32-bit-length opaque value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque40(System.Byte[])">
             <summary>
             Adds a 40-bit-length opaque value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque48(System.Byte[])">
             <summary>
             Adds a 48-bit-length opaque value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque56(System.Byte[])">
             <summary>
             Adds a 56-bit-length opaque value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque64(System.Byte[])">
             <summary>
             Adds a 64-bit-length opaque value to a File.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Read(System.Int32)">
             <summary>
             Reads a value from a File.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.Read8">
             <summary>
             Converts an 8-bit network representation to an integer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.Read16">
             <summary>
             Converts a 16-bit network representation to an integer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.Read24">
             <summary>
             Converts a 24-bit network representation to an integer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.Read32">
             <summary>
             Converts a 32-bit network representation to an integer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.Read40">
             <summary>
             Converts a 40-bit network representation to an integer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.Read48">
             <summary>
             Converts a 48-bit network representation to an integer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.Read56">
             <summary>
             Converts a 56-bit network representation to an integer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.Read64">
             <summary>
             Converts a 64-bit network representation to an integer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.ReadOpaque8">
             <summary>
             Reads an 8-bit-length opaque value from a File.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.ReadOpaque16">
             <summary>
             Reads a 16-bit-length opaque value from a File.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.ReadOpaque24">
             <summary>
             Reads a 24-bit-length opaque value from a File.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.ReadOpaque32">
             <summary>
             Reads a 32-bit-length opaque value from a File.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.FileStream.WriteTo(System.Int32,System.Byte[])">
             <summary>
             Adds a value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write8To(System.Int32,System.Int32)">
             <summary>
             Adds an 8-bit value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write16To(System.Int32,System.Int32)">
             <summary>
             Adds a 16-bit value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write24To(System.Int32,System.Int32)">
             <summary>
             Adds a 24-bit value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write32To(System.Int32,System.Int64)">
             <summary>
             Adds a 32-bit value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write40To(System.Int32,System.Int64)">
             <summary>
             Adds a 40-bit value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write48To(System.Int32,System.Int64)">
             <summary>
             Adds a 48-bit value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write56To(System.Int32,System.Int64)">
             <summary>
             Adds a 56-bit value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.Write64To(System.Int32,System.Int64)">
             <summary>
             Adds a 64-bit value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque8To(System.Int32,System.Byte[])">
             <summary>
             Adds an 8-bit-length opaque value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque16To(System.Int32,System.Byte[])">
             <summary>
             Adds a 16-bit-length opaque value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque24To(System.Int32,System.Byte[])">
             <summary>
             Adds a 24-bit-length opaque value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque32To(System.Int32,System.Byte[])">
             <summary>
             Adds a 32-bit-length opaque value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque40To(System.Int32,System.Byte[])">
             <summary>
             Adds a 40-bit-length opaque value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque48To(System.Int32,System.Byte[])">
             <summary>
             Adds a 48-bit-length opaque value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque56To(System.Int32,System.Byte[])">
             <summary>
             Adds a 56-bit-length opaque value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.FileStream.WriteOpaque64To(System.Int32,System.Byte[])">
             <summary>
             Adds a 64-bit-length opaque value to a File.
             </summary>
             <param name="location">The location to write to.</param>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.Json">
             <summary>
             JSON utility class.
             </summary>
            </member>
        <member name="P:FM.Json.Provider">
             <summary>
             Gets or sets the JSON provider to use.
             </summary>
            </member>
        <member name="M:FM.Json.Serialize``1(``0)">
             <summary>
             Serializes a value to a JSON string.
             </summary>
             <typeparam name="T">The type the value to serialize.</typeparam>
             <param name="value">The value to serialize.</param>
             <returns>The serialized JSON string.</returns>
            </member>
        <member name="M:FM.Json.Deserialize``1(System.String)">
             <summary>
             Deserializes a value from a JSON string.
             </summary>
             <typeparam name="T">The type the value to deserialize.</typeparam>
             <param name="valueJson">The JSON string to deserialize.</param>
             <returns>The deserialized value.</returns>
            </member>
        <member name="T:FM.JsonProvider">
             <summary>
             Base class for all JSON provider implementations.
             </summary>
            </member>
        <member name="M:FM.JsonProvider.Serialize``1(``0)">
             <summary>
             Serializes a value to a JSON string.
             </summary>
             <typeparam name="T">The type the value to serialize.</typeparam>
             <param name="value">The value to serialize.</param>
             <returns>The serialized JSON string.</returns>
            </member>
        <member name="M:FM.JsonProvider.Deserialize``1(System.String)">
             <summary>
             Deserializes a value from a JSON string.
             </summary>
             <typeparam name="T">The type the value to deserialize.</typeparam>
             <param name="valueJson">The JSON string to deserialize.</param>
             <returns>The deserialized value.</returns>
            </member>
        <member name="T:FM.DoubleMap">
             <summary>
             A map of strings to doubles.
             </summary>
            </member>
        <member name="T:FM.ManagedStopwatch">
             <summary>
             Managed stopwatch.
             </summary>
            </member>
        <member name="P:FM.ManagedStopwatch.Frequency">
             <summary>
             Gets the frequency (number of ticks per second).
             </summary>
            </member>
        <member name="P:FM.ManagedStopwatch.ElapsedTicks">
             <summary>
             Gets the total time measured by the stopwatch in ticks.
             </summary>
            </member>
        <member name="M:FM.ManagedStopwatch.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ManagedStopwatch" /> class.
             </summary>
            </member>
        <member name="M:FM.ManagedStopwatch.Start">
             <summary>
             Starts the stopwatch.
             </summary>
            </member>
        <member name="M:FM.ManagedStopwatch.Stop">
             <summary>
             Stops the stopwatch.
             </summary>
            </member>
        <member name="T:FM.MathAssistant">
             <summary>
             Contains methods for cross-platform math operations.
             </summary>
            </member>
        <member name="P:FM.MathAssistant.Pi">
             <summary>
             Gets the value of pi.
             </summary>
            </member>
        <member name="P:FM.MathAssistant.E">
             <summary>
             Gets the value of e.
             </summary>
            </member>
        <member name="M:FM.MathAssistant.Abs(System.Int32)">
             <summary>
             Returns the absolute value of the specified value.
             </summary>
             <param name="intValue">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Abs(System.Int64)">
             <summary>
             Returns the absolute value of the specified value.
             </summary>
             <param name="longValue">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Abs(System.Single)">
             <summary>
             Returns the absolute value of the specified value.
             </summary>
             <param name="floatValue">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Abs(System.Double)">
             <summary>
             Returns the absolute value of the specified value.
             </summary>
             <param name="doubleValue">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Acos(System.Double)">
             <summary>
             Returns the arc cosine of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Asin(System.Double)">
             <summary>
             Returns the arc sine of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Atan(System.Double)">
             <summary>
             Returns the arc tangent of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Atan2(System.Double,System.Double)">
             <summary>
             Returns the arc arc tangent of the specified values.
             </summary>
             <param name="y">The y value.</param>
             <param name="x">The x value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Ceil(System.Double)">
             <summary>
             Returns the ceiling of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Cos(System.Double)">
             <summary>
             Returns the cosine of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Cosh(System.Double)">
             <summary>
             Returns the hyperbolic cosine of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Exp(System.Double)">
             <summary>
             Returns e raised to the power of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Floor(System.Double)">
             <summary>
             Returns the floor of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Log(System.Double)">
             <summary>
             Returns the natural logarithm of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Log10(System.Double)">
             <summary>
             Returns the base-10 logarithm of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Max(System.Int32,System.Int32)">
             <summary>
             Returns the larger of two values.
             </summary>
             <param name="intValue1">The first value.</param>
             <param name="intValue2">The second value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Max(System.Int64,System.Int64)">
             <summary>
             Returns the larger of two values.
             </summary>
             <param name="longValue1">The first value.</param>
             <param name="longValue2">The second value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Max(System.Single,System.Single)">
             <summary>
             Returns the larger of two values.
             </summary>
             <param name="floatValue1">The first value.</param>
             <param name="floatValue2">The second value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Max(System.Double,System.Double)">
             <summary>
             Returns the larger of two values.
             </summary>
             <param name="doubleValue1">The first value.</param>
             <param name="doubleValue2">The second value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Min(System.Int32,System.Int32)">
             <summary>
             Returns the smaller of two values.
             </summary>
             <param name="intValue1">The first value.</param>
             <param name="intValue2">The second value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Min(System.Int64,System.Int64)">
             <summary>
             Returns the smaller of two values.
             </summary>
             <param name="longValue1">The first value.</param>
             <param name="longValue2">The second value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Min(System.Single,System.Single)">
             <summary>
             Returns the smaller of two values.
             </summary>
             <param name="floatValue1">The first value.</param>
             <param name="floatValue2">The second value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Min(System.Double,System.Double)">
             <summary>
             Returns the smaller of two values.
             </summary>
             <param name="doubleValue1">The first value.</param>
             <param name="doubleValue2">The second value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Pow(System.Double,System.Double)">
             <summary>
             Returns the result of raising x to the power of y.
             </summary>
             <param name="x">The x value.</param>
             <param name="y">The y value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Sin(System.Double)">
             <summary>
             Returns the sine of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Sinh(System.Double)">
             <summary>
             Returns the hyperbolic sine of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Sqrt(System.Double)">
             <summary>
             Returns the square root of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Tan(System.Double)">
             <summary>
             Returns the tangent of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.MathAssistant.Tanh(System.Double)">
             <summary>
             Returns the hyperbolic tangent of the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="T:FM.NullJsonProvider">
             <summary>
             An implementation of a JSON provider that does nothing.
             </summary>
            </member>
        <member name="M:FM.NullJsonProvider.Serialize``1(``0)">
             <summary>
             Serializes a value to a JSON string.
             </summary>
             <typeparam name="T">The type the value to serialize.</typeparam>
             <param name="value">The value to serialize.</param>
             <returns>
             The serialized JSON string.
             </returns>
            </member>
        <member name="M:FM.NullJsonProvider.Deserialize``1(System.String)">
             <summary>
             Deserializes a value from a JSON string.
             </summary>
             <typeparam name="T">The type the value to deserialize.</typeparam>
             <param name="valueJson">The JSON string to deserialize.</param>
             <returns>
             The deserialized value.
             </returns>
            </member>
        <member name="T:FM.ShortMap">
             <summary>
             A map of strings to shorts.
             </summary>
            </member>
        <member name="T:FM.LongMap">
             <summary>
             A map of strings to longs.
             </summary>
            </member>
        <member name="T:FM.FloatMap">
             <summary>
             A map of strings to floats.
             </summary>
            </member>
        <member name="T:FM.DoubleCollection">
             <summary>
             A collection of doubles.
             </summary>
            </member>
        <member name="P:FM.DoubleCollection.Count">
             <summary>
             Gets the number of doubles in the collection.
             </summary>
            </member>
        <member name="M:FM.DoubleCollection.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.DoubleCollection" /> class.
             </summary>
            </member>
        <member name="M:FM.DoubleCollection.#ctor(System.Double[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.DoubleCollection" /> class.
             </summary>
             <param name="buffer">The doubles to use as initial data.</param>
            </member>
        <member name="M:FM.DoubleCollection.Add(System.Double)">
             <summary>
             Adds a double to the collection.
             </summary>
             <param name="b">The double to add.</param>
            </member>
        <member name="M:FM.DoubleCollection.AddRange(System.Double[])">
             <summary>
             Adds a range of doubles to the collection.
             </summary>
             <param name="buffer">The range of doubles to add.</param>
            </member>
        <member name="M:FM.DoubleCollection.AddRange(FM.DoubleCollection)">
             <summary>
             Adds a double collection to this collection.
             </summary>
             <param name="collection">The double collection to add.</param>
            </member>
        <member name="M:FM.DoubleCollection.RemoveRange(System.Int32,System.Int32)">
             <summary>
             Removes a range of doubles from the collection.
             </summary>
             <param name="index">The index to start removing.</param>
             <param name="count">The number of doubles to remove.</param>
            </member>
        <member name="M:FM.DoubleCollection.InsertRange(System.Int32,System.Double[])">
             <summary>
             Inserts a range of doubles into the collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="buffer">The range of doubles to insert.</param>
            </member>
        <member name="M:FM.DoubleCollection.InsertRange(System.Int32,FM.DoubleCollection)">
             <summary>
             Inserts a double collection into this collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="collection">The double collection to insert.</param>
            </member>
        <member name="M:FM.DoubleCollection.GetRange(System.Int32,System.Int32)">
             <summary>
             Gets a range of doubles from the collection.
             </summary>
             <param name="index">The index to start getting.</param>
             <param name="count">The number of doubles to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.DoubleCollection.Get(System.Int32)">
             <summary>
             Gets a double from the collection.
             </summary>
             <param name="index">The index to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.DoubleCollection.ToArray">
             <summary>
             Converts this collection to an array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.FloatCollection">
             <summary>
             A collection of floats.
             </summary>
            </member>
        <member name="P:FM.FloatCollection.Count">
             <summary>
             Gets the number of floats in the collection.
             </summary>
            </member>
        <member name="M:FM.FloatCollection.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.FloatCollection" /> class.
             </summary>
            </member>
        <member name="M:FM.FloatCollection.#ctor(System.Single[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.FloatCollection" /> class.
             </summary>
             <param name="buffer">The floats to use as initial data.</param>
            </member>
        <member name="M:FM.FloatCollection.Add(System.Single)">
             <summary>
             Adds a float to the collection.
             </summary>
             <param name="b">The float to add.</param>
            </member>
        <member name="M:FM.FloatCollection.AddRange(System.Single[])">
             <summary>
             Adds a range of floats to the collection.
             </summary>
             <param name="buffer">The range of floats to add.</param>
            </member>
        <member name="M:FM.FloatCollection.AddRange(FM.FloatCollection)">
             <summary>
             Adds a float collection to this collection.
             </summary>
             <param name="collection">The float collection to add.</param>
            </member>
        <member name="M:FM.FloatCollection.RemoveRange(System.Int32,System.Int32)">
             <summary>
             Removes a range of floats from the collection.
             </summary>
             <param name="index">The index to start removing.</param>
             <param name="count">The number of floats to remove.</param>
            </member>
        <member name="M:FM.FloatCollection.InsertRange(System.Int32,System.Single[])">
             <summary>
             Inserts a range of floats into the collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="buffer">The range of floats to insert.</param>
            </member>
        <member name="M:FM.FloatCollection.InsertRange(System.Int32,FM.FloatCollection)">
             <summary>
             Inserts a float collection into this collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="collection">The float collection to insert.</param>
            </member>
        <member name="M:FM.FloatCollection.GetRange(System.Int32,System.Int32)">
             <summary>
             Gets a range of floats from the collection.
             </summary>
             <param name="index">The index to start getting.</param>
             <param name="count">The number of floats to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.FloatCollection.Get(System.Int32)">
             <summary>
             Gets a float from the collection.
             </summary>
             <param name="index">The index to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.FloatCollection.ToArray">
             <summary>
             Converts this collection to an array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IntegerMap">
             <summary>
             A map of strings to integers.
             </summary>
            </member>
        <member name="T:FM.LongCollection">
             <summary>
             A collection of longs.
             </summary>
            </member>
        <member name="P:FM.LongCollection.Count">
             <summary>
             Gets the number of longs in the collection.
             </summary>
            </member>
        <member name="M:FM.LongCollection.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.LongCollection" /> class.
             </summary>
            </member>
        <member name="M:FM.LongCollection.#ctor(System.Int64[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.LongCollection" /> class.
             </summary>
             <param name="buffer">The longs to use as initial data.</param>
            </member>
        <member name="M:FM.LongCollection.Add(System.Int64)">
             <summary>
             Adds a long to the collection.
             </summary>
             <param name="b">The long to add.</param>
            </member>
        <member name="M:FM.LongCollection.AddRange(System.Int64[])">
             <summary>
             Adds a range of longs to the collection.
             </summary>
             <param name="buffer">The range of longs to add.</param>
            </member>
        <member name="M:FM.LongCollection.AddRange(FM.LongCollection)">
             <summary>
             Adds a long collection to this collection.
             </summary>
             <param name="collection">The long collection to add.</param>
            </member>
        <member name="M:FM.LongCollection.RemoveRange(System.Int32,System.Int32)">
             <summary>
             Removes a range of longs from the collection.
             </summary>
             <param name="index">The index to start removing.</param>
             <param name="count">The number of longs to remove.</param>
            </member>
        <member name="M:FM.LongCollection.InsertRange(System.Int32,System.Int64[])">
             <summary>
             Inserts a range of longs into the collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="buffer">The range of longs to insert.</param>
            </member>
        <member name="M:FM.LongCollection.InsertRange(System.Int32,FM.LongCollection)">
             <summary>
             Inserts a long collection into this collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="collection">The long collection to insert.</param>
            </member>
        <member name="M:FM.LongCollection.GetRange(System.Int32,System.Int32)">
             <summary>
             Gets a range of longs from the collection.
             </summary>
             <param name="index">The index to start getting.</param>
             <param name="count">The number of longs to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LongCollection.Get(System.Int32)">
             <summary>
             Gets a long from the collection.
             </summary>
             <param name="index">The index to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.LongCollection.ToArray">
             <summary>
             Converts this collection to an array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.ShortCollection">
             <summary>
             A collection of shorts.
             </summary>
            </member>
        <member name="P:FM.ShortCollection.Count">
             <summary>
             Gets the number of shorts in the collection.
             </summary>
            </member>
        <member name="M:FM.ShortCollection.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ShortCollection" /> class.
             </summary>
            </member>
        <member name="M:FM.ShortCollection.#ctor(System.Int16[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ShortCollection" /> class.
             </summary>
             <param name="buffer">The shorts to use as initial data.</param>
            </member>
        <member name="M:FM.ShortCollection.Add(System.Int16)">
             <summary>
             Adds a short to the collection.
             </summary>
             <param name="b">The short to add.</param>
            </member>
        <member name="M:FM.ShortCollection.AddRange(System.Int16[])">
             <summary>
             Adds a range of shorts to the collection.
             </summary>
             <param name="buffer">The range of shorts to add.</param>
            </member>
        <member name="M:FM.ShortCollection.AddRange(FM.ShortCollection)">
             <summary>
             Adds a short collection to this collection.
             </summary>
             <param name="collection">The short collection to add.</param>
            </member>
        <member name="M:FM.ShortCollection.RemoveRange(System.Int32,System.Int32)">
             <summary>
             Removes a range of shorts from the collection.
             </summary>
             <param name="index">The index to start removing.</param>
             <param name="count">The number of shorts to remove.</param>
            </member>
        <member name="M:FM.ShortCollection.InsertRange(System.Int32,System.Int16[])">
             <summary>
             Inserts a range of shorts into the collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="buffer">The range of shorts to insert.</param>
            </member>
        <member name="M:FM.ShortCollection.InsertRange(System.Int32,FM.ShortCollection)">
             <summary>
             Inserts a short collection into this collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="collection">The short collection to insert.</param>
            </member>
        <member name="M:FM.ShortCollection.GetRange(System.Int32,System.Int32)">
             <summary>
             Gets a range of shorts from the collection.
             </summary>
             <param name="index">The index to start getting.</param>
             <param name="count">The number of shorts to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.ShortCollection.Get(System.Int32)">
             <summary>
             Gets a short from the collection.
             </summary>
             <param name="index">The index to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.ShortCollection.ToArray">
             <summary>
             Converts this collection to an array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IntegerCollection">
             <summary>
             A collection of integers.
             </summary>
            </member>
        <member name="P:FM.IntegerCollection.Count">
             <summary>
             Gets the number of integers in the collection.
             </summary>
            </member>
        <member name="M:FM.IntegerCollection.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IntegerCollection" /> class.
             </summary>
            </member>
        <member name="M:FM.IntegerCollection.#ctor(System.Int32[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IntegerCollection" /> class.
             </summary>
             <param name="buffer">The integers to use as initial data.</param>
            </member>
        <member name="M:FM.IntegerCollection.Add(System.Int32)">
             <summary>
             Adds an integer to the collection.
             </summary>
             <param name="b">The integer to add.</param>
            </member>
        <member name="M:FM.IntegerCollection.AddRange(System.Int32[])">
             <summary>
             Adds a range of integers to the collection.
             </summary>
             <param name="buffer">The range of integers to add.</param>
            </member>
        <member name="M:FM.IntegerCollection.AddRange(FM.IntegerCollection)">
             <summary>
             Adds an integer collection to this collection.
             </summary>
             <param name="collection">The integer collection to add.</param>
            </member>
        <member name="M:FM.IntegerCollection.RemoveRange(System.Int32,System.Int32)">
             <summary>
             Removes a range of integers from the collection.
             </summary>
             <param name="index">The index to start removing.</param>
             <param name="count">The number of integers to remove.</param>
            </member>
        <member name="M:FM.IntegerCollection.InsertRange(System.Int32,System.Int32[])">
             <summary>
             Inserts a range of ints into the collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="buffer">The range of ints to insert.</param>
            </member>
        <member name="M:FM.IntegerCollection.InsertRange(System.Int32,FM.IntegerCollection)">
             <summary>
             Inserts an integer collection into this collection.
             </summary>
             <param name="index">The index to start adding.</param>
             <param name="collection">The integer collection to insert.</param>
            </member>
        <member name="M:FM.IntegerCollection.GetRange(System.Int32,System.Int32)">
             <summary>
             Gets a range of integers from the collection.
             </summary>
             <param name="index">The index to start getting.</param>
             <param name="count">The number of integers to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IntegerCollection.Get(System.Int32)">
             <summary>
             Gets an integer from the collection.
             </summary>
             <param name="index">The index to get.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IntegerCollection.ToArray">
             <summary>
             Converts this collection to an array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.DebugLogProvider">
             <summary>
             Log provider that writes output to the Debug output window.
             </summary>
            </member>
        <member name="M:FM.DebugLogProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.DebugLogProvider" /> class using <see cref="F:FM.LogLevel.Warn" />.
             </summary>
            </member>
        <member name="M:FM.DebugLogProvider.#ctor(FM.LogLevel)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.DebugLogProvider" /> class.
             </summary>
             <param name="level">The log level.</param>
            </member>
        <member name="M:FM.DebugLogProvider.WriteLine(System.String)">
             <summary>
             Writes a line of text to the log.
             </summary>
             <param name="text">The text to write to the log.</param>
            </member>
        <member name="M:FM.DebugLogProvider.Log(FM.LogLevel,System.String,System.Exception)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.DebugLogProvider.Log(FM.LogLevel,System.String)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.DoubleHolder">
             <summary>
             Class to hold a double value passed by reference.
             </summary>
            </member>
        <member name="P:FM.DoubleHolder.Value">
             <summary>
             Gets or sets the value.
             </summary>
            </member>
        <member name="M:FM.DoubleHolder.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.DoubleHolder" /> class.
             </summary>
            </member>
        <member name="M:FM.DoubleHolder.#ctor(System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.DoubleHolder" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.FloatHolder">
             <summary>
             Class to hold a float value passed by reference.
             </summary>
            </member>
        <member name="P:FM.FloatHolder.Value">
             <summary>
             Gets or sets the value.
             </summary>
            </member>
        <member name="M:FM.FloatHolder.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.FloatHolder" /> class.
             </summary>
            </member>
        <member name="M:FM.FloatHolder.#ctor(System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.FloatHolder" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.HttpMethod">
             <summary>
             The method used by an HTTP request.
             </summary>
            </member>
        <member name="F:FM.HttpMethod.Get">
             <summary>
             Indicates a GET request.
             </summary>
            </member>
        <member name="F:FM.HttpMethod.Head">
             <summary>
             Indicates a HEAD request.
             </summary>
            </member>
        <member name="F:FM.HttpMethod.Post">
             <summary>
             Indicates a POST request.
             </summary>
            </member>
        <member name="F:FM.HttpMethod.Put">
             <summary>
             Indicates a PUT request.
             </summary>
            </member>
        <member name="F:FM.HttpMethod.Patch">
             <summary>
             Indicates a PATCH request.
             </summary>
            </member>
        <member name="F:FM.HttpMethod.Delete">
             <summary>
             Indicates a DELETE request.
             </summary>
            </member>
        <member name="T:FM.HttpRequestArgs">
             <summary>
             Arguments for sending an HTTP request.
             </summary>
            </member>
        <member name="P:FM.HttpRequestArgs.Sender">
             <summary>
             Gets or sets the sender of the content, either a client or publisher.
             </summary>
            </member>
        <member name="P:FM.HttpRequestArgs.Method">
             <summary>
             Gets or sets the HTTP method.
             </summary>
            </member>
        <member name="P:FM.HttpRequestArgs.BinaryContent">
             <summary>
             Gets or sets the binary content to transfer over HTTP.
             Overrides <see cref="P:FM.HttpRequestArgs.TextContent" />.
             </summary>
            </member>
        <member name="P:FM.HttpRequestArgs.TextContent">
             <summary>
             Gets or sets the text content to transfer over HTTP.
             </summary>
            </member>
        <member name="P:FM.HttpRequestArgs.Url">
             <summary>
             Gets or sets the target URL for the HTTP request.
             </summary>
            </member>
        <member name="P:FM.HttpRequestArgs.Headers">
             <summary>
             Gets or sets the headers to transfer over HTTP.
             </summary>
            </member>
        <member name="P:FM.HttpRequestArgs.Timeout">
             <summary>
             Gets or sets the number of milliseconds to wait before timing out the HTTP transfer.
             Defaults to 15000 (15 seconds).
             </summary>
            </member>
        <member name="P:FM.HttpRequestArgs.OnRequestCreated">
             <summary>
             Gets or sets the callback to invoke once the outgoing HTTP request is created.
             See <see cref="T:FM.HttpRequestCreatedArgs" /> for callback argument details.
             </summary>
            </member>
        <member name="P:FM.HttpRequestArgs.OnResponseReceived">
             <summary>
             Gets or sets the callback to invoke once the incoming HTTP response has been
             received. See <see cref="T:FM.HttpResponseReceivedArgs" /> for callback argument details.
             </summary>
            </member>
        <member name="M:FM.HttpRequestArgs.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.HttpRequestArgs" /> class
             with default values.
             </summary>
            </member>
        <member name="T:FM.HttpRequestCreatedArgs">
             <summary>
             Arguments passed into callbacks when an HTTP request is created.
             </summary>
            </member>
        <member name="P:FM.HttpRequestCreatedArgs.RequestArgs">
             <summary>
             Gets or sets the original request arguments.
             </summary>
            </member>
        <member name="P:FM.HttpRequestCreatedArgs.Sender">
             <summary>
             Gets or sets the sender of the request, either a client or publisher.
             </summary>
            </member>
        <member name="P:FM.HttpRequestCreatedArgs.Request">
             <summary>
             Gets or sets the outgoing HTTP request about to be sent to the server.
             </summary>
            </member>
        <member name="T:FM.HttpResponseArgs">
             <summary>
             Arguments for receiving an HTTP response.
             </summary>
            </member>
        <member name="P:FM.HttpResponseArgs.BinaryContent">
             <summary>
             Gets or sets the binary content read from the HTTP response.
             </summary>
            </member>
        <member name="P:FM.HttpResponseArgs.TextContent">
             <summary>
             Gets or sets the text content read from the HTTP response.
             </summary>
            </member>
        <member name="P:FM.HttpResponseArgs.StatusCode">
             <summary>
             Gets or sets the status code read from the HTTP response.
             </summary>
            </member>
        <member name="P:FM.HttpResponseArgs.Headers">
             <summary>
             Gets or sets the headers read from the HTTP response.
             </summary>
            </member>
        <member name="P:FM.HttpResponseArgs.Exception">
             <summary>
             Gets or sets the exception generated while completing the request.
             </summary>
            </member>
        <member name="P:FM.HttpResponseArgs.RequestArgs">
             <summary>
             Gets or sets the original <see cref="T:FM.HttpRequestArgs" />.
             </summary>
            </member>
        <member name="M:FM.HttpResponseArgs.#ctor(FM.HttpRequestArgs)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.HttpResponseArgs" /> class.
             </summary>
             <param name="requestArgs">The request arguments.</param>
            </member>
        <member name="T:FM.HttpSendFinishArgs">
             <summary>
             Arguments for <see cref="E:FM.HttpTransfer.OnSendStart" />.
             </summary>
            </member>
        <member name="P:FM.HttpSendFinishArgs.Sender">
             <summary>
             Gets or sets the sender of the request, either a client or publisher.
             </summary>
            </member>
        <member name="P:FM.HttpSendFinishArgs.RequestBinaryContent">
             <summary>
             Gets or sets the binary content of the request.
             </summary>
            </member>
        <member name="P:FM.HttpSendFinishArgs.RequestTextContent">
             <summary>
             Gets or sets the text content of the request.
             </summary>
            </member>
        <member name="P:FM.HttpSendFinishArgs.ResponseBinaryContent">
             <summary>
             Gets or sets the binary content of the response.
             </summary>
            </member>
        <member name="P:FM.HttpSendFinishArgs.ResponseTextContent">
             <summary>
             Gets or sets the binary content of the response.
             </summary>
            </member>
        <member name="P:FM.HttpSendFinishArgs.ResponseHeaders">
             <summary>
             Gets or sets the headers of the response.
             </summary>
            </member>
        <member name="T:FM.HttpSendStartArgs">
             <summary>
             Arguments for <see cref="E:FM.HttpTransfer.OnSendStart" />.
             </summary>
            </member>
        <member name="P:FM.HttpSendStartArgs.Sender">
             <summary>
             Gets or sets the sender of the request, either a client or publisher.
             </summary>
            </member>
        <member name="P:FM.HttpSendStartArgs.RequestBinaryContent">
             <summary>
             Gets or sets the binary content of the request.
             </summary>
            </member>
        <member name="P:FM.HttpSendStartArgs.RequestTextContent">
             <summary>
             Gets or sets the text content of the request.
             </summary>
            </member>
        <member name="T:FM.BackoffMode">
             <summary>
             The algorithm to use when calculating sleep time between failed requests.
             </summary>
            </member>
        <member name="F:FM.BackoffMode.Additive">
             <summary>
             Indicates that the backoff algorithm uses an additive calculation
             where the current backoff is equal to the previously calculated
             backoff plus the specified backoff in milliseconds.
             </summary>
            </member>
        <member name="F:FM.BackoffMode.Constant">
             <summary>
             Indicates that the backoff algorithm uses a constant calculation
             where the current backoff is always equal to exactly the specified
             backoff in milliseconds.
             </summary>
            </member>
        <member name="F:FM.BackoffMode.None">
             <summary>
             Indicates that no backoff interval exists between failed requests.
             </summary>
            </member>
        <member name="T:FM.DoubleFunction`3">
             <summary>
             Generic method signature for callbacks with two parameters and a return value.
             </summary>
            </member>
        <member name="T:FM.EmptyFunction`1">
             <summary>
             Generic method signature for callbacks with no parameters and a return value.
             </summary>
            </member>
        <member name="T:FM.SingleFunction`2">
             <summary>
             Generic method signature for callbacks with a single parameter and a return value.
             </summary>
            </member>
        <member name="T:FM.DoubleAction`2">
             <summary>
             Generic method signature for callbacks with two parameters.
             </summary>
            </member>
        <member name="T:FM.EmptyAction">
             <summary>
             Generic method signature for callbacks with no parameters.
             </summary>
            </member>
        <member name="T:FM.SingleAction`1">
             <summary>
             Generic method signature for callbacks with a single parameter.
             </summary>
            </member>
        <member name="T:FM.BitAssistant">
             <summary>
             Contains methods for cross-platform bit manipulation.
             </summary>
            </member>
        <member name="M:FM.BitAssistant.IsLittleEndian">
             <summary>
             Indicates the byte order in which data is stored in this computer architecture.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.CastByte(System.Int32)">
             <summary>
             Casts an integer to a byte.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.CastInteger(System.Byte)">
             <summary>
             Casts a byte to an integer.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.CastLong(System.Byte)">
             <summary>
             Casts a byte to a long.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.LeftShift(System.Byte,System.Int32)">
             <summary>
             Performs a bit-wise left shift on a byte value.
             </summary>
             <param name="value">The value.</param>
             <param name="count">The number of bits to shift.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.LeftShiftShort(System.Int16,System.Int32)">
             <summary>
             Performs a bit-wise left shift on a short value.
             </summary>
             <param name="value">The value.</param>
             <param name="count">The number of bits to shift.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.LeftShiftInteger(System.Int32,System.Int32)">
             <summary>
             Performs a bit-wise left shift on an integer value.
             </summary>
             <param name="value">The value.</param>
             <param name="count">The number of bits to shift.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.LeftShiftLong(System.Int64,System.Int32)">
             <summary>
             Performs a bit-wise left shift on a long value.
             </summary>
             <param name="value">The value.</param>
             <param name="count">The number of bits to shift.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.RightShift(System.Byte,System.Int32)">
             <summary>
             Performs an unsigned bit-wise right shift on a byte value.
             </summary>
             <param name="value">The value.</param>
             <param name="count">The number of bits to shift.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.RightShiftShort(System.Int16,System.Int32)">
             <summary>
             Performs an unsigned bit-wise right shift on a short value.
             </summary>
             <param name="value">The short value.</param>
             <param name="count">The number of bits to shift.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.RightShiftInteger(System.Int32,System.Int32)">
             <summary>
             Performs an unsigned bit-wise right shift on an integer value.
             </summary>
             <param name="value">The integer value.</param>
             <param name="count">The number of bits to shift.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.RightShiftLong(System.Int64,System.Int32)">
             <summary>
             Performs an unsigned bit-wise right shift on a long value.
             </summary>
             <param name="value">The long value.</param>
             <param name="count">The number of bits to shift.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.SequencesAreEqual(System.Byte[],System.Byte[])">
             <summary>
             Compares two sequences of bytes for equality.
             </summary>
             <param name="array1">The first byte array.</param>
             <param name="array2">The second byte array.</param>
             <returns><c>true</c> if the sequences are equal; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.BitAssistant.SequencesAreEqual(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Compares two sequences of bytes for equality.
             </summary>
             <param name="array1">The first byte array.</param>
             <param name="offset1">The first byte array offset.</param>
             <param name="array2">The second byte array.</param>
             <param name="offset2">The second byte array offset.</param>
             <param name="length">The length.</param>
             <returns>
               <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.BitAssistant.SequencesAreEqualConstantTime(System.Byte[],System.Byte[])">
             <summary>
             Compares two sequences of bytes for equality in constant time.
             </summary>
             <param name="array1">The first byte array.</param>
             <param name="array2">The second byte array.</param>
             <returns><c>true</c> if the sequences are equal; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.BitAssistant.SequencesAreEqualConstantTime(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Compares two sequences of bytes for equality in constant time.
             </summary>
             <param name="array1">The first byte array.</param>
             <param name="offset1">The first byte array offset.</param>
             <param name="array2">The second byte array.</param>
             <param name="offset2">The second byte array offset.</param>
             <param name="length">The length.</param>
             <returns>
               <c>true</c> if the sequences are equal; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.BitAssistant.SubArray(System.Byte[],System.Int32)">
             <summary>
             Creates a subarray from an existing array.
             </summary>
             <param name="array">The source array.</param>
             <param name="offset">The offset into the source array.</param>
             <returns>The subarray.</returns>
            </member>
        <member name="M:FM.BitAssistant.SubArray(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Creates a subarray from an existing array.
             </summary>
             <param name="array">The source array.</param>
             <param name="offset">The offset into the source array.</param>
             <param name="count">The number of bytes to copy into the subarray.</param>
             <returns>The subarray.</returns>
            </member>
        <member name="M:FM.BitAssistant.Reverse(System.Byte[])">
             <summary>
             Performs an in-place reversal of a byte array.
             </summary>
             <param name="array">The array to reverse.</param>
            </member>
        <member name="M:FM.BitAssistant.Copy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Copies bytes from one array to another.
             </summary>
             <param name="source">The source bytes.</param>
             <param name="sourceIndex">The starting index for copying from the source.</param>
             <param name="destination">The destination bytes.</param>
             <param name="destinationIndex">The starting index for copying to the destination.</param>
             <param name="length">The number of bytes to copy.</param>
            </member>
        <member name="M:FM.BitAssistant.CopyFloats(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
             <summary>
             Copies floats from one array to another.
             </summary>
             <param name="source">The source floats.</param>
             <param name="sourceIndex">The starting index for copying from the source.</param>
             <param name="destination">The destination floats.</param>
             <param name="destinationIndex">The starting index for copying to the destination.</param>
             <param name="length">The number of floats to copy.</param>
            </member>
        <member name="M:FM.BitAssistant.Set(System.Byte[],System.Int32,System.Int32,System.Byte)">
             <summary>
             Sets a value across an array.
             </summary>
             <param name="array">The array bytes.</param>
             <param name="index">The starting index.</param>
             <param name="length">The number of bytes to set.</param>
             <param name="value">The value to set.</param>
            </member>
        <member name="M:FM.BitAssistant.GetHexString(System.Byte[])">
             <summary>
             Converts a byte array to a hexadecimal string.
             </summary>
             <param name="array">The byte array.</param>
             <returns>The hexadecimal string.</returns>
            </member>
        <member name="M:FM.BitAssistant.GetHexString(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Converts a byte array to a hexadecimal string.
             </summary>
             <param name="array">The byte array.</param>
             <param name="offset">The offset into the array.</param>
             <param name="length">The number of bytes to convert.</param>
             <returns>
             The hexadecimal string.
             </returns>
            </member>
        <member name="M:FM.BitAssistant.GetHexBytes(System.String)">
             <summary>
             Converts a hexadecimal string to a byte array.
             </summary>
             <param name="s">The hexadecimal string.</param>
             <returns>The byte array.</returns>
            </member>
        <member name="M:FM.BitAssistant.GetBinaryString(System.Byte[])">
             <summary>
             Converts a byte array to a binary string.
             </summary>
             <param name="array">The byte array.</param>
             <returns>
             The binary string.
             </returns>
            </member>
        <member name="M:FM.BitAssistant.GetBinaryString(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Converts a byte array to a binary string.
             </summary>
             <param name="array">The byte array.</param>
             <param name="offset">The offset into the array.</param>
             <param name="length">The number of bytes to convert.</param>
             <returns>
             The binary string.
             </returns>
            </member>
        <member name="M:FM.BitAssistant.GetBinaryBytes(System.String)">
             <summary>
             Converts a binary string to a byte array.
             </summary>
             <param name="s">The binary string.</param>
             <returns>The byte array.</returns>
            </member>
        <member name="M:FM.BitAssistant.GetFloatBytesNetwork(System.Single)">
             <summary>
             Converts a 32-bit floating point value to a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.GetDoubleBytesNetwork(System.Double)">
             <summary>
             Converts a 64-bit floating point value to a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.GetShortBytesNetwork(System.Int16)">
             <summary>
             Converts a 16-bit value to a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.GetShortBytesFromIntegerNetwork(System.Int32)">
             <summary>
             Converts a 16-bit value to a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.GetIntegerBytesNetwork(System.Int32)">
             <summary>
             Converts a 32-bit value to a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.GetIntegerBytesFromLongNetwork(System.Int64)">
             <summary>
             Converts a 32-bit value to a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.GetLongBytesNetwork(System.Int64)">
             <summary>
             Converts a 64-bit value to a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.ToFloatNetwork(System.Byte[],System.Int32)">
             <summary>
             Read a 32-bit floating point value from a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The index to start reading.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.ToDoubleNetwork(System.Byte[],System.Int32)">
             <summary>
             Read a 64-bit floating point value from a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The index to start reading.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.ToShortNetwork(System.Byte[],System.Int32)">
             <summary>
             Read a 16-bit value from a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The index to start reading.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.ToIntegerFromShortNetwork(System.Byte[],System.Int32)">
             <summary>
             Read a 16-bit value from a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The index to start reading.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.ToIntegerNetwork(System.Byte[],System.Int32)">
             <summary>
             Read a 32-bit value from a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The index to start reading.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.ToLongFromIntegerNetwork(System.Byte[],System.Int32)">
             <summary>
             Read a 32-bit value from a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The index to start reading.</param>
             <returns></returns>
            </member>
        <member name="M:FM.BitAssistant.ToLongNetwork(System.Byte[],System.Int32)">
             <summary>
             Read a 64-bit value from a byte array (big endian).
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The index to start reading.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IntegerHolder">
             <summary>
             Class to hold an integer value passed by reference.
             </summary>
            </member>
        <member name="P:FM.IntegerHolder.Value">
             <summary>
             Gets or sets the value.
             </summary>
            </member>
        <member name="M:FM.IntegerHolder.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IntegerHolder" /> class.
             </summary>
            </member>
        <member name="M:FM.IntegerHolder.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IntegerHolder" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.LockedRandomizer">
             <summary>
             Thread-safe class providing access to a single <see cref="T:FM.Randomizer" />.
             </summary>
            </member>
        <member name="M:FM.LockedRandomizer.Next">
             <summary>
             Returns a nonnegative random number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.LockedRandomizer.NextLong">
             <summary>
             Returns a nonnegative random number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.LockedRandomizer.Next(System.Int32)">
             <summary>
             Returns a nonnegative random number less than the specified maximum.
             </summary>
             <param name="maxValue">The maximum value (exclusive).</param>
             <returns></returns>
            </member>
        <member name="M:FM.LockedRandomizer.Next(System.Int32,System.Int32)">
             <summary>
             Returns a random number within a specified range.
             </summary>
             <param name="minValue">The mininum value (inclusive).</param>
             <param name="maxValue">The maximum value (exclusive).</param>
             <returns></returns>
            </member>
        <member name="M:FM.LockedRandomizer.NextBytes(System.Byte[])">
             <summary>
             Fills the elements of a specified array of bytes with random numbers.
             </summary>
             <param name="buffer">The array of bytes to fill.</param>
            </member>
        <member name="M:FM.LockedRandomizer.NextDouble">
             <summary>
             Returns a random number between 0.0 and 1.0.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.LockedRandomizer.RandomString(System.Int32)">
             <summary>
             Generates a random string of a specified size.
             </summary>
             <param name="size">The size of the output string.</param>
             <returns></returns>
            </member>
        <member name="T:FM.Log">
             <summary>
             Log utility class.
             </summary>
            </member>
        <member name="P:FM.Log.Provider">
             <summary>
             Gets or sets the log provider to use.
             </summary>
            </member>
        <member name="P:FM.Log.IsDebugEnabled">
             <summary>
             Gets a value indicating whether logging is enabled for debug-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for debug-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.Log.IsInfoEnabled">
             <summary>
             Gets a value indicating whether logging is enabled for info-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for info-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.Log.IsWarnEnabled">
             <summary>
             Gets a value indicating whether logging is enabled for warn-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for warn-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.Log.IsErrorEnabled">
             <summary>
             Gets a value indicating whether logging is enabled for error-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for error-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.Log.IsFatalEnabled">
             <summary>
             Gets a value indicating whether logging is enabled for fatal-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for fatal-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="M:FM.Log.Debug(System.String)">
             <summary>
             Logs a debug-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.Log.Info(System.String)">
             <summary>
             Logs an info-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.Log.Warn(System.String)">
             <summary>
             Logs a warn-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.Log.Error(System.String)">
             <summary>
             Logs an error-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.Log.Fatal(System.String)">
             <summary>
             Logs a fatal-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.Log.Debug(System.String,System.Exception)">
             <summary>
             Logs a debug-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.Log.Info(System.String,System.Exception)">
             <summary>
             Logs an info-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.Log.Warn(System.String,System.Exception)">
             <summary>
             Logs a warn-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.Log.Error(System.String,System.Exception)">
             <summary>
             Logs an error-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.Log.Fatal(System.String,System.Exception)">
             <summary>
             Logs a fatal-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.Log.DebugFormat(System.String,System.String[])">
             <summary>
             Logs a debug-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.Log.InfoFormat(System.String,System.String[])">
             <summary>
             Logs an info-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.Log.WarnFormat(System.String,System.String[])">
             <summary>
             Logs a warn-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.Log.ErrorFormat(System.String,System.String[])">
             <summary>
             Logs an error-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.Log.FatalFormat(System.String,System.String[])">
             <summary>
             Logs a fatal-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.Log.WriteLine(System.String)">
             <summary>
             Writes a line of text to the log.
             </summary>
             <param name="text">The text to write to the log.</param>
            </member>
        <member name="M:FM.Log.WriteLine(System.String,System.String[])">
             <summary>
             Writes a line of text to the log.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="T:FM.LongHolder">
             <summary>
             Class to hold a long value passed by reference.
             </summary>
            </member>
        <member name="P:FM.LongHolder.Value">
             <summary>
             Gets or sets the value.
             </summary>
            </member>
        <member name="M:FM.LongHolder.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.LongHolder" /> class.
             </summary>
            </member>
        <member name="M:FM.LongHolder.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.LongHolder" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.ManagedThread">
             <summary>
             Managed thread.
             </summary>
            </member>
        <member name="P:FM.ManagedThread.State">
             <summary>
             Gets or sets a custom state object.
             </summary>
            </member>
        <member name="P:FM.ManagedThread.IsBackground">
             <summary>
             Gets or sets a value indicating whether
             or not this thread is a background thread.
             </summary>
            </member>
        <member name="M:FM.ManagedThread.#ctor(FM.SingleAction{FM.ManagedThread})">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ManagedThread" /> class.
             </summary>
             <param name="loop">The loop to run on the thread.</param>
            </member>
        <member name="M:FM.ManagedThread.#ctor(FM.SingleAction{FM.ManagedThread},System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ManagedThread" /> class.
             </summary>
             <param name="loop">The loop to run on the thread.</param>
             <param name="shortLived">Whether the operation is short-lived (well suited for threadpool execution).</param>
            </member>
        <member name="M:FM.ManagedThread.Start">
             <summary>
             Starts the thread.
             </summary>
            </member>
        <member name="M:FM.ManagedThread.LoopBegin">
             <summary>
             Should be invoked when the loop begins before other code.
             </summary>
            </member>
        <member name="M:FM.ManagedThread.LoopEnd">
             <summary>
             Should be invoked when the loop ends after other code.
             </summary>
            </member>
        <member name="M:FM.ManagedThread.Sleep(System.Int32)">
             <summary>
             Sleeps the current thread for a specified period of time.
             </summary>
             <param name="millisecondsTimeout">The length of time to sleep in milliseconds.</param>
            </member>
        <member name="M:FM.ManagedThread.CurrentThreadId">
             <summary>
             Gets the current thread ID.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.NetworkBuffer">
             <summary>
             Writes network data to a buffer. 
             </summary>
            </member>
        <member name="M:FM.NetworkBuffer.ToBytes8(System.Int32)">
             <summary>
             Converts an integer to it's 8-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ToBytes16(System.Int32)">
             <summary>
             Converts an integer to it's 16-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ToBytes24(System.Int32)">
             <summary>
             Converts an integer to it's 24-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ToBytes32(System.Int64)">
             <summary>
             Converts an integer to it's 32-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ToBytes40(System.Int64)">
             <summary>
             Converts an integer to it's 40-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ToBytes48(System.Int64)">
             <summary>
             Converts an integer to it's 48-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ToBytes56(System.Int64)">
             <summary>
             Converts an integer to it's 56-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ToBytes64(System.Int64)">
             <summary>
             Converts an integer to it's 64-bit network representation.
             </summary>
             <param name="value">The integer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromData8(System.Byte[],System.Int32)">
             <summary>
             Converts an 8-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromData16(System.Byte[],System.Int32)">
             <summary>
             Converts a 16-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromData24(System.Byte[],System.Int32)">
             <summary>
             Converts a 24-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromData32(System.Byte[],System.Int32)">
             <summary>
             Converts a 32-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromData40(System.Byte[],System.Int32)">
             <summary>
             Converts a 40-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromData48(System.Byte[],System.Int32)">
             <summary>
             Converts a 48-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromData56(System.Byte[],System.Int32)">
             <summary>
             Converts a 56-bit network representation to an integer.
             </summary>
             <param name="data">data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromData64(System.Byte[],System.Int32)">
             <summary>
             Converts a 64-bit network representation to an integer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromBuffer8(FM.ByteCollection,System.Int32)">
             <summary>
             Converts an 8-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromBuffer16(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 16-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromBuffer24(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 24-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromBuffer32(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 32-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromBuffer40(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 40-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromBuffer48(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 48-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromBuffer56(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 56-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromBuffer64(FM.ByteCollection,System.Int32)">
             <summary>
             Converts a 64-bit network representation to an integer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromStream8(FM.ByteInputStream)">
             <summary>
             Converts an 8-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromStream16(FM.ByteInputStream)">
             <summary>
             Converts a 16-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromStream24(FM.ByteInputStream)">
             <summary>
             Converts a 24-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromStream32(FM.ByteInputStream)">
             <summary>
             Converts a 32-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromStream40(FM.ByteInputStream)">
             <summary>
             Converts a 40-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromStream48(FM.ByteInputStream)">
             <summary>
             Converts a 48-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromStream56(FM.ByteInputStream)">
             <summary>
             Converts a 56-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.FromStream64(FM.ByteInputStream)">
             <summary>
             Converts a 64-bit network representation to an integer.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData8(System.Int32,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies an 8-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData16(System.Int32,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 16-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData24(System.Int32,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 24-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData32(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 32-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData40(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 40-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData48(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 48-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData56(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 56-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData64(System.Int64,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 64-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque8(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies an 8-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque16(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 16-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque24(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 24-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque32(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 32-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque40(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 40-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque48(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 48-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque56(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 56-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque64(System.Byte[],System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Copies a 64-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData8(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Copies an 8-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData16(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Copies a 16-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData24(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Copies a 24-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData32(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 32-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData40(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 40-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData48(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 48-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData56(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 56-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteData64(System.Int64,System.Byte[],System.Int32)">
             <summary>
             Copies a 64-bit value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque8(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies an 8-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque16(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 16-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque24(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 24-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque32(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 32-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque40(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 40-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque48(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 48-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque56(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 56-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteDataOpaque64(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Copies a 64-bit-length opaque value to a buffer at a specific offset.
             </summary>
             <param name="value">The value.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBuffer(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBuffer8(System.Int32,FM.ByteCollection)">
             <summary>
             Adds an 8-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBuffer16(System.Int32,FM.ByteCollection)">
             <summary>
             Adds a 16-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBuffer24(System.Int32,FM.ByteCollection)">
             <summary>
             Adds a 24-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBuffer32(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 32-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBuffer40(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 40-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBuffer48(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 48-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBuffer56(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 56-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBuffer64(System.Int64,FM.ByteCollection)">
             <summary>
             Adds a 64-bit value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBufferOpaque8(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds an 8-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBufferOpaque16(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 16-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBufferOpaque24(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 24-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBufferOpaque32(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 32-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBufferOpaque40(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 40-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBufferOpaque48(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 48-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBufferOpaque56(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 56-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteBufferOpaque64(System.Byte[],FM.ByteCollection)">
             <summary>
             Adds a 64-bit-length opaque value to a buffer.
             </summary>
             <param name="value">The value.</param>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStream(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStream8(System.Int32,FM.ByteOutputStream)">
             <summary>
             Adds an 8-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStream16(System.Int32,FM.ByteOutputStream)">
             <summary>
             Adds a 16-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStream24(System.Int32,FM.ByteOutputStream)">
             <summary>
             Adds a 24-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStream32(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 32-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStream40(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 40-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStream48(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 48-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStream56(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 56-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStream64(System.Int64,FM.ByteOutputStream)">
             <summary>
             Adds a 64-bit value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStreamOpaque8(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds an 8-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStreamOpaque16(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 16-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStreamOpaque24(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 24-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStreamOpaque32(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 32-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStreamOpaque40(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 40-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStreamOpaque48(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 48-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStreamOpaque56(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 56-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.WriteStreamOpaque64(System.Byte[],FM.ByteOutputStream)">
             <summary>
             Adds a 64-bit-length opaque value to a stream.
             </summary>
             <param name="value">The value.</param>
             <param name="stream">The stream.</param>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData(System.Int32,System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a value from a buffer.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData8(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads an 8-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData16(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 16-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData24(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 24-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData32(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 32-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData40(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 40-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData48(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 48-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData56(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 56-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData64(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 64-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadDataOpaque8(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads an 8-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadDataOpaque16(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 16-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadDataOpaque24(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 24-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadDataOpaque32(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Reads a 32-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Reads a value from a buffer.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData8(System.Byte[],System.Int32)">
             <summary>
             Reads an 8-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData16(System.Byte[],System.Int32)">
             <summary>
             Reads a 16-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData24(System.Byte[],System.Int32)">
             <summary>
             Reads a 24-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData32(System.Byte[],System.Int32)">
             <summary>
             Reads a 32-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData40(System.Byte[],System.Int32)">
             <summary>
             Reads a 40-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData48(System.Byte[],System.Int32)">
             <summary>
             Reads a 48-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData56(System.Byte[],System.Int32)">
             <summary>
             Reads a 56-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadData64(System.Byte[],System.Int32)">
             <summary>
             Reads a 64-bit value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadDataOpaque8(System.Byte[],System.Int32)">
             <summary>
             Reads an 8-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadDataOpaque16(System.Byte[],System.Int32)">
             <summary>
             Reads a 16-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadDataOpaque24(System.Byte[],System.Int32)">
             <summary>
             Reads a 24-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadDataOpaque32(System.Byte[],System.Int32)">
             <summary>
             Reads a 32-bit-length opaque value from a buffer.
             </summary>
             <param name="data">The data.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer(System.Int32,FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a value from a buffer.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer8(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads an 8-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer16(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 16-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer24(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 24-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer32(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 32-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer40(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 40-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer48(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 48-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer56(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 56-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer64(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 64-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBufferOpaque8(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads an 8-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBufferOpaque16(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 16-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBufferOpaque24(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 24-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBufferOpaque32(FM.ByteCollection,System.Int32,System.Int32@)">
             <summary>
             Reads a 32-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset plus the value length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer(System.Int32,FM.ByteCollection,System.Int32)">
             <summary>
             Reads a value from a buffer.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer8(FM.ByteCollection,System.Int32)">
             <summary>
             Reads an 8-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer16(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 16-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer24(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 24-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer32(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 32-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer40(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 40-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer48(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 48-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer56(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 56-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBuffer64(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 64-bit value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBufferOpaque8(FM.ByteCollection,System.Int32)">
             <summary>
             Reads an 8-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBufferOpaque16(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 16-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBufferOpaque24(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 24-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadBufferOpaque32(FM.ByteCollection,System.Int32)">
             <summary>
             Reads a 32-bit-length opaque value from a buffer.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="offset">The offset.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStream(System.Int32,FM.ByteInputStream)">
             <summary>
             Reads a value from a stream.
             </summary>
             <param name="length">The number of bytes to read.</param>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStream8(FM.ByteInputStream)">
             <summary>
             Reads an 8-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStream16(FM.ByteInputStream)">
             <summary>
             Reads a 16-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStream24(FM.ByteInputStream)">
             <summary>
             Reads a 24-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStream32(FM.ByteInputStream)">
             <summary>
             Reads a 32-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStream40(FM.ByteInputStream)">
             <summary>
             Reads a 40-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStream48(FM.ByteInputStream)">
             <summary>
             Reads a 48-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStream56(FM.ByteInputStream)">
             <summary>
             Reads a 56-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStream64(FM.ByteInputStream)">
             <summary>
             Reads a 64-bit value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStreamOpaque8(FM.ByteInputStream)">
             <summary>
             Reads an 8-bit-length opaque value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStreamOpaque16(FM.ByteInputStream)">
             <summary>
             Reads a 16-bit-length opaque value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStreamOpaque24(FM.ByteInputStream)">
             <summary>
             Reads a 24-bit-length opaque value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.NetworkBuffer.ReadStreamOpaque32(FM.ByteInputStream)">
             <summary>
             Reads a 32-bit-length opaque value from a stream.
             </summary>
             <param name="stream">The stream.</param>
             <returns></returns>
            </member>
        <member name="T:FM.Randomizer">
             <summary>
             Utility class for random values.
             </summary>
            </member>
        <member name="M:FM.Randomizer.Next">
             <summary>
             Returns a nonnegative random number.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.Randomizer.Next(System.Int32)">
             <summary>
             Returns a nonnegative random number less than the specified maximum.
             </summary>
             <param name="maxValue">The maximum value (exclusive).</param>
             <returns></returns>
            </member>
        <member name="M:FM.Randomizer.Next(System.Int32,System.Int32)">
             <summary>
             Returns a random number within a specified range.
             </summary>
             <param name="minValue">The mininum value (inclusive).</param>
             <param name="maxValue">The maximum value (exclusive).</param>
             <returns></returns>
            </member>
        <member name="M:FM.Randomizer.NextBytes(System.Byte[])">
             <summary>
             Fills the elements of a specified array of bytes with random numbers.
             </summary>
             <param name="buffer">The array of bytes to fill.</param>
            </member>
        <member name="M:FM.Randomizer.NextDouble">
             <summary>
             Returns a random number between 0.0 and 1.0.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.Randomizer.RandomString(System.Int32)">
             <summary>
             Generates a random string of a specified size.
             </summary>
             <param name="size">The size of the output string.</param>
             <returns></returns>
            </member>
        <member name="T:FM.ShortHolder">
             <summary>
             Class to hold a short value passed by reference.
             </summary>
            </member>
        <member name="P:FM.ShortHolder.Value">
             <summary>
             Gets or sets the value.
             </summary>
            </member>
        <member name="M:FM.ShortHolder.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ShortHolder" /> class.
             </summary>
            </member>
        <member name="M:FM.ShortHolder.#ctor(System.Int16)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.ShortHolder" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.Splitter">
             <summary>
             Utility class for splitting strings.
             </summary>
            </member>
        <member name="M:FM.Splitter.Split(System.String,System.String)">
             <summary>
             Splits a string using a given delimiter.
             </summary>
             <param name="str">The string.</param>
             <param name="delimiter">The delimiter.</param>
             <returns></returns>
            </member>
        <member name="T:FM.TextLogProvider">
             <summary>
             Simple log provider that writes to a local string builder.
             </summary>
            </member>
        <member name="P:FM.TextLogProvider.Text">
             <summary>
             Gets the logged text.
             </summary>
            </member>
        <member name="P:FM.TextLogProvider.Callback">
             <summary>
             Gets or sets a callback to invoke
             whenever text is written to the log.
             </summary>
            </member>
        <member name="M:FM.TextLogProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TextLogProvider" /> class using <see cref="F:FM.LogLevel.Warn" />.
             </summary>
            </member>
        <member name="M:FM.TextLogProvider.#ctor(FM.LogLevel)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TextLogProvider" /> class.
             </summary>
             <param name="level">The log level.</param>
            </member>
        <member name="M:FM.TextLogProvider.Clear">
             <summary>
             Clears all text from the log
             and returns the former contents.
             </summary>
            </member>
        <member name="M:FM.TextLogProvider.WriteLine(System.String)">
             <summary>
             Writes a line of text to the log.
             </summary>
             <param name="text">The text to write to the log.</param>
            </member>
        <member name="M:FM.TextLogProvider.Log(FM.LogLevel,System.String,System.Exception)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.TextLogProvider.Log(FM.LogLevel,System.String)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.UdpSocket">
             <summary>
             UDP socket implementation.
             </summary>
            </member>
        <member name="P:FM.UdpSocket.IsClosed">
             <summary>
             Gets a value indicating whether this instance is closed.
             </summary>
            </member>
        <member name="P:FM.UdpSocket.MaxQueuedPackets">
             <summary>
             Gets or sets the maximum number of packets
             that can be queued at any given point in time.
             </summary>
            </member>
        <member name="P:FM.UdpSocket.IPv6">
             <summary>
             Gets a value indicating whether the socket supports IPv6.
             </summary>
            </member>
        <member name="P:FM.UdpSocket.LocalPort">
             <summary>
             Gets the local port.
             </summary>
            </member>
        <member name="P:FM.UdpSocket.LocalIPAddress">
             <summary>
             Gets the local IP address.
             </summary>
            </member>
        <member name="M:FM.UdpSocket.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.UdpSocket" /> class.
             </summary>
             <param name="ipv6">Whether an IPv6 socket should be created.</param>
            </member>
        <member name="M:FM.UdpSocket.Bind(System.String,System.Int32,System.Boolean@)">
             <summary>
             Binds the socket to a local endpoint.
             </summary>
             <param name="ipAddress">The local IP address.</param>
             <param name="port">The local port.</param>
             <param name="addressInUse">Whether or not the address is in use.</param>
            </member>
        <member name="M:FM.UdpSocket.Send(System.Byte[],System.String,System.Int32)">
             <summary>
             Sends data synchronously.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="ipAddress">The remote IP address.</param>
             <param name="port">The remote port.</param>
            </member>
        <member name="M:FM.UdpSocket.SendAsync(FM.UdpSendArgs)">
             <summary>
             Sends data asynchronously.
             </summary>
             <param name="sendArgs">The send arguments.</param>
            </member>
        <member name="M:FM.UdpSocket.ReceiveAsync(FM.UdpReceiveArgs,FM.UdpReceiveSuccessArgs@,FM.UdpReceiveFailureArgs@,FM.UdpReceiveCompleteArgs@)">
             <summary>
             Receives data asynchronously.
             </summary>
             <param name="receiveArgs">The receive arguments.</param>
             <param name="receiveSuccessArgs">The receive success arguments, if the operation succeeded synchronously.</param>
             <param name="receiveFailureArgs">The receive failure arguments, if the operation failed synchronously.</param>
             <param name="receiveCompleteArgs">The receive complete arguments, if the operation was completed synchronously.</param>
             <returns>
               <c>true</c> if the operation completed synchronously; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.UdpSocket.Close">
             <summary>
             Closes the socket.
             </summary>
            </member>
        <member name="T:FM.StringAssistant">
             <summary>
             Contains methods for string manipulation.
             </summary>
            </member>
        <member name="M:FM.StringAssistant.IsNullOrWhiteSpace(System.String)">
             <summary>
             
             </summary>
             <param name="s"></param>
             <returns></returns>
            </member>
        <member name="M:FM.StringAssistant.SubArray(System.String[],System.Int32)">
             <summary>
             Creates a subarray from an existing array.
             </summary>
             <param name="array">The source array.</param>
             <param name="offset">The offset into the source array.</param>
             <returns>The subarray.</returns>
            </member>
        <member name="M:FM.StringAssistant.SubArray(System.String[],System.Int32,System.Int32)">
             <summary>
             Creates a subarray from an existing array.
             </summary>
             <param name="array">The source array.</param>
             <param name="offset">The offset into the source array.</param>
             <param name="count">The number of elements to copy into the subarray.</param>
             <returns>The subarray.</returns>
            </member>
        <member name="T:FM.Dynamic">
             <summary>
             Supplies class instances with a key-value
             mapping to support dynamic property storage.
             </summary>
            </member>
        <member name="P:FM.Dynamic.DynamicProperties">
             <summary>
             Gets or sets the dynamic properties on this instance.
             </summary>
            </member>
        <member name="M:FM.Dynamic.GetDynamicValue(System.String)">
             <summary>
             Gets a property value from the local cache.
             </summary>
             <param name="key">The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.</param>
             <returns>The stored value, if found; otherwise null.</returns>
            </member>
        <member name="M:FM.Dynamic.SetDynamicValue(System.String,System.Object)">
             <summary>
             Sets a property value in the local cache.
             </summary>
             <param name="key">The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.</param>
             <param name="value">The property value. This can be any object that needs to be stored for future use.</param>
            </member>
        <member name="M:FM.Dynamic.UnsetDynamicValue(System.String)">
             <summary>
             Unsets a property value in the local cache.
             </summary>
             <param name="key">The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.</param>
             <returns><c>true</c> if the value was removed; otherwise, <c>false</c>.</returns>
            </member>
        <member name="T:FM.HttpTransfer">
             <summary>
             Base class that defines methods for transferring content over HTTP.
             </summary>
            </member>
        <member name="M:FM.HttpTransfer.SendBinary(FM.HttpRequestArgs)">
             <summary>
             Sends binary content synchronously using the specified arguments.
             </summary>
             <param name="requestArgs">The request arguments.</param>
             <returns>The response arguments from the server.</returns>
            </member>
        <member name="M:FM.HttpTransfer.SendText(FM.HttpRequestArgs)">
             <summary>
             Sends text content synchronously using the specified arguments.
             </summary>
             <param name="requestArgs">The request arguments.</param>
             <returns>The response arguments from the server.</returns>
            </member>
        <member name="M:FM.HttpTransfer.SendBinaryAsync(FM.HttpRequestArgs,FM.SingleAction{FM.HttpResponseArgs})">
             <summary>
             Sends binary content asynchronously using the specified arguments.
             </summary>
             <param name="requestArgs">The request arguments.</param>
             <param name="callback">The callback to execute on success or failure.</param>
            </member>
        <member name="M:FM.HttpTransfer.SendTextAsync(FM.HttpRequestArgs,FM.SingleAction{FM.HttpResponseArgs})">
             <summary>
             Sends text content asynchronously using the specified arguments.
             </summary>
             <param name="requestArgs">The request arguments.</param>
             <param name="callback">The callback to execute on success or failure.</param>
            </member>
        <member name="M:FM.HttpTransfer.Shutdown">
             <summary>
             Releases any resources and shuts down.
             </summary>
            </member>
        <member name="E:FM.HttpTransfer.OnSendStart">
             <summary>
             Raised before an HTTP request is sent.
             </summary>
             <parameter name="args">The <see cref="T:FM.HttpSendStartArgs" /> associated with the event.</parameter>
            </member>
        <member name="E:FM.HttpTransfer.OnSendFinish">
             <summary>
             Raised before an HTTP request is sent.
             </summary>
             <parameter name="args">The <see cref="T:FM.HttpSendFinishArgs" /> associated with the event.</parameter>
            </member>
        <member name="M:FM.HttpTransfer.Send(FM.HttpRequestArgs)">
             <summary>
             Sends a request synchronously.
             </summary>
             <param name="requestArgs">The request parameters.</param>
             <returns>The resulting response.</returns>
            </member>
        <member name="M:FM.HttpTransfer.SendAsync(FM.HttpRequestArgs,FM.SingleAction{FM.HttpResponseArgs})">
             <summary>
             Sends a request asynchronously.
             </summary>
             <param name="requestArgs">The request parameters.</param>
             <param name="callback">The callback to execute with the resulting response.</param>
            </member>
        <member name="M:FM.HttpTransfer.AddQueryToUrl(System.String,System.String)">
             <summary>
             Escapes and adds a query parameter as a key/empty-value pair to a URL.
             </summary>
             <param name="url">The URL with the query to which the key/value should be added.</param>
             <param name="key">The key of the query parameter to add.</param>
             <returns>The original URL with the query parameter added.</returns>
            </member>
        <member name="M:FM.HttpTransfer.AddQueryToUrl(System.String,System.String,System.String)">
             <summary>
             Escapes and adds a query parameter as a key/value pair to a URL.
             </summary>
             <param name="url">The URL with the query to which the key/value should be added.</param>
             <param name="key">The key of the query parameter to add.</param>
             <param name="value">The value of the query parameter to add.</param>
             <returns>The original URL with the query parameter added.</returns>
            </member>
        <member name="P:FM.HttpTransfer.WildcardCharacters">
             <summary>
             Gets or sets the wildcard characters used
             to replace asterisks in ReplaceWildcards.
             </summary>
            </member>
        <member name="M:FM.HttpTransfer.GetRandomWildcardCharacter">
             <summary>
             Gets a random wildcard character.
             </summary>
             <returns>A random wildcard character.</returns>
            </member>
        <member name="M:FM.HttpTransfer.ReplaceWildcards(System.String)">
             <summary>
             Replaces asterisks in URLs with characters from
             WildcardCharacters.
             </summary>
             <param name="url">The URL with asterisks.</param>
             <returns></returns>
            </member>
        <member name="T:FM.HttpTransferFactory">
             <summary>
             Creates implementations of <see cref="T:FM.HttpTransfer" />.
             </summary>
            </member>
        <member name="P:FM.HttpTransferFactory.CreateHttpTransfer">
             <summary>
             Gets or sets the callback that creates an HTTP-based transfer class.
             </summary>
            </member>
        <member name="M:FM.HttpTransferFactory.GetHttpTransfer">
             <summary>
             Gets an instance of the HTTP-based transfer class.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.HttpWebRequestTransfer">
             <summary>
             Defines methods for transferring content over HTTP using the HttpWebRequest.
             </summary>
            </member>
        <member name="M:FM.HttpWebRequestTransfer.GetPlatformCode">
             <summary>
             Gets the short code indicating the current platform.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.HttpWebRequestTransfer.SendBinary(FM.HttpRequestArgs)">
             <summary>
             Sends binary content synchronously using the specified arguments.
             </summary>
             <param name="requestArgs">The request arguments.</param>
             <returns>The response arguments from the server.</returns>
            </member>
        <member name="M:FM.HttpWebRequestTransfer.SendText(FM.HttpRequestArgs)">
             <summary>
             Sends text content synchronously using the specified arguments.
             </summary>
             <param name="requestArgs">The request arguments.</param>
             <returns>The response arguments from the server.</returns>
            </member>
        <member name="M:FM.HttpWebRequestTransfer.SendBinaryAsync(FM.HttpRequestArgs,FM.SingleAction{FM.HttpResponseArgs})">
             <summary>
             Sends binary content asynchronously using the specified arguments.
             </summary>
             <param name="requestArgs">The request arguments.</param>
             <param name="callback">The callback to execute on success or failure.</param>
            </member>
        <member name="M:FM.HttpWebRequestTransfer.SendTextAsync(FM.HttpRequestArgs,FM.SingleAction{FM.HttpResponseArgs})">
             <summary>
             Sends text content asynchronously using the specified arguments.
             </summary>
             <param name="requestArgs">The request arguments.</param>
             <param name="callback">The callback to execute on success or failure.</param>
            </member>
        <member name="M:FM.HttpWebRequestTransfer.Shutdown">
             <summary>
             Releases any resources and shuts down.
             </summary>
            </member>
        <member name="P:FM.HttpWebRequestTransfer.UseProxy">
             <summary>
             Gets or sets whether to use the system
             proxy when creating an HttpWebRequest.
             </summary>
            </member>
        <member name="T:FM.JsonChecker">
             <summary>
             A pushdown automaton that very quickly determines if a JSON text is
             syntactically correct.
             </summary>
            </member>
        <member name="M:FM.JsonChecker.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.JsonChecker" /> class.
             </summary>
            </member>
        <member name="M:FM.JsonChecker.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.JsonChecker" /> class.
             </summary>
             <param name="depth">The maximum depth to recurse.</param>
            </member>
        <member name="M:FM.JsonChecker.CheckString(System.String)">
             <summary>
             Checks if the specified string is valid JSON.
             </summary>
             <param name="str">The string to check.</param>
             <returns></returns>
            </member>
        <member name="T:FM.JsonLite">
             <summary>
             Contains methods for serializing/deserializing System.Json.JsonValue instances.
             </summary>
            </member>
        <member name="M:FM.JsonLite.Deserialize(System.String)">
             <summary>
             Deserializes a JsonValue instance from a JSON string.
             </summary>
             <param name="json">The JsonValue instance serialized as a JSON string.</param>
             <returns>The deserialized JsonValue instance.</returns>
            </member>
        <member name="M:FM.JsonLite.DeserializeObject(System.String)">
             <summary>
             Deserializes a JsonObject instance from a JSON string.
             </summary>
             <param name="json">The JsonObject instance serialized as a JSON string.</param>
             <returns>The deserialized JsonObject instance.</returns>
            </member>
        <member name="M:FM.JsonLite.DeserializeArray(System.String)">
             <summary>
             Deserializes a JsonArray instance from a JSON string.
             </summary>
             <param name="json">The JsonArray instance serialized as a JSON string.</param>
             <returns>The deserialized JsonArray instance.</returns>
            </member>
        <member name="M:FM.JsonLite.DeserializePrimitive(System.String)">
             <summary>
             Deserializes a JsonPrimitive instance from a JSON string.
             </summary>
             <param name="json">The JsonPrimitive instance serialized as a JSON string.</param>
             <returns>The deserialized JsonPrimitive instance.</returns>
            </member>
        <member name="M:FM.JsonLite.Serialize(System.Json.JsonValue)">
             <summary>
             Serializes a JsonValue instance to a JSON string.
             </summary>
             <param name="value">The JsonValue instance.</param>
             <returns>The JsonValue instance serialized as a JSON string.</returns>
            </member>
        <member name="T:FM.LogLevel">
             <summary>
             The level at which to log.
             </summary>
            </member>
        <member name="F:FM.LogLevel.Debug">
             <summary>
             Logs messages relevant to development and troubleshooting.
             </summary>
            </member>
        <member name="F:FM.LogLevel.Info">
             <summary>
             Logs messages relevant to expected use.
             </summary>
            </member>
        <member name="F:FM.LogLevel.Warn">
             <summary>
             Logs messages relevant to potential pit-falls.
             </summary>
            </member>
        <member name="F:FM.LogLevel.Error">
             <summary>
             Logs messages relevant to errors that allow program execution to continue.
             </summary>
            </member>
        <member name="F:FM.LogLevel.Fatal">
             <summary>
             Logs messages relevant to errors that require the program to terminate.
             </summary>
            </member>
        <member name="F:FM.LogLevel.None">
             <summary>
             Logs nothing.
             </summary>
            </member>
        <member name="T:FM.LogProvider">
             <summary>
             Base class for all logging provider implementations.
             </summary>
            </member>
        <member name="P:FM.LogProvider.Level">
             <summary>
             Gets or sets the log level.
             </summary>
            </member>
        <member name="M:FM.LogProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.LogProvider" /> class.
             </summary>
            </member>
        <member name="M:FM.LogProvider.IsEnabled(FM.LogLevel)">
             <summary>
             Determines whether logging is enabled for the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <returns>
               <c>true</c> if logging is enabled for the specified log level; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.LogProvider.Log(FM.LogLevel,System.String)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.LogProvider.Log(FM.LogLevel,System.String,System.Exception)">
             <summary>
             Logs a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="P:FM.LogProvider.IsDebugEnabled">
             <summary>
             Gets or sets a value indicating whether logging is enabled for debug-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for debug-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.LogProvider.IsInfoEnabled">
             <summary>
             Gets or sets a value indicating whether logging is enabled for info-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for info-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.LogProvider.IsWarnEnabled">
             <summary>
             Gets or sets a value indicating whether logging is enabled for warn-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for warn-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.LogProvider.IsErrorEnabled">
             <summary>
             Gets or sets a value indicating whether logging is enabled for error-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for error-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.LogProvider.IsFatalEnabled">
             <summary>
             Gets or sets a value indicating whether logging is enabled for fatal-level messages.
             </summary>
             <value>
               <c>true</c> if logging is enabled for fatal-level messages; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="M:FM.LogProvider.Debug(System.String)">
             <summary>
             Logs a debug-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.LogProvider.Info(System.String)">
             <summary>
             Logs an info-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.LogProvider.Warn(System.String)">
             <summary>
             Logs a warn-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.LogProvider.Error(System.String)">
             <summary>
             Logs an error-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.LogProvider.Fatal(System.String)">
             <summary>
             Logs a fatal-level message.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.LogProvider.Debug(System.String,System.Exception)">
             <summary>
             Logs a debug-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.LogProvider.Info(System.String,System.Exception)">
             <summary>
             Logs an info-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.LogProvider.Warn(System.String,System.Exception)">
             <summary>
             Logs a warn-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.LogProvider.Error(System.String,System.Exception)">
             <summary>
             Logs an error-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.LogProvider.Fatal(System.String,System.Exception)">
             <summary>
             Logs a fatal-level message.
             </summary>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="M:FM.LogProvider.DebugFormat(System.String,System.String[])">
             <summary>
             Logs a debug-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.LogProvider.InfoFormat(System.String,System.String[])">
             <summary>
             Logs an info-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.LogProvider.WarnFormat(System.String,System.String[])">
             <summary>
             Logs a warn-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.LogProvider.ErrorFormat(System.String,System.String[])">
             <summary>
             Logs an error-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.LogProvider.FatalFormat(System.String,System.String[])">
             <summary>
             Logs a fatal-level message.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="M:FM.LogProvider.GetPrefix(FM.LogLevel,System.Boolean)">
             <summary>
             Converts a log-level to a 5-character string for
             consistently-spaced character sequences.
             </summary>
             <param name="level">The log level.</param>
             <param name="includeTimestamp">Whether to include a timestamp in the prefix.</param>
             <returns>The log level as an upper-case string
             with right-side whitespace padding to ensure
             a 5-character sequence.</returns>
            </member>
        <member name="M:FM.LogProvider.GetPrefixLevel(FM.LogLevel)">
             <summary>
             Converts a log-level to a 5-character string for
             consistently-spaced character sequences.
             </summary>
             <param name="level">The log level.</param>
             <returns>The log level as an upper-case string
             with right-side whitespace padding to ensure
             a 5-character sequence.</returns>
            </member>
        <member name="M:FM.LogProvider.GetPrefixTimestamp(System.DateTime)">
             <summary>
             Converts a timestamp to a string formatted for
             rendering in a log message (yyyy/MM/dd-hh:mm:ss).
             </summary>
             <param name="timestamp">The timestamp.</param>
             <returns>The timestamp as a formatted string.</returns>
            </member>
        <member name="M:FM.LogProvider.WriteLine(System.String)">
             <summary>
             Writes a line of text to the log.
             </summary>
             <param name="text">The text to write to the log.</param>
            </member>
        <member name="M:FM.LogProvider.FormatAndWriteLine(System.String,System.String[])">
             <summary>
             Writes a line of text to the log.
             </summary>
             <param name="format">A composite format string.</param>
             <param name="args">An array containing zero or more objects to format.</param>
            </member>
        <member name="T:FM.NullLogProvider">
             <summary>
             An implementation of a logging provider that does nothing.
             </summary>
            </member>
        <member name="M:FM.NullLogProvider.WriteLine(System.String)">
             <summary>
             Writes a line of text to the log.
             </summary>
             <param name="text">The text to write to the log.</param>
            </member>
        <member name="M:FM.NullLogProvider.Log(FM.LogLevel,System.String)">
             <summary>
             Ignores a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.NullLogProvider.Log(FM.LogLevel,System.String,System.Exception)">
             <summary>
             Ignores a message at the specified log level.
             </summary>
             <param name="level">The log level.</param>
             <param name="message">The message.</param>
             <param name="ex">The exception.</param>
            </member>
        <member name="T:FM.ParseAssistant">
             <summary>
             Contains methods for cross-platform primitive parsing from strings.
             </summary>
            </member>
        <member name="M:FM.ParseAssistant.ParseByteValue(System.String)">
             <summary>
             Parses a byte value from a string.
             </summary>
             <param name="s">The string.</param>
             <returns>The parsed byte value.</returns>
            </member>
        <member name="M:FM.ParseAssistant.ParseShortValue(System.String)">
             <summary>
             Parses a short value from a string.
             </summary>
             <param name="s">The string.</param>
             <returns>The parsed short value.</returns>
            </member>
        <member name="M:FM.ParseAssistant.ParseIntegerValue(System.String)">
             <summary>
             Parses an integer value from a string.
             </summary>
             <param name="s">The string.</param>
             <returns>The parsed integer value.</returns>
            </member>
        <member name="M:FM.ParseAssistant.ParseLongValue(System.String)">
             <summary>
             Parses a long value from a string.
             </summary>
             <param name="s">The string.</param>
             <returns>The parsed long value.</returns>
            </member>
        <member name="M:FM.ParseAssistant.ParseFloatValue(System.String)">
             <summary>
             Parses a float value from a string.
             </summary>
             <param name="s">The string.</param>
             <returns>The parsed float value.</returns>
            </member>
        <member name="M:FM.ParseAssistant.ParseDoubleValue(System.String)">
             <summary>
             Parses a double value from a string.
             </summary>
             <param name="s">The string.</param>
             <returns>The parsed double value.</returns>
            </member>
        <member name="M:FM.ParseAssistant.ParseDecimalValue(System.String)">
             <summary>
             Parses a decimal value from a string.
             </summary>
             <param name="s">The string.</param>
             <returns>The parsed decimal value.</returns>
            </member>
        <member name="M:FM.ParseAssistant.ParseBooleanValue(System.String)">
             <summary>
             Parses a boolean value from a string.
             </summary>
             <param name="s">The string.</param>
             <returns>The parsed boolean value.</returns>
            </member>
        <member name="M:FM.ParseAssistant.ParseGuidValue(System.String)">
             <summary>
             Parses a GUID value from a string.
             </summary>
             <param name="s">The string.</param>
             <returns>The parsed GUID value.</returns>
            </member>
        <member name="M:FM.ParseAssistant.TryParseByteValue(System.String,System.Byte@)">
             <summary>
             Attempts to parse a byte value from a string.
             </summary>
             <param name="s">The string.</param>
             <param name="byteResult">The parsed byte value.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.ParseAssistant.TryParseShortValue(System.String,System.Int16@)">
             <summary>
             Attempts to parse a short value from a string.
             </summary>
             <param name="s">The string.</param>
             <param name="shortResult">The parsed short value.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.ParseAssistant.TryParseIntegerValue(System.String,System.Int32@)">
             <summary>
             Attempts to parse an integer value from a string.
             </summary>
             <param name="s">The string.</param>
             <param name="intResult">The parsed integer value.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.ParseAssistant.TryParseLongValue(System.String,System.Int64@)">
             <summary>
             Attempts to parse a long value from a string.
             </summary>
             <param name="s">The string.</param>
             <param name="longResult">The parsed long value.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.ParseAssistant.TryParseFloatValue(System.String,System.Single@)">
             <summary>
             Attempts to parse a float value from a string.
             </summary>
             <param name="s">The string.</param>
             <param name="floatResult">The parsed float value.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.ParseAssistant.TryParseDoubleValue(System.String,System.Double@)">
             <summary>
             Attempts to parse a double value from a string.
             </summary>
             <param name="s">The string.</param>
             <param name="doubleResult">The parsed double value.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.ParseAssistant.TryParseDecimalValue(System.String,System.Decimal@)">
             <summary>
             Attempts to parse a decimal value from a string.
             </summary>
             <param name="s">The string.</param>
             <param name="decimalResult">The parsed decimal value.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.ParseAssistant.TryParseBooleanValue(System.String,System.Boolean@)">
             <summary>
             Attempts to parse a boolean value from a string.
             </summary>
             <param name="s">The string.</param>
             <param name="boolResult">The parsed boolean value.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.ParseAssistant.TryParseGuidValue(System.String,System.Guid@)">
             <summary>
             Attempts to parse a GUID value from a string.
             </summary>
             <param name="s">The string.</param>
             <param name="guidResult">The parsed GUID value.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="T:FM.Serializable">
             <summary>
             Base definition for classes that allow serialization to/from JSON.
             </summary>
            </member>
        <member name="P:FM.Serializable.IsDirty">
             <summary>
             Gets or sets a value indicating whether this instance is dirty.
             </summary>
            </member>
        <member name="P:FM.Serializable.IsSerialized">
             <summary>
             Gets or sets a value indicating whether this instance is serialized.
             </summary>
            </member>
        <member name="P:FM.Serializable.Serialized">
             <summary>
             Gets or sets the serialized value of this instance.
             </summary>
            </member>
        <member name="M:FM.Serializable.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.Serializable" /> class.
             </summary>
            </member>
        <member name="T:FM.DeserializeCallback`1">
             <summary>
             Method signature for taking a property name and JSON value and assigning it to an object.
             </summary>
             <typeparam name="T">The type of the object to deserialize.</typeparam>
             <param name="target">The object being deserialized.</param>
             <param name="name">The name of the property to assign.</param>
             <param name="valueJson">The value of the property to assign in JSON format.</param>
            </member>
        <member name="T:FM.SerializeCallback`1">
             <summary>
             Method signature for storing property values in JSON format in a hashtable.
             </summary>
             <typeparam name="T">The type of the object to serialize.</typeparam>
             <param name="source">The object being serialized.</param>
             <param name="jsonObject">The hashtable of property names to JSON values.</param>
            </member>
        <member name="T:FM.Serializer">
             <summary>
             Provides methods for serializing/deserializing .NET value types
             as well as facilities for converting objects and arrays if
             appropriate callbacks are supplied to assist with the conversion.
             </summary>
            </member>
        <member name="M:FM.Serializer.SerializeObjectFast``1(``0,FM.SerializeCallback{``0})">
             <summary>
             Serializes a <see cref="T:FM.Serializable" /> object into a JSON string.
             </summary>
             <typeparam name="T">The type of the object to serialize.</typeparam>
             <param name="source">The object being serialized.</param>
             <param name="callback">The method used for serializing properties.</param>
             <returns>The object as a JSON string.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeObject``1(``0,FM.SerializeCallback{``0})">
             <summary>
             Serializes an object into a JSON string.
             </summary>
             <typeparam name="T">The type of the object to serialize.</typeparam>
             <param name="source">The object being serialized.</param>
             <param name="callback">The method used for serializing properties.</param>
             <returns>The object as a JSON string.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeObjectFast``1(System.String,FM.EmptyFunction{``0},FM.DeserializeCallback{``0})">
             <summary>
             Deserializes a JSON string into a <see cref="T:FM.Serializable" /> target object type.
             </summary>
             <typeparam name="T">The type of the object to deserialize.</typeparam>
             <param name="json">The JSON-encoded string.</param>
             <param name="creator">The method used for creating a new object.</param>
             <param name="callback">The method used for deserializing a property.</param>
             <returns>The deserialized object.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeObject``1(System.String,FM.EmptyFunction{``0},FM.DeserializeCallback{``0})">
             <summary>
             Deserializes a JSON string into a target object type.
             </summary>
             <typeparam name="T">The type of the object to deserialize.</typeparam>
             <param name="json">The JSON-encoded string.</param>
             <param name="creator">The method used for creating a new object.</param>
             <param name="callback">The method used for deserializing a property.</param>
             <returns>The deserialized object.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeObjectArrayFast``1(``0[],FM.SerializeCallback{``0})">
             <summary>
             Serializes a <see cref="T:FM.Serializable" /> object array into a JSON string.
             </summary>
             <typeparam name="T">The type of the object to serialize.</typeparam>
             <param name="objects">The object array being serialized.</param>
             <param name="callback">The method used for serializing objects.</param>
             <returns>The object array as a JSON string.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeObjectArray``1(``0[],FM.SerializeCallback{``0})">
             <summary>
             Serializes an object array into a JSON string.
             </summary>
             <typeparam name="T">The type of the object to serialize.</typeparam>
             <param name="objects">The object array being serialized.</param>
             <param name="callback">The method used for serializing objects.</param>
             <returns>The object array as a JSON string.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeObjectArrayFast``1(System.String,FM.EmptyFunction{``0},FM.DeserializeCallback{``0})">
             <summary>
             Deserializes a JSON string into an array of <see cref="T:FM.Serializable" /> target object types.
             </summary>
             <typeparam name="T">The type of the object to deserialize.</typeparam>
             <param name="json">The JSON-encoded string.</param>
             <param name="creator">The method used for creating an object.</param>
             <param name="callback">The method used for deserializing an object.</param>
             <returns>An array of deserialized objects.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeObjectArray``1(System.String,FM.EmptyFunction{``0},FM.DeserializeCallback{``0})">
             <summary>
             Deserializes a JSON string into an array of target object types.
             </summary>
             <typeparam name="T">The type of the object to deserialize.</typeparam>
             <param name="json">The JSON-encoded string.</param>
             <param name="creator">The method used for creating an object.</param>
             <param name="callback">The method used for deserializing an object.</param>
             <returns>An array of deserialized objects.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeRawArray(System.String[])">
             <summary>
             Serializes a raw array to JSON.
             </summary>
             <param name="jsons">An array of raw values.</param>
             <returns>A JSON-serialized raw array.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeRawArray(System.String)">
             <summary>
             Deserializes a raw array from JSON.
             </summary>
             <param name="json">A JSON-serialized raw array.</param>
             <returns>An array of raw values.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeStringArray(System.String[])">
             <summary>
             Serializes a string array to JSON.
             </summary>
             <param name="array">An array of string values.</param>
             <returns>A JSON-serialized string array.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeStringArray(System.String)">
             <summary>
             Deserializes a simple string array from JSON (no commas in strings).
             </summary>
             <param name="arrayJson">A JSON-serialized string array.</param>
             <returns>An array of string values.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeRaw(System.String)">
             <summary>
             Serializes a piece of raw JSON.
             </summary>
             <param name="dataJson">The raw data.</param>
             <returns>The serialized data.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeRaw(System.String)">
             <summary>
             Deserializes a piece of raw JSON.
             </summary>
             <param name="dataJson">The raw data.</param>
             <returns>The deserialized data.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeString(System.String)">
             <summary>
             Serializes a string.
             </summary>
             <param name="value">The string to serialize.</param>
             <returns>The serialized string value.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeString(System.String)">
             <summary>
             Deserializes a string.
             </summary>
             <param name="valueJson">The string to deserialize.</param>
             <returns>The deserialized string value.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeBooleanArray(System.Boolean[])">
             <summary>
             Serializes a boolean array to JSON.
             </summary>
             <param name="array">An array of boolean values.</param>
             <returns>A JSON-serialized boolean array.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeBooleanArray(System.String)">
             <summary>
             Deserializes a boolean array from JSON.
             </summary>
             <param name="arrayJson">A JSON-serialized boolean array.</param>
             <returns>An array of boolean values.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeBoolean(System.Nullable{System.Boolean})">
             <summary>
             Serializes a boolean value.
             </summary>
             <param name="value">The boolean to serialize.</param>
             <returns>The serialized boolean value.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeBoolean(System.String)">
             <summary>
             Deserializes a boolean value.
             </summary>
             <param name="valueJson">The boolean JSON to deserialize.</param>
             <returns>The deserialized boolean value.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeIntegerArray(System.Int32[])">
             <summary>
             Serializes a integer array to JSON.
             </summary>
             <param name="array">An array of integer values.</param>
             <returns>A JSON-serialized integer array.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeIntegerArray(System.String)">
             <summary>
             Deserializes a integer array from JSON.
             </summary>
             <param name="arrayJson">A JSON-serialized integer array.</param>
             <returns>An array of integer values.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeInteger(System.Nullable{System.Int32})">
             <summary>
             Serializes an integer value.
             </summary>
             <param name="value">The integer to serialize.</param>
             <returns>The serialized integer value.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeInteger(System.String)">
             <summary>
             Deserializes an integer value.
             </summary>
             <param name="valueJson">The integer JSON to deserialize.</param>
             <returns>The deserialized integer value.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeLongArray(System.Int64[])">
             <summary>
             Serializes a long array to JSON.
             </summary>
             <param name="array">An array of long values.</param>
             <returns>A JSON-serialized long array.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeLongArray(System.String)">
             <summary>
             Deserializes a long array from JSON.
             </summary>
             <param name="arrayJson">A JSON-serialized long array.</param>
             <returns>An array of long values.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeLong(System.Nullable{System.Int64})">
             <summary>
             Serializes a long value.
             </summary>
             <param name="value">The long to serialize.</param>
             <returns>The serialized long value.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeLong(System.String)">
             <summary>
             Deserializes a long value.
             </summary>
             <param name="valueJson">The long JSON to deserialize.</param>
             <returns>The deserialized long value.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeDecimalArray(System.Decimal[])">
             <summary>
             Serializes a decimal array to JSON.
             </summary>
             <param name="array">An array of decimal values.</param>
             <returns>A JSON-serialized decimal array.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeDecimalArray(System.String)">
             <summary>
             Deserializes a decimal array from JSON.
             </summary>
             <param name="arrayJson">A JSON-serialized decimal array.</param>
             <returns>An array of decimal values.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeDecimal(System.Nullable{System.Decimal})">
             <summary>
             Serializes a decimal value.
             </summary>
             <param name="value">The decimal to serialize.</param>
             <returns>The serialized decimal value.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeDecimal(System.String)">
             <summary>
             Deserializes a decimal value.
             </summary>
             <param name="valueJson">The decimal JSON to deserialize.</param>
             <returns>The deserialized decimal value.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeDoubleArray(System.Double[])">
             <summary>
             Serializes a double array to JSON.
             </summary>
             <param name="array">An array of double values.</param>
             <returns>A JSON-serialized double array.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeDoubleArray(System.String)">
             <summary>
             Deserializes a double array from JSON.
             </summary>
             <param name="arrayJson">A JSON-serialized double array.</param>
             <returns>An array of double values.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeDouble(System.Nullable{System.Double})">
             <summary>
             Serializes a double value.
             </summary>
             <param name="value">The double to serialize.</param>
             <returns>The serialized double value.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeDouble(System.String)">
             <summary>
             Deserializes a double value.
             </summary>
             <param name="valueJson">The double JSON to deserialize.</param>
             <returns>The deserialized double value.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeFloatArray(System.Single[])">
             <summary>
             Serializes a float array to JSON.
             </summary>
             <param name="array">An array of float values.</param>
             <returns>A JSON-serialized float array.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeFloatArray(System.String)">
             <summary>
             Deserializes a float array from JSON.
             </summary>
             <param name="arrayJson">A JSON-serialized float array.</param>
             <returns>An array of float values.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeFloat(System.Nullable{System.Single})">
             <summary>
             Serializes a float value.
             </summary>
             <param name="value">The float to serialize.</param>
             <returns>The serialized float value.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeFloat(System.String)">
             <summary>
             Deserializes a float value.
             </summary>
             <param name="valueJson">The float JSON to deserialize.</param>
             <returns>The deserialized float value.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeGuidArray(System.Guid[])">
             <summary>
             Serializes a GUID array to JSON.
             </summary>
             <param name="array">An array of GUID values.</param>
             <returns>A JSON-serialized GUID array.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeGuidArray(System.String)">
             <summary>
             Deserializes a GUID array from JSON.
             </summary>
             <param name="arrayJson">A JSON-serialized GUID array.</param>
             <returns>An array of GUID values.</returns>
            </member>
        <member name="M:FM.Serializer.SerializeGuid(System.Nullable{System.Guid})">
             <summary>
             Serializes a globally unique identifier.
             </summary>
             <param name="value">The GUID to serialize.</param>
             <returns>The serialized GUID.</returns>
            </member>
        <member name="M:FM.Serializer.DeserializeGuid(System.String)">
             <summary>
             Deserializes a globally unique identifier.
             </summary>
             <param name="valueJson">The GUID JSON to deserialize.</param>
             <returns>The deserialized GUID.</returns>
            </member>
        <member name="M:FM.Serializer.TrimQuotes(System.String)">
             <summary>
             Trims the quotes from a JavaScript string value.
             </summary>
             <param name="value">The JavaScript string value.</param>
             <returns>The string without quotes.</returns>
            </member>
        <member name="M:FM.Serializer.EscapeString(System.String)">
             <summary>
             Escapes any special characters in a string.
             </summary>
             <param name="text">The string without escaped characters.</param>
             <returns>The escaped string.</returns>
            </member>
        <member name="M:FM.Serializer.UnescapeString(System.String)">
             <summary>
             Unescapes any special characters from a string.
             </summary>
             <param name="text">The string with escaped characters.</param>
             <returns>The unescaped string.</returns>
            </member>
        <member name="M:FM.Serializer.IsValidJson(System.String)">
             <summary>
             Determines whether the specified JSON string is valid.
             </summary>
             <param name="json">The JSON string to validate.</param>
             <returns>True if the JSON string is valid; false otherwise.</returns>
            </member>
        <member name="T:FM.TcpSocket">
             <summary>
             Cross-platform TCP socket implementation with options for SSL.
             </summary>
            </member>
        <member name="P:FM.TcpSocket.IsServer">
             <summary>
             Gets a value indicating whether the socket is going to accept new incoming connections.
             </summary>
            </member>
        <member name="P:FM.TcpSocket.IsSecure">
             <summary>
             Gets a value indicating whether the socket is secure.
             </summary>
            </member>
        <member name="P:FM.TcpSocket.IPv6">
             <summary>
             Gets a value indicating whether the socket supports IPv6.
             </summary>
            </member>
        <member name="P:FM.TcpSocket.LocalPort">
             <summary>
             Gets the local port.
             </summary>
            </member>
        <member name="P:FM.TcpSocket.LocalIPAddress">
             <summary>
             Gets the local IP address.
             </summary>
            </member>
        <member name="P:FM.TcpSocket.RemotePort">
             <summary>
             Gets the remote port.
             </summary>
            </member>
        <member name="P:FM.TcpSocket.RemoteIPAddress">
             <summary>
             Gets the remote IP address.
             </summary>
            </member>
        <member name="P:FM.TcpSocket.IsClosed">
             <summary>
             Gets a value indicating whether this instance is closed.
             </summary>
            </member>
        <member name="M:FM.TcpSocket.#ctor(System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TcpSocket" /> class.
             </summary>
             <param name="server">Whether the socket is going to accept new incoming connections.</param>
             <param name="ipv6">Whether an IPv6 socket should be created.</param>
             <param name="secure">Whether to send data securely using SSL.</param>
            </member>
        <member name="M:FM.TcpSocket.#ctor(System.Net.Sockets.Socket)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TcpSocket" /> class.
             </summary>
             <param name="socket">The existing socket.</param>
            </member>
        <member name="M:FM.TcpSocket.Bind(System.String,System.Int32,System.Boolean@)">
             <summary>
             Binds the socket to a local endpoint.
             </summary>
             <param name="ipAddress">The local IP address.</param>
             <param name="port">The local port.</param>
             <param name="addressInUse">Whether or not the address is in use.</param>
            </member>
        <member name="M:FM.TcpSocket.AcceptAsync(FM.TcpAcceptArgs)">
             <summary>
             Accepts a socket asynchronously.
             </summary>
             <param name="acceptArgs">The accept arguments.</param>
            </member>
        <member name="M:FM.TcpSocket.ConnectAsync(FM.TcpConnectArgs)">
             <summary>
             Connects the socket asynchronously.
             </summary>
             <param name="connectArgs">The connect arguments.</param>
            </member>
        <member name="M:FM.TcpSocket.Send(System.Byte[])">
             <summary>
             Sends data synchronously.
             </summary>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.TcpSocket.SendAsync(FM.TcpSendArgs)">
             <summary>
             Sends data asynchronously.
             </summary>
             <param name="sendArgs">The send arguments.</param>
            </member>
        <member name="M:FM.TcpSocket.ReceiveAsync(FM.TcpReceiveArgs)">
             <summary>
             Receives data asynchronously.
             </summary>
             <param name="receiveArgs">The receive arguments.</param>
            </member>
        <member name="M:FM.TcpSocket.Close">
             <summary>
             Closes the socket.
             </summary>
            </member>
        <member name="T:FM.Deferrer">
             <summary>
             Timeout class to assist with deferred operations.
             </summary>
            </member>
        <member name="M:FM.Deferrer.Defer(FM.SingleAction{System.Object},System.Int32,System.Object)">
             <summary>
             Defers an action by a specifed number of milliseconds.
             </summary>
             <param name="callback">The callback to defer.</param>
             <param name="timeout">The timeout in milliseconds.</param>
             <param name="state">The callback state.</param>
            </member>
        <member name="T:FM.TimeoutTimer">
             <summary>
             A thread-safe class for running timeouts on asynchronous methods.
             </summary>
            </member>
        <member name="M:FM.TimeoutTimer.#ctor(FM.SingleAction{System.Object},System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.TimeoutTimer" /> class.
             </summary>
             <param name="callback">The callback to invoke if the timeout occurs.</param>
             <param name="state">The state to pass into the callback if the timeout occurs.</param>
            </member>
        <member name="M:FM.TimeoutTimer.Start(System.Int32)">
             <summary>
             Starts the timer.
             </summary>
             <param name="timeout">The timeout length, in milliseconds.</param>
            </member>
        <member name="M:FM.TimeoutTimer.Stop">
             <summary>
             Stops the timer, notifying the calling code if the timeout has already elapsed.
             </summary>
             <returns><c>true</c> if the timer was successfully stopped in time; <c>false</c>
             if the timeout elapsed and the timeout callback has been invoked.</returns>
            </member>
        <member name="T:FM.WebSocket">
             <summary>
             Implementation of the WebSocket protocol v8.
             </summary>
            </member>
        <member name="P:FM.WebSocket.Exists">
             <summary>
             Gets a value indicating whether WebSocket support exists on this platform.
             </summary>
            </member>
        <member name="P:FM.WebSocket.BufferedAmount">
             <summary>
             Gets the number of bytes buffered in the send queue.
             </summary>
            </member>
        <member name="P:FM.WebSocket.IsOpen">
             <summary>
             Gets a value indicating whether the WebSocket is connected.
             </summary>
            </member>
        <member name="P:FM.WebSocket.Secure">
             <summary>
             Gets a value indicating whether the WebSocket is secure.
             </summary>
            </member>
        <member name="M:FM.WebSocket.#ctor(System.String)">
             <summary>
             Creates a new <see cref="T:FM.WebSocket" />.
             </summary>
             <param name="requestUrl">The target URL for the WebSocket connection.</param>
            </member>
        <member name="M:FM.WebSocket.Open(FM.WebSocketOpenArgs)">
             <summary>
             Opens the WebSocket connection.
             </summary>
             <param name="openArgs">The open arguments.</param>
            </member>
        <member name="M:FM.WebSocket.Send(FM.WebSocketSendArgs)">
             <summary>
             Sends a message to the WebSocket server.
             </summary>
             <param name="sendArgs">The send arguments.</param>
            </member>
        <member name="M:FM.WebSocket.Close">
             <summary>
             Closes the WebSocket connection.
             </summary>
            </member>
        <member name="M:FM.WebSocket.Close(FM.WebSocketCloseArgs)">
             <summary>
             Closes the WebSocket connection.
             </summary>
             <param name="closeArgs">The close arguments</param>
            </member>
        <member name="T:FM.WebSocketSendState">
             <summary>
             A wrapper for a WebSocket send request to support queueing.
             </summary>
            </member>
        <member name="P:FM.WebSocketSendState.SendArgs">
             <summary>
             Gets or sets the arguments passed to the Send method.
             </summary>
            </member>
        <member name="P:FM.WebSocketSendState.RequestBytes">
             <summary>
             Gets or sets request frame, in bytes.
             </summary>
            </member>
        <member name="T:FM.WebSocketMockRequest">
             <summary>
             A mock response object for the WebSocket protocol.
             </summary>
            </member>
        <member name="P:FM.WebSocketMockRequest.RequestUri">
             <summary>
             When overridden in a descendant class, gets the URI of the Internet resource associated with the request.
             </summary>
             <returns>
             A <see cref="T:System.Uri" /> representing the resource associated with the request
               </returns>
               
             <exception cref="T:System.NotImplementedException">
             Any attempt is made to get or set the property, when the property is not overridden in a descendant class.
               </exception>
               
             <PermissionSet>
               <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
               </PermissionSet>
            </member>
        <member name="P:FM.WebSocketMockRequest.Headers">
             <summary>
             When overridden in a descendant class, gets or sets the collection of header name/value pairs associated with the request.
             </summary>
             <returns>A <see cref="T:System.Net.WebHeaderCollection" /> containing the header name/value pairs associated with this request.</returns>
               
             <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
               
             <PermissionSet>
               <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
               </PermissionSet>
            </member>
        <member name="P:FM.WebSocketMockRequest.ContentType">
             <summary>
             When overridden in a descendant class, gets or sets the content type of the request data being sent.
             </summary>
             <returns>The content type of the request data.</returns>
               
             <exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
            </member>
        <member name="P:FM.WebSocketMockRequest.Method">
             <summary>
             When overridden in a descendant class, gets or sets the protocol method to use in this request.
             </summary>
             <returns>The protocol method to use in this request.</returns>
               
             <exception cref="T:System.NotImplementedException">If the property is not overridden in a descendant class, any attempt is made to get or set the property. </exception>
            </member>
        <member name="M:FM.WebSocketMockRequest.Abort">
             <summary>
             Aborts the Request.
             </summary>
             <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            </member>
        <member name="M:FM.WebSocketMockRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
             <summary>
             When overridden in a descendant class, provides an asynchronous method to request a stream.
             </summary>
             <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
             <param name="state">An object containing state information for this asynchronous request.</param>
             <returns>
             An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.
             </returns>
             <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            </member>
        <member name="M:FM.WebSocketMockRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
             <summary>
             When overridden in a descendant class, begins an asynchronous request for an Internet resource.
             </summary>
             <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate.</param>
             <param name="state">An object containing state information for this asynchronous request.</param>
             <returns>
             An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.
             </returns>
             <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            </member>
        <member name="M:FM.WebSocketMockRequest.EndGetRequestStream(System.IAsyncResult)">
             <summary>
             When overridden in a descendant class, returns a <see cref="T:System.IO.Stream" /> for writing data to the Internet resource.
             </summary>
             <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references a pending request for a stream.</param>
             <returns>
             A <see cref="T:System.IO.Stream" /> to write data to.
             </returns>
             <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            </member>
        <member name="M:FM.WebSocketMockRequest.EndGetResponse(System.IAsyncResult)">
             <summary>
             When overridden in a descendant class, returns a <see cref="T:System.Net.WebResponse" />.
             </summary>
             <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references a pending request for a response.</param>
             <returns>
             A <see cref="T:System.Net.WebResponse" /> that contains a response to the Internet request.
             </returns>
             <exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            </member>
        <member name="T:FM.WebSocketMockResponse">
             <summary>
             A mock response object for the WebSocket protocol.
             </summary>
            </member>
        <member name="P:FM.WebSocketMockResponse.Headers">
             <summary>
             When overridden in a derived class, gets a collection of header name-value pairs associated with this request.
             </summary>
             <returns>An instance of the <see cref="T:System.Net.WebHeaderCollection" /> class that contains header values associated with this response.</returns>
               
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
               
             <PermissionSet>
               <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
               </PermissionSet>
            </member>
        <member name="P:FM.WebSocketMockResponse.ContentType">
             <summary>
             When overridden in a derived class, gets or sets the content type of the data being received.
             </summary>
             <returns>A string that contains the content type of the response.</returns>
               
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
            </member>
        <member name="P:FM.WebSocketMockResponse.ContentLength">
             <summary>
             When overridden in a descendant class, gets or sets the content length of data being received.
             </summary>
             <returns>The number of bytes returned from the Internet resource.</returns>
               
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
            </member>
        <member name="P:FM.WebSocketMockResponse.StatusCode">
             <summary>
             Gets or set the status code of the response.
             </summary>
            </member>
        <member name="P:FM.WebSocketMockResponse.ResponseUri">
             <summary>
             When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.
             </summary>
             <returns>An instance of the <see cref="T:System.Uri" /> class that contains the URI of the Internet resource that actually responded to the request.</returns>
               
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
            </member>
        <member name="M:FM.WebSocketMockResponse.GetResponseStream">
             <summary>
             When overridden in a descendant class, returns the data stream from the Internet resource.
             </summary>
             <returns>
             An instance of the <see cref="T:System.IO.Stream" /> class for reading data from the Internet resource.
             </returns>
             <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            </member>
        <member name="M:FM.WebSocketMockResponse.Close">
             <summary>
             When overridden by a descendant class, closes the response stream.
             </summary>
             <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            </member>
        <member name="T:FM.WebSocketRequest">
             <summary>
             Defines a transfer request for <see cref="T:FM.WebSocketWebRequestTransfer" />.
             </summary>
            </member>
        <member name="P:FM.WebSocketRequest.Args">
             <summary>
             Gets or sets the request arguments.
             </summary>
            </member>
        <member name="P:FM.WebSocketRequest.Callback">
             <summary>
             Gets or sets the callback to execute when the request completes.
             </summary>
            </member>
        <member name="T:FM.WebSocketStatusCode">
             <summary>
             An enumeration of potential WebSocket status codes.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.Normal">
             <summary>
             Indicates normal closure, meaning that the purpose for which
             the connection was established has been fulfilled.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.GoingAway">
             <summary>
             Indicates that an endpoint is "going away", such as a server
             going down or a browser having navigated away from a page.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.ProtocolError">
             <summary>
             Indicates that an endpoint is terminating the connection
             due to a protocol error.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.InvalidType">
             <summary>
             Indicates that an endpoint is terminating the connection
             because it has received a type of data that it cannot accept.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.NoStatus">
             <summary>
             Indicates that no status code was present in the Close frame.
             Reserved for use outside Close frames.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.Abnormal">
             <summary>
             Indicates that the connection was closed abnormally, without
             sending a Close frame. Reserved for use outside Close frames.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.InvalidData">
             <summary>
             Indicates that an endpoint is terminating the connection
             because it has received data within a message that was not
             consistent with the type of message.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.PolicyViolation">
             <summary>
             Indicates that an endpoint is terminating the connection
             because it has received a message that violates its policy.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.MessageTooLarge">
             <summary>
             Indicates that an endpoint is terminating the connection
             because it has received a message that is too big for it
             to process.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.UnsupportedExtension">
             <summary>
             Indicates that the client is terminating the connection
             because it has expected the server to negotiate one or
             more extensions, but the server didn't return them in the
             response message of the WebSocket handshake.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.UnexpectedCondition">
             <summary>
             Indicates that the server is terminating the connection
             because it encountered an unexpected condition that
             prevented it from fulfilling the request.
             </summary>
            </member>
        <member name="F:FM.WebSocketStatusCode.SecureHandshakeFailure">
             <summary>
             Indicates that the connection was closed due to a failure
             to perform a TLS handshake. Reserved for use outside Close
             frames.
             </summary>
            </member>
        <member name="T:FM.WebSocketWebRequestTransfer">
             <summary>
             Defines methods for transferring messages using the WebSocket protocol.
             </summary>
            </member>
        <member name="M:FM.WebSocketWebRequestTransfer.#ctor(System.String)">
             <summary>
             Creates a new instance of <see cref="T:FM.WebSocketWebRequestTransfer" />.
             </summary>
             <param name="url">The URL.</param>
            </member>
        <member name="M:FM.WebSocketWebRequestTransfer.Open(System.Collections.Specialized.NameValueCollection)">
             <summary>
             Opens the WebSocket connection.
             </summary>
            </member>
        <member name="M:FM.WebSocketWebRequestTransfer.Send(FM.HttpRequestArgs)">
             <summary>
             Sends a request synchronously.
             </summary>
             <param name="requestArgs">The request parameters.</param>
             <returns>The response parameters.</returns>
            </member>
        <member name="M:FM.WebSocketWebRequestTransfer.SendAsync(FM.HttpRequestArgs,FM.SingleAction{FM.HttpResponseArgs})">
             <summary>
             Sends a request asynchronously.
             </summary>
             <param name="requestArgs">The request parameters.</param>
             <param name="callback">The callback to execute with the resulting response.</param>
            </member>
        <member name="M:FM.WebSocketWebRequestTransfer.Shutdown">
             <summary>
             Releases any resources and shuts down.
             </summary>
            </member>
    </members>
</doc>
