<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FM.IceLink</name>
    </assembly>
    <members>
        <member name="T:FM.IceLink.AddressType">
             <summary>
             Valid address types.
             </summary>
            </member>
        <member name="F:FM.IceLink.AddressType.Unknown">
             <summary>
             Indicates an unknown IP address type.
             </summary>
            </member>
        <member name="F:FM.IceLink.AddressType.IPv4">
             <summary>
             Indicates an IP version 4 address.
             </summary>
            </member>
        <member name="F:FM.IceLink.AddressType.IPv6">
             <summary>
             Indicates an IP version 6 address.
             </summary>
            </member>
        <member name="T:FM.IceLink.AESCounterContext">
             <summary>
             Class containing an instance of RijndaelManaged
             </summary>
            </member>
        <member name="M:FM.IceLink.AESCounterContext.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.AESCounterContext" /> class with default parameters
             (block size of cryptographic operation = 128 bits, mode of operation = ECB, no padding)
             </summary>
             <param name="key">The secret key for the symmetric algorithm.</param>
            </member>
        <member name="M:FM.IceLink.AESCounterContext.Clear">
             <summary>
             Releases all the resources associated with the symmetric algorithm class
             </summary>
            </member>
        <member name="M:FM.IceLink.AESCounterContext.GenerateAESKeystream(System.Byte[],System.Int32,System.Byte[])">
             <summary>
             Generates AES keystream data.
             </summary>
             <param name="output">The output buffer to write to.</param>
             <param name="length">The number of bytes to write.</param>
             <param name="counter">The counter.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.BaseLinkArgs">
             <summary>
             Base class for link event arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLinkArgs.Conference">
             <summary>
             Gets or sets the conferece.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLinkArgs.Link">
             <summary>
             Gets or sets the link.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLinkArgs.PeerId">
             <summary>
             Gets or sets the ID of the peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLinkArgs.PeerState">
             <summary>
             Gets or sets custom state associated with the peer.
             </summary>
            </member>
        <member name="T:FM.IceLink.CloseCompleteArgs">
             <summary>
             Arguments for the close complete event.
             </summary>
            </member>
        <member name="P:FM.IceLink.CloseCompleteArgs.Link">
             <summary>
             Gets or sets the closed link.
             </summary>
            </member>
        <member name="P:FM.IceLink.CloseCompleteArgs.Exception">
             <summary>
             Gets or sets the exception that was generated while closing.
             </summary>
            </member>
        <member name="P:FM.IceLink.CloseCompleteArgs.Reason">
             <summary>
             Gets or sets the original reason for closing.
             </summary>
            </member>
        <member name="M:FM.IceLink.CloseCompleteArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.CloseCompleteArgs.ToJson(FM.IceLink.CloseCompleteArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="closeCompleteArgs">The close complete arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.CloseCompleteArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="closeCompleteArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized close complete arguments.</returns>
            </member>
        <member name="T:FM.IceLink.CloseArgs">
             <summary>
             Arguments for link close invocations.
             </summary>
            </member>
        <member name="P:FM.IceLink.CloseArgs.Reason">
             <summary>
             Gets or sets the reason for closing.
             </summary>
            </member>
        <member name="P:FM.IceLink.CloseArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke when the close operation completes.
             </summary>
            </member>
        <member name="M:FM.IceLink.CloseArgs.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.CloseArgs" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.CloseArgs.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.CloseArgs" /> class.
             </summary>
             <param name="reason">The reason for closing.</param>
            </member>
        <member name="M:FM.IceLink.CloseArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.CloseArgs.ToJson(FM.IceLink.CloseArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="closeArgs">The close arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.CloseArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="closeArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized close arguments.</returns>
            </member>
        <member name="T:FM.IceLink.LinkSendRTCPArgs">
             <summary>
             Arguments for the link send-RTCP event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTCPArgs.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTCPArgs.StreamIndex">
             <summary>
             Gets or sets the index of the stream relative to
             other streams of the same type.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTCPArgs.MediaIndex">
             <summary>
             Gets or sets the index of the stream relative to
             all other media streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTCPArgs.Packets">
             <summary>
             Gets or sets the received packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTCPArgs.NegotiatedStream">
             <summary>
             Gets or sets the negotiated stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.LinkSendRTPArgs">
             <summary>
             Arguments for the link send RTP event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTPArgs.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTPArgs.StreamIndex">
             <summary>
             Gets or sets the index of the stream relative to
             other streams of the same type.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTPArgs.MediaIndex">
             <summary>
             Gets or sets the index of the stream relative to
             all other media streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTPArgs.StreamFormat">
             <summary>
             Gets or sets the stream format.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTPArgs.Packet">
             <summary>
             Gets or sets the received packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkSendRTPArgs.NegotiatedStream">
             <summary>
             Gets or sets the negotiated stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.LinkLocalAddressesArgs">
             <summary>
             Arguments for the link local-addresses event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkLocalAddressesArgs.LocalAddresses">
             <summary>
             Gets or sets the created offer/answer.
             </summary>
            </member>
        <member name="M:FM.IceLink.LinkLocalAddressesArgs.#ctor(System.String[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.LinkLocalAddressesArgs" /> class.
             </summary>
             <param name="localAddresses">The local addresses.</param>
            </member>
        <member name="M:FM.IceLink.LinkLocalAddressesArgs.RemoveLocalAddress(System.Int32)">
             <summary>
             Removes the local address at the specified index.
             </summary>
             <param name="index">The index of the local address to remove.</param>
             <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.LinkLocalAddressesArgs.SwapLocalAddresses(System.Int32,System.Int32)">
             <summary>
             Swaps the local addresses at the specified indexes.
             </summary>
             <param name="index1">The index of the first local address.</param>
             <param name="index2">The index of the second local address.</param>
             <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.LinkLocalAddressesArgs.FindLocalAddressIndex(System.String)">
             <summary>
             Finds the index of local address.
             </summary>
             <param name="localAddress">The local address.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SendSCTPCompleteArgs">
             <summary>
             Arguments for the send SCTP complete event.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPCompleteArgs.Stream">
             <summary>
             Gets or sets the oritinal stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPCompleteArgs.ChannelIndex">
             <summary>
             Gets or sets the original channel index.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPCompleteArgs.Message">
             <summary>
             Gets or sets the original message.
             </summary>
            </member>
        <member name="T:FM.IceLink.LinkCandidateArgs">
             <summary>
             Arguments for the link candidate event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkCandidateArgs.Candidate">
             <summary>
             Gets or sets the discovered candidate.
             </summary>
            </member>
        <member name="M:FM.IceLink.LinkCandidateArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.LinkCandidateArgs.ToJson(FM.IceLink.LinkCandidateArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="linkCandidateArgs">The link candidate arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.LinkCandidateArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="linkCandidateArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized link candidate arguments.</returns>
            </member>
        <member name="T:FM.IceLink.LinkReceiveRTCPArgs">
             <summary>
             Arguments for the link receive-RTCP event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTCPArgs.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTCPArgs.StreamIndex">
             <summary>
             Gets or sets the index of the stream relative to
             other streams of the same type.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTCPArgs.MediaIndex">
             <summary>
             Gets or sets the index of the stream relative to
             all other media streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTCPArgs.Packets">
             <summary>
             Gets or sets the received packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTCPArgs.NegotiatedStream">
             <summary>
             Gets or sets the negotiated stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.LinkReceiveRTPArgs">
             <summary>
             Arguments for the link receive RTP event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTPArgs.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTPArgs.StreamIndex">
             <summary>
             Gets or sets the index of the stream relative to
             other streams of the same type.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTPArgs.MediaIndex">
             <summary>
             Gets or sets the index of the stream relative to
             all other media streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTPArgs.StreamFormat">
             <summary>
             Gets or sets the stream format.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTPArgs.Packet">
             <summary>
             Gets or sets the received packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveRTPArgs.NegotiatedStream">
             <summary>
             Gets or sets the negotiated stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.AllocateInfo">
             <summary>
             Details about a TURN allocate request or response.
             </summary>
            </member>
        <member name="P:FM.IceLink.AllocateInfo.Username">
             <summary>
             Gets or sets the username credential.
             </summary>
            </member>
        <member name="P:FM.IceLink.AllocateInfo.Realm">
             <summary>
             Gets or sets the realm credential.
             </summary>
            </member>
        <member name="P:FM.IceLink.AllocateInfo.Nonce">
             <summary>
             Gets or sets the nonce used when nonce-based
             security is enabled on the server.
             </summary>
            </member>
        <member name="P:FM.IceLink.AllocateInfo.EvenPort">
             <summary>
             Gets or sets whether an even port
             is requested.
             </summary>
            </member>
        <member name="P:FM.IceLink.AllocateInfo.ReserveNextHigher">
             <summary>
             Gets or sets whether the next-higher
             port should be reserved.
             </summary>
            </member>
        <member name="P:FM.IceLink.AllocateInfo.SocketAddress">
             <summary>
             Gets the address of the allocated socket
             if the request was processed successfully.
             </summary>
            </member>
        <member name="P:FM.IceLink.AllocateInfo.Lifetime">
             <summary>
             Gets the time-to-expiry of the allocation
             if the request was processed successfully.
             </summary>
            </member>
        <member name="P:FM.IceLink.AllocateInfo.ReservationToken">
             <summary>
             Gets the reservation token if a reservation
             was requested and the request was processed
             successfully.
             </summary>
            </member>
        <member name="P:FM.IceLink.AllocateInfo.Success">
             <summary>
             Gets whether or not the
             response indicates success.
             </summary>
            </member>
        <member name="T:FM.IceLink.LinkReceiveSCTPArgs">
             <summary>
             Arguments for the link receive SCTP event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveSCTPArgs.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveSCTPArgs.StreamIndex">
             <summary>
             Gets or sets the index of the stream relative to
             other streams of the same type.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveSCTPArgs.MediaIndex">
             <summary>
             Gets or sets the index of the stream relative to
             all other media streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveSCTPArgs.Message">
             <summary>
             Gets or sets the received message.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveSCTPArgs.ChannelIndex">
             <summary>
             Gets the channel index.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkReceiveSCTPArgs.NegotiatedStream">
             <summary>
             Gets or sets the negotiated stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.CipherSuite">
             <summary>
             DTLS cipher suites.
             </summary>
            </member>
        <member name="F:FM.IceLink.CipherSuite.Aes128Sha">
             <summary>
             Indicates TLS_RSA_WITH_AES_128_CBC_SHA.
             </summary>
            </member>
        <member name="F:FM.IceLink.CipherSuite.DhRsaAes128Sha">
             <summary>
             Indicates TLS_DH_RSA_WITH_AES_128_CBC_SHA.
             </summary>
            </member>
        <member name="F:FM.IceLink.CipherSuite.EcdhRsaAes128Sha">
             <summary>
             Indicates TLS_DH_RSA_WITH_AES_128_CBC_SHA.
             </summary>
            </member>
        <member name="F:FM.IceLink.CipherSuite.DheRsaAes128Sha">
             <summary>
             Indicates TLS_DHE_RSA_WITH_AES_128_CBC_SHA.
             </summary>
            </member>
        <member name="F:FM.IceLink.CipherSuite.EcdheRsaAes128Sha">
             <summary>
             Indicates TLS_DHE_RSA_WITH_AES_128_CBC_SHA.
             </summary>
            </member>
        <member name="F:FM.IceLink.CipherSuite.EcdheEcdsaAes128Sha">
             <summary>
             Indicates TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA.
             </summary>
            </member>
        <member name="T:FM.IceLink.ChannelBindInfo">
             <summary>
             Details about a TURN channel-bind request or response.
             </summary>
            </member>
        <member name="P:FM.IceLink.ChannelBindInfo.ChannelNumber">
             <summary>
             Gets or sets the channel number.
             </summary>
            </member>
        <member name="P:FM.IceLink.ChannelBindInfo.PeerAddress">
             <summary>
             Gets the peer address for which the channel is valid.
             </summary>
            </member>
        <member name="P:FM.IceLink.ChannelBindInfo.Success">
             <summary>
             Gets whether or not the
             response indicates success.
             </summary>
            </member>
        <member name="T:FM.IceLink.CRC32c">
             <summary>
             Calculates CRC32c for a string or byte array.
             Derived from Jeff Atwood's version:
             http://www.codinghorror.com/blog/2004/09/squishysyntaxhighlighter-and-crc32.html
             as well as
             https://code.google.com/p/googleappengine/source/browse/trunk/python/google/appengine/api/files/crc32c.py?r=170
             (under Apache 2.0 licence)
             </summary>
            </member>
        <member name="M:FM.IceLink.CRC32c.Compute(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Computes the signed CRC32c for an array of bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.CRC32c.Compute(System.Byte[])">
             <summary>
             Computes the signed CRC32c for an array of bytes.
             </summary>
             <param name="bytes">Binary array for which to compute CRC32c.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.ICEAgentSendRTPArgs">
             <summary>
             ICE agent send RTP arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentSendRTPArgs.MediaStream">
             <summary>
             Gets or sets the receiving media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentSendRTPArgs.MediaFormat">
             <summary>
             Gets or sets the receiving media format.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentSendRTPArgs.Packet">
             <summary>
             Gets or sets the packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentSendRTPArgs.StreamIndex">
             <summary>
             Gets or sets the stream index.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentSendRTPArgs.MediaIndex">
             <summary>
             Gets or sets the media index.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentSendRTCPArgs">
             <summary>
             ICE agent send-RTCP arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentSendRTCPArgs.MediaStream">
             <summary>
             Gets or sets the receiving media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentSendRTCPArgs.Packets">
             <summary>
             Gets or sets the packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentSendRTCPArgs.StreamIndex">
             <summary>
             Gets or sets the stream index.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentSendRTCPArgs.MediaIndex">
             <summary>
             Gets or sets the media index.
             </summary>
            </member>
        <member name="T:FM.IceLink.ProtocolVersion">
             <summary>
             DTLS protocol versions.
             </summary>
            </member>
        <member name="F:FM.IceLink.ProtocolVersion.Dtls10">
             <summary>
             Indicates DTLS 1.0.
             </summary>
            </member>
        <member name="F:FM.IceLink.ProtocolVersion.Dtls12">
             <summary>
             Indicates DTLS 1.2.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentLocalAddressesArgs">
             <summary>
             ICE agent local addresses arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentLocalAddressesArgs.LocalAddresses">
             <summary>
             Gets or sets the local addresses.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICERefreshArgs">
             <summary>
             ICE refresh arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICERefreshArgs.OnSuccess">
             <summary>
             Gets or sets the callback to execute on success.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICERefreshArgs.OnFailure">
             <summary>
             Gets or sets the callback to execute on failure.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICERefreshArgs.OnComplete">
             <summary>
             Gets or sets the callback to execute on completion.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICERefreshCompleteArgs">
             <summary>
             ICE refresh complete arguments.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICERefreshFailureArgs">
             <summary>
             ICE refresh failure arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICERefreshFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICERefreshSuccessArgs">
             <summary>
             ICE refresh success arguments.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESctpResendInitArgs">
             <summary>
             Arguments for the IceLink SCTP COOKIE_ECHO or INIT resending.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESctpResendInitArgs.Packet">
             <summary>
             Gets or sets the SCTP packet to be resent
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESctpResendInitArgs.State">
             <summary>
             Gets or sets the SCTP state.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESctpResendInitArgs.#ctor(FM.IceLink.SCTPPacket,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICESctpResendInitArgs" /> class.
             </summary>
             <param name="packet">The packet.</param>
             <param name="state">The states.</param>
            </member>
        <member name="T:FM.IceLink.SendSCTPArgs">
             <summary>
             Arguments for the send SCTP function.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPArgs.Stream">
             <summary>
             Gets or sets the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPArgs.ChannelIndex">
             <summary>
             Gets or sets the channel index.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPArgs.Message">
             <summary>
             Gets or sets the message.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke when delivery of the message has been acknowledged.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke if the connection fails before the message has been acknowledged.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke after success or failure.
             </summary>
            </member>
        <member name="M:FM.IceLink.SendSCTPArgs.#ctor(FM.IceLink.Stream,System.Int32,FM.IceLink.SCTPMessage)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SendSCTPArgs" /> class.
             </summary>
             <param name="stream">The stream.</param>
             <param name="channelIndex">The channel index.</param>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.SendSCTPFailureArgs">
             <summary>
             Arguments for the send SCTP failure event.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPFailureArgs.Stream">
             <summary>
             Gets or sets the oritinal stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPFailureArgs.ChannelIndex">
             <summary>
             Gets or sets the original channel index.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPFailureArgs.Message">
             <summary>
             Gets or sets the original message.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPFailureArgs.Exception">
             <summary>
             Gets or sets the exception.
             </summary>
            </member>
        <member name="T:FM.IceLink.SendSCTPSuccessArgs">
             <summary>
             Arguments for the send SCTP success event.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPSuccessArgs.Stream">
             <summary>
             Gets or sets the oritinal stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPSuccessArgs.ChannelIndex">
             <summary>
             Gets or sets the original channel index.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendSCTPSuccessArgs.Message">
             <summary>
             Gets or sets the original message.
             </summary>
            </member>
        <member name="T:FM.IceLink.StreamLinkReceiveSCTPArgs">
             <summary>
             Arguments for the stream receive RTP event.
             </summary>
            </member>
        <member name="T:FM.IceLink.UnhandledExceptionArgs">
             <summary>
             Arguments for an unhandled exception.
             </summary>
            </member>
        <member name="P:FM.IceLink.UnhandledExceptionArgs.Handled">
             <summary>
             Gets or sets whether the exception has been
             appropriately handled. If set to <c>true</c>,
             then the exception will not be thrown.
             </summary>
            </member>
        <member name="P:FM.IceLink.UnhandledExceptionArgs.Exception">
             <summary>
             Gets or sets the unhandled exception.
             </summary>
            </member>
        <member name="T:FM.IceLink.BaseLink">
             <summary>
             Defines common base properties for links.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.PeerId">
             <summary>
             Gets or sets the peer ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.PeerState">
             <summary>
             Gets or sets custom state data to associate with the peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.TieBreaker">
             <summary>
             Gets the tie-breaker to use in cases of role conflict.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.Controlling">
             <summary>
             Gets whether this end of the link is controlling.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.WasUp">
             <summary>
             Gets whether the link was ever up.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.ReachedServer">
             <summary>
             Gets whether the server has been reached.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.ReachedPeer">
             <summary>
             Gets whether the peer has been reached.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.LocalOfferAnswer">
             <summary>
             Gets the local offer/answer.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.RemoteOfferAnswer">
             <summary>
             Gets the remote offer/answer.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.IsCreating">
             <summary>
             Gets whether an offer/answer is being created.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.HasCreated">
             <summary>
             Gets whether an offer/answer has been created.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.IsAccepting">
             <summary>
             Gets whether an offer/answer is being accepted.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.HasAccepted">
             <summary>
             Gets whether an offer/answer has been accepted.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.IsClosing">
             <summary>
             Gets whether the link is closing.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.HasClosed">
             <summary>
             Gets whether the link has closed.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.IsOpening">
             <summary>
             Gets whether the link is opening.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.HasOpened">
             <summary>
             Gets whether the link has opened.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.IsOpened">
             <summary>
             Gets whether the link is opened.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.NegotiatedStreams">
             <summary>
             Gets the negotiated streams when the link is up. 
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.AllLocalCandidates">
             <summary>
             Gets the active and inactive local candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.AllRemoteCandidates">
             <summary>
             Gets the active and inactive remote candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.AllLocalCandidateTypes">
             <summary>
             Gets the active and inactive local candidate types.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.AllRemoteCandidateTypes">
             <summary>
             Gets the active and inactive remote candidate types.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseLink.Conference">
             <summary>
             Gets or sets the conference that owns this link.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnUnhandledException">
             <summary>
             Raised when an exception is thrown in user code and not handled,
             typically in a callback or event handler.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnInit">
             <summary>
             Raised when a link is initializing.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnUp">
             <summary>
             Raised when a link is up.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnOfferAnswer">
             <summary>
             Raised when a local offer or answer is created.
             The offer/answer should be sent via signalling to the remote peer.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnRemoteOfferAnswer">
             <summary>
             Raised when a remote offer or answer is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnCandidate">
             <summary>
             Raised when a local candidate is created.
             The candidate should be sent via signalling to the remote peer.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnRemoteCandidate">
             <summary>
             Raised when a remote candidate is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnDown">
             <summary>
             Raised when a link is down.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnReceiveRTP">
             <summary>
             Raised when an RTP packet is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnReceiveSCTP">
             <summary>
             Raised when an SCTP packet is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnReceiveRTCP">
             <summary>
             Raised when RTCP packets are received.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnSendRTP">
             <summary>
             Raised when an RTP packet is sent.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnSendRTCP">
             <summary>
             Raised when RTCP packets are sent.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseLink.OnLocalAddresses">
             <summary>
             Raised when local IP addresses are discovered.
             </summary>
            </member>
        <member name="M:FM.IceLink.BaseLink.Initialize(System.String[],System.String[],System.String[],System.String[],FM.IceLink.Stream[],FM.SingleAction{FM.IceLink.Link})">
             <summary>
             Initializes the link.
             </summary>
             <param name="serverAddresses">The IceLink server addresses.</param>
             <param name="relayUsernames">The relay usernames.</param>
             <param name="relayPasswords">The relay passwords.</param>
             <param name="relayRealms">The relay realms.</param>
             <param name="streams">The streams to establish.</param>
             <param name="callback">The callback to invoke when the link is initialized.</param>
            </member>
        <member name="M:FM.IceLink.BaseLink.CreateOffer(FM.IceLink.CreateArgs)">
             <summary>
             Creates an offer.
             </summary>
             <param name="createArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.BaseLink.CreateAnswer(FM.IceLink.CreateArgs)">
             <summary>
             Creates an answer.
             </summary>
             <param name="createArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.BaseLink.Accept(FM.IceLink.AcceptArgs)">
             <summary>
             Accepts an offer or answer.
             </summary>
             <param name="acceptArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.BaseLink.AddRemoteCandidate(FM.IceLink.Candidate)">
             <summary>
             Adds a peer candidate for consideration in path discovery.
             </summary>
             <param name="candidate">The peer candidate.</param>
            </member>
        <member name="M:FM.IceLink.BaseLink.Close">
             <summary>
             Closes the link.
             </summary>
            </member>
        <member name="M:FM.IceLink.BaseLink.Close(FM.IceLink.CloseArgs)">
             <summary>
             Closes the link.
             </summary>
             <param name="closeArgs">The close arguments.</param>
            </member>
        <member name="M:FM.IceLink.BaseLink.SendRTP(FM.IceLink.Stream,FM.IceLink.StreamFormat,FM.IceLink.RTPPacket)">
             <summary>
             Sends an RTP packet to the peer.
             </summary>
             <param name="stream">The stream.</param>
             <param name="format">The stream format.</param>
             <param name="packet">The RTP packet to send.</param>
             <returns>The number of bytes sent, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.BaseLink.SendSCTP(FM.IceLink.SendSCTPArgs)">
             <summary>
             Sends an SCTP packet to the peer.
             </summary>
             <param name="sendArgs">The send arguments.</param>
            </member>
        <member name="M:FM.IceLink.BaseLink.SendRTCP(FM.IceLink.Stream,FM.IceLink.RTCPPacket)">
             <summary>
             Sends an RTCP packet to the peer.
             </summary>
             <param name="stream">The stream.</param>
             <param name="packet">The RTCP packet to send.</param>
             <returns>The number of bytes sent, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.BaseLink.SendRTCP(FM.IceLink.Stream,FM.IceLink.RTCPPacket[])">
             <summary>
             Sends RTCP packets to the peer.
             </summary>
             <param name="stream">The stream.</param>
             <param name="packets">The RTCP packets to send.</param>
             <returns>The number of bytes sent, or -1 if the send operation failed.</returns>
            </member>
        <member name="T:FM.IceLink.BaseStream">
             <summary>
             Defines common base properties for streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseStream.Type">
             <summary>
             Gets the stream type.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseStream.Protocol">
             <summary>
             Gets the stream protocol.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseStream.OfferDtls">
             <summary>
             Gets or sets whether to offer to exchange SRTP keys using DTLS.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseStream.Direction">
             <summary>
             Gets or sets the direction of media flow.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseStream.MultiplexRtpRtcp">
             <summary>
             Gets or sets whether to multiplex RTP and RTCP packets on a single socket.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseStream.OnUnhandledException">
             <summary>
             Raised when an exception is thrown in user code and not handled,
             typically in a callback or event handler.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseStream.OnLinkInit">
             <summary>
             Raised when a new link is initializing with this stream.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseStream.OnLinkUp">
             <summary>
             Raised when a link is open with this stream.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseStream.OnLinkDown">
             <summary>
             Raised when a link is closed with this stream.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseStream.OnLinkReceiveRTP">
             <summary>
             Raised when an RTP packet is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseStream.OnLinkReceiveRTCP">
             <summary>
             Raised when an RTCP packet is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.BaseStream.OnLinkReceiveSCTP">
             <summary>
             Raised when an SCTP packet is received.
             </summary>
            </member>
        <member name="M:FM.IceLink.BaseStream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamProtocol)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.BaseStream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="protocol">The stream protocol.</param>
            </member>
        <member name="T:FM.IceLink.Certificate">
             <summary>
             An X.509/RSA-based certificate.
             </summary>
            </member>
        <member name="P:FM.IceLink.Certificate.IssuerName">
             <summary>
             Gets the name of the issuer.
             </summary>
            </member>
        <member name="P:FM.IceLink.Certificate.SubjectName">
             <summary>
             Gets the name of the subject.
             </summary>
            </member>
        <member name="P:FM.IceLink.Certificate.EffectiveDate">
             <summary>
             Gets the effective date.
             </summary>
            </member>
        <member name="P:FM.IceLink.Certificate.ExpirationDate">
             <summary>
             Gets the expiration date.
             </summary>
            </member>
        <member name="P:FM.IceLink.Certificate.SerialNumber">
             <summary>
             Gets the serial number.
             </summary>
            </member>
        <member name="P:FM.IceLink.Certificate.SignatureAlgorithm">
             <summary>
             Gets the signature algorithm.
             </summary>
            </member>
        <member name="P:FM.IceLink.Certificate.Key">
             <summary>
             Gets or sets the RSA key.
             </summary>
            </member>
        <member name="M:FM.IceLink.Certificate.GetSha1Fingerprint">
             <summary>
             Gets the SHA-1 fingerprint for this certificate.
             </summary>
            </member>
        <member name="M:FM.IceLink.Certificate.GetSha256Fingerprint">
             <summary>
             Gets the SHA-256 fingerprint for this certificate.
             </summary>
            </member>
        <member name="P:FM.IceLink.Certificate.IsExpired">
             <summary>
             Gets whether the certificate is expired.
             </summary>
            </member>
        <member name="P:FM.IceLink.Certificate.IsExpiring">
             <summary>
             Gets whether the certificate is expiring within 24 hours.
             </summary>
            </member>
        <member name="M:FM.IceLink.Certificate.Clone">
             <summary>
             Clones this instance.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.Certificate.AutoRegenerate">
             <summary>
             Gets or sets whether IceLink should automatically
             regenerate the certificate's cryptography data when
             it is about to expire. Defaults to <code>true</code>.
             </summary>
            </member>
        <member name="M:FM.IceLink.Certificate.Regenerate">
             <summary>
             Regenerates the certificate's cryptography data using an
             expiration date of 10 days from now.
             </summary>
            </member>
        <member name="M:FM.IceLink.Certificate.Regenerate(System.DateTime)">
             <summary>
             Regenerates the certificate's cryptography data using the
             given expiration date.
             </summary>
             <param name="expirationDate">The expiration date.</param>
            </member>
        <member name="M:FM.IceLink.Certificate.GetBytes">
             <summary>
             Serializes this certificate to binary.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Certificate.ParseBytes(System.Byte[])">
             <summary>
             Deserializes a certificate from binary.
             </summary>
             <param name="bytes">The bytes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Certificate.GenerateCertificateFromOldCertificate(FM.IceLink.Certificate)">
             <summary>
             Generates a certificate using the issuer/subject name from an
             old certificate and an expiration date of 10 days from now.
             </summary>
             <param name="oldCertificate">The old certificate.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Certificate.GenerateCertificateFromOldCertificate(FM.IceLink.Certificate,System.DateTime)">
             <summary>
             Generates a certificate using the issuer/subject name from an
             old certificate and the given expiration date.
             </summary>
             <param name="oldCertificate">The old certificate.</param>
             <param name="expirationDate">The expiration date.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Certificate.GenerateCertificate">
             <summary>
             Generates a certificate with an issuer/subject name of "IceLink" and
             an expiration date of 10 days from now.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Certificate.GenerateCertificate(System.String)">
             <summary>
             Generates a certificate with the given issuer/subject name and an
             expiration date of 10 days from now.
             </summary>
             <param name="name">The name of the issuer/subject.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Certificate.GenerateCertificate(System.String,System.String)">
             <summary>
             Generates a certificate with the given issuer name, subject name, and
             an expiration date of 10 days from now.
             </summary>
             <param name="issuerName">The name of the issuer.</param>
             <param name="subjectName">The name of the subject.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Certificate.GenerateCertificate(System.String,System.String,System.DateTime)">
             <summary>
             Generates a certificate with the given issuer name, subject name, and expiration date.
             </summary>
             <param name="issuerName">The name of the issuer.</param>
             <param name="subjectName">The name of the subject.</param>
             <param name="expirationDate">The expiration date.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Certificate.GenerateCertificate(System.String,System.String,System.DateTime,FM.IceLink.RSAKey)">
             <summary>
             Generates a certificate with the given issuer name, subject name, expiration date, and RSA key.
             </summary>
             <param name="issuerName">The name of the issuer.</param>
             <param name="subjectName">The name of the subject.</param>
             <param name="expirationDate">The expiration date.</param>
             <param name="key">The RSA key (with public and private details).</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.AsymmetricKey">
             <summary>
             An asymmetric key.
             </summary>
            </member>
        <member name="M:FM.IceLink.AsymmetricKey.HasPublic">
             <summary>
             Returns <c>true</c> if the key contains
             public information.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.AsymmetricKey.HasPrivate">
             <summary>
             Returns <c>true</c> if the key contains
             private information.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.ConnectInfo">
             <summary>
             Details about a TURN connect request or response.
             </summary>
            </member>
        <member name="P:FM.IceLink.ConnectInfo.PeerAddress">
             <summary>
             Gets or sets the peer address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ConnectInfo.ConnectionId">
             <summary>
             Gets the connection ID
             if the request was processed successfully.
             </summary>
            </member>
        <member name="P:FM.IceLink.ConnectInfo.Success">
             <summary>
             Gets whether or not the
             response indicates success.
             </summary>
            </member>
        <member name="T:FM.IceLink.ConnectionBindInfo">
             <summary>
             Details about a TURN connection-bind request or response.
             </summary>
            </member>
        <member name="P:FM.IceLink.ConnectionBindInfo.ConnectionId">
             <summary>
             Gets or sets the connection ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.ConnectionBindInfo.Success">
             <summary>
             Gets whether or not the
             response indicates success.
             </summary>
            </member>
        <member name="T:FM.IceLink.Direction">
             <summary>
             Describes the direction of media flow.
             </summary>
            </member>
        <member name="F:FM.IceLink.Direction.SendReceive">
             <summary>
             Indicates media can be sent and received.
             </summary>
            </member>
        <member name="F:FM.IceLink.Direction.SendOnly">
             <summary>
             Indicates media can be sent, but not received.
             </summary>
            </member>
        <member name="F:FM.IceLink.Direction.ReceiveOnly">
             <summary>
             Indicates media can be received, but not sent.
             </summary>
            </member>
        <member name="F:FM.IceLink.Direction.Inactive">
             <summary>
             Indicates media cannot be sent or received. 
             </summary>
            </member>
        <member name="F:FM.IceLink.Direction.Default">
             <summary>
             Same as <see cref="F:FM.IceLink.Direction.SendReceive" />.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentReceiveSCTPArgs">
             <summary>
             ICE agent receive arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveSCTPArgs.MediaStream">
             <summary>
             Gets or sets the receiving media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveSCTPArgs.Message">
             <summary>
             Gets or sets the message.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveSCTPArgs.ChannelIndex">
             <summary>
             Gets or sets the channel index.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveSCTPArgs.StreamIndex">
             <summary>
             Gets or sets the stream index.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveSCTPArgs.MediaIndex">
             <summary>
             Gets or sets the media index.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEPeerSCTPMessageArgs">
             <summary>
             ICE SCTP message arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerSCTPMessageArgs.MediaStream">
             <summary>
             Gets or sets the media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerSCTPMessageArgs.Message">
             <summary>
             Gets or sets the message.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerSCTPMessageArgs.ChannelIndex">
             <summary>
             Gets or sets the channel index.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEMessageBroker">
             <summary>
             ICE message broker.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMessageBroker.LocalPreference">
             <summary>
             Gets or sets the local preference.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESctpManager">
             <summary>
             Manages SCTP Initiation, Data transmission, Error reporting and shutdown
             </summary>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.newDATAAvailable">
             <summary>
             Indicates whether new DATA has been deposited into the outgoing queue
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.SendData(FM.IceLink.SendSCTPArgs)">
             <summary>
             Sends the data.
             </summary>
             <param name="sendArgs">Send data arguments.</param>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.ControlChunkTimeoutThread">
             <summary>
             Thread responsible for re-sending certain control chunks and tracking corresponding SCTP Association conditions
             </summary>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.sendDATAQueue">
             <summary>
             The object containing DATA chunks to be sent by SCTP manager. They key is TSN of the chunk.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.sendControlChunkQueue">
             <summary>
             The object containing SCTP control chunks to be sent by SCTP manager. This operates on FIFO basis.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.errorToCombineWithCookieEcho">
             <summary>
             Stores Error chunk that can be bundled with outgoing CookieEcho, if there is anough space.
             If not, it should be sent only when Cookie_ACK is received.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.nextDataChunkToBeExaminedForSending">
             <summary>
             The next DATA chunk to be evaluated while building a packet for sending
             </summary>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.dataRetransmissionMode">
             <summary>
             Indicates whether all (or only new) unacked DATA in outgoing queue has to be sent
             </summary>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.numberOfPacketsSentSinceLastProcessorYield">
             <summary>
             The number of packets sent since last processor yield within the current transmission sequence
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.ProcessOutgoingQueueLoop(FM.ManagedThread)">
             <summary>
             Processes the outgoing queue of SCTP chunks.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.GetT3TimerExtension">
             <summary>
             Gets the increment in T3 (data retransmit) timer.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.SendSCTP(FM.IceLink.SCTPPacket)">
             <summary>
             Sends an SCTP packet.
             </summary>
             <param name="packet">The packet to send.</param>
             <returns>The number of bytes sent.</returns>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.InitT1Loop(FM.ManagedThread)">
             <summary>
             A thread that checks if the association state has changed from COOKIE_WAIT or COOKIE_ECHOED
             If not, the INIT chunk/packet or COOKIE_ECHO is re-sent up to a pre-specified number of times.
             </summary>
             <param name="thread">The thread.</param>
            </member>
        <member name="P:FM.IceLink.ICESctpManager.Component">
             <summary>
             Gets or sets the media stream associated with this SCTP Manager.
             </summary>
             <value>
             The media stream.
             </value>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.AssociationState">
             <summary>
             Gets or sets the SCTP Transmission Control Block.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.#ctor(FM.IceLink.ICEComponent,System.Int32,System.Int32,System.Int64,FM.EmptyAction,FM.EmptyAction)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICESctpManager" /> class.
             </summary>
             <param name="component">The component.</param>
             <param name="requestedOutboundChannels">Defines the number of outbound channels the sender of this INIT
             chunk wishes to create in this association. The value of 0 MUST
             NOT be used.</param>
             <param name="maxIncomingChannels">Maximum incoming channels this association can support.</param>
             <param name="advertisedReceiverWindow">Advertised Receiver Window Credit (a_rwnd)
             This value represents the dedicated buffer space, in number of bytes, the sender of the INIT has reserved
             in association with this window. During the life of the association, this buffer space SHOULD NOT be lessened
             (i.e., dedicated buffers taken away from this association); however, an endpoint MAY change the value of a_rwnd
             it sends in SACK chunks.</param>
             <param name="onAssociationSuccess">The on SCTP initiation success.</param>
             <param name="onAssociationFailure">The on SCTP association failure.</param>
             <exception cref="T:System.Exception">SCTP: Maximum supported number of inbound channels must be at least 1
             or
             SCTP: Desirable number of outbound channels must be at least 1</exception>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.Open">
             <summary>
             Opens this instance.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.ICESctpManager.OnSCTPMessage">
             <summary>
             Gets or sets the SCTP message callback
             </summary>
             <value>
             The on SCTP message.
             </value>
            </member>
        <member name="F:FM.IceLink.ICESctpManager.receiveDATAQueue">
             <summary>
             The object containing DATA chunks received by SCTP manager. They key is TSN of the chunk.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.ProcessIncomingSCTPPacket(System.Byte[],System.Int32)">
             <summary>
             Processes the incoming SCTP Packet.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="len">The length.</param>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.AssembleMessage(System.Byte[]@,System.Int64[]@,System.Int64)">
             <summary>
             Assembles message from DATA chunks at current TSN (and prior to it). Notifies the caller which DATA chunks can be deleted from the recieving queue
             </summary>
             <param name="message">The message.</param>
             <param name="tsnArray">The delete candidates.</param>
             <param name="currentTSN">The current TSN.</param>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.GetNewDataPacketCountTrigger">
             <summary>
             After receiving this number of packets with new DATA, application will generate a SACK
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.RespondWithCOOKIE_ACK(FM.IceLink.SCTPCookieEchoChunk,FM.IceLink.SCTPCommonHeader)">
             <summary>
             Respond to COOKIE_ECHO with COOKIE_ACK (fourth step of the normal association establishment) and move itself to ESTABLISHED state
             </summary>
             <param name="incomingCOOKIEECHOChunk">The incoming cookieecho chunk.</param>
             <param name="header">The SCTP common header from the incoming packet.</param>
             <returns>
             Whether cookie processing was successful
             </returns>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.RespondWithCOOKIE_ECHO(FM.IceLink.SCTPInitAckChunk)">
             <summary>
             Respond to INIT_ACK with COOKIE_ECHO (third step of the normal association establishment)
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.RespondWithINIT_ACK(FM.IceLink.SCTPInitChunk)">
             <summary>
             Respond to INIT with INIT_ACK (second step of the normal association establishment)
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.Initiate">
             <summary>
             Normal establishment of association
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESctpManager.SetAssociationEstablished">
             <summary>
             Sets the state of this SCTP association
             </summary>
            </member>
        <member name="T:FM.IceLink.ICETcpMessageBroker">
             <summary>
             ICE TCP message broker.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpMessageBroker.VirtualSocket">
             <summary>
             Gets or sets the virtual socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpMessageBroker.Socket">
             <summary>
             Gets or sets the socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpMessageBroker.IsClosed">
             <summary>
             Gets a value indicating whether the socket is closed.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICETcpMessageBroker.SendRequest(FM.IceLink.ICESendRequestArgs)">
             <summary>
             Sends a request.
             </summary>
             <param name="sendRequestArgs">The send request arguments.</param>
            </member>
        <member name="M:FM.IceLink.ICETcpMessageBroker.SendResponse(FM.IceLink.ICESendResponseArgs)">
             <summary>
             Sends a response.
             </summary>
             <param name="sendResponseArgs">The send response arguments.</param>
            </member>
        <member name="M:FM.IceLink.ICETcpMessageBroker.StartListening">
             <summary>
             Starts listening for incoming packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICETcpMessageBroker.SendData(System.Byte[],FM.IceLink.TransportAddress,FM.IceLink.TransportAddress)">
             <summary>
             Sends data.
             </summary>
             <param name="buffer">The data buffer.</param>
             <param name="address">The address.</param>
             <param name="relay">The relay.</param>
             <returns>The number of bytes sent.</returns>
            </member>
        <member name="T:FM.IceLink.ICETcpHostCandidate">
             <summary>
             A candidate obtained by binding to a specific port
             from an IP address on the host.  This includes IP addresses on
             physical interfaces and logical ones, such as ones obtained
             through Virtual Private Networks (VPNs) and Realm Specific IP
             (RSIP) [RFC3102] (which lives at the operating system level).
             </summary>
            </member>
        <member name="M:FM.IceLink.ICETcpHostCandidate.GetServerAddress">
             <summary>
             Gets the server address, if any.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.ICETcpHostCandidate.VirtualSocket">
             <summary>
             Gets or sets the virtual socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpHostCandidate.Socket">
             <summary>
             Gets or sets the socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpHostCandidate.AdapterSpeed">
             <summary>
             Gets or sets the adapter speed.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpHostCandidate.LocalPreference">
             <summary>
             Gets or sets the local preference.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpHostCandidate.RelayedCandidate">
             <summary>
             Gets or sets the related relayed candidate.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICETcpRelayedCandidate">
             <summary>
             A candidate obtained by sending a TURN Allocate
             request from a host candidate to a TURN server.  The relayed
             candidate is resident on the TURN server, and the TURN server
             relays packets back towards the agent.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpRelayedCandidate.ServerAddress">
             <summary>
             Gets or sets the server address.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICETcpRelayedCandidate.GetServerAddress">
             <summary>
             Gets the server address, if any.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.ICETcpRelayedCandidate.MappedAddress">
             <summary>
             Gets or sets the mapped address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpRelayedCandidate.TurnUsername">
             <summary>
             Gets or sets the TURN username.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpRelayedCandidate.TurnRealm">
             <summary>
             Gets or sets the TURN realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpRelayedCandidate.TurnPassword">
             <summary>
             Gets or sets the TURN password.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICETcpRelayedCandidate.Refresh">
             <summary>
             Tries to keep the relayed candidate alive.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICETcpRelayedCandidate.Deallocate(FM.CallbackState)">
             <summary>
             Deallocates the relayed candidate.
             </summary>
             <param name="callbackState">The callback state to execute when completed.</param>
            </member>
        <member name="M:FM.IceLink.ICETcpRelayedCandidate.CreatePermission(FM.IceLink.ICECreatePermissionArgs)">
             <summary>
             Creates a permission for the relayed candidate.
             </summary>
             <param name="createPermissionArgs">The create permission arguments.</param>
            </member>
        <member name="T:FM.IceLink.ProtocolType">
             <summary>
             An IceLink protocol type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ProtocolType.Udp">
             <summary>
             Indicates that the protocol is UDP.
             </summary>
            </member>
        <member name="F:FM.IceLink.ProtocolType.Tcp">
             <summary>
             Indicates that the protocol is TCP.
             </summary>
            </member>
        <member name="T:FM.IceLink.RelayOperation">
             <summary>
             An authenticated relay operation.
             </summary>
            </member>
        <member name="F:FM.IceLink.RelayOperation.Allocate">
             <summary>
             Indicates a socket allocation request.
             </summary>
            </member>
        <member name="F:FM.IceLink.RelayOperation.CreatePermission">
             <summary>
             Indicates a create-permission request.
             </summary>
            </member>
        <member name="F:FM.IceLink.RelayOperation.Refresh">
             <summary>
             Indicates an allocation refresh request.
             </summary>
            </member>
        <member name="F:FM.IceLink.RelayOperation.ChannelBind">
             <summary>
             Indicates a channel-bind request.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPRpsiPacket">
             <summary>
             An RTCP Feedback PS-RPSI packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPRpsiPacket.FeedbackMessageTypeByte">
             <summary>
             Gets the feedback message type byte.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPRpsiPacket.ReferencePictureSelectionIndication">
             <summary>
             Gets or sets the reference picture selection indication.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPRpsiPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPRpsiPacket" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPRpsiPacket.DeserializeFCI">
             <summary>
             Deserializes the feedback control information from the FCI payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPRpsiPacket.SerializeFCI">
             <summary>
             Serializes the feedback control information to the FCI payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPReferencePictureSelectionIndication">
             <summary>
             An RTCP reference picture selection indication.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPReferencePictureSelectionIndication.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPReferencePictureSelectionIndication.GetBytes(FM.IceLink.RTCPReferencePictureSelectionIndication)">
             <summary>
             Converts an instance to a byte array.
             </summary>
             <param name="rpsi">The reference picture selection indication.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPReferencePictureSelectionIndication.ParseBytes(System.Byte[])">
             <summary>
             Converts a byte array to an instance.
             </summary>
             <param name="rpsiBytes">The reference picture selection indication bytes.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.RTCPSliPacket">
             <summary>
             An RTCP Feedback PS-SLI packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSliPacket.FeedbackMessageTypeByte">
             <summary>
             Gets the feedback message type byte.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSliPacket.SliceLossIndications">
             <summary>
             Gets or sets the slice loss indications.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSliPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPSliPacket" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSliPacket.DeserializeFCI">
             <summary>
             Deserializes the feedback control information from the FCI payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSliPacket.SerializeFCI">
             <summary>
             Serializes the feedback control information to the FCI payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPSliceLossIndication">
             <summary>
             An RTCP slice loss indication.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSliceLossIndication.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPSliceLossIndication.GetBytes(FM.IceLink.RTCPSliceLossIndication)">
             <summary>
             Converts an instance to a byte array.
             </summary>
             <param name="sli">The slice loss indication.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPSliceLossIndication.ParseBytes(System.Byte[])">
             <summary>
             Converts a byte array to an instance.
             </summary>
             <param name="sliBytes">The slice loss indication bytes.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.RTCPReportPacket">
             <summary>
             An RTCP SR or RR packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportPacket.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportPacket.ReportBlock">
             <summary>
             Gets or sets the report block.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportPacket.ReportBlocks">
             <summary>
             Gets or sets the report blocks.
             </summary>
            </member>
        <member name="T:FM.IceLink.RtpMode">
             <summary>
             Describes the RTP mode to use.
             </summary>
            </member>
        <member name="F:FM.IceLink.RtpMode.Basic">
             <summary>
             Indicates RTP/AVP and RTP/SAVP (secure) profiles
             should be used.
             </summary>
            </member>
        <member name="F:FM.IceLink.RtpMode.Extended">
             <summary>
             Indicates RTP/AVPF and RTP/SAVPF (secure) profiles
             should be used.
             </summary>
            </member>
        <member name="F:FM.IceLink.RtpMode.Default">
             <summary>
             Same as <see cref="F:FM.IceLink.RtpMode.Extended" />.
             </summary>
            </member>
        <member name="T:FM.IceLink.EncryptionRole">
             <summary>
             The encryption role for the stream.
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionRole.Default">
             <summary>
             Same as <see cref="F:FM.IceLink.EncryptionRole.ActivePassive" />.
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionRole.Active">
             <summary>
             Indicates that this endpoint will initiate
             an outgoing connection (client role).
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionRole.Passive">
             <summary>
             Indicates that this endpoint will accept
             an incoming connection (server role).
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionRole.ActivePassive">
             <summary>
             Indicates that this endpoint is willing to
             initiate an outgoing connection (client role)
             or accept an incoming connection (server role).
             </summary>
            </member>
        <member name="P:FM.IceLink.JitterBuffer.Name">
             <summary>
             Gets or sets the buffer name (for log messages).
             </summary>
            </member>
        <member name="P:FM.IceLink.JitterBuffer.MaxDepth">
             <summary>
             Gets or sets the max buffer depth.
             </summary>
            </member>
        <member name="M:FM.IceLink.JitterBuffer.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.JitterBuffer" /> class.
             </summary>
             <param name="maxDepth">The maximum depth.</param>
            </member>
        <member name="M:FM.IceLink.JitterBuffer.AddPacket(FM.IceLink.JitterBufferPacket)">
             <summary>
             Adds a packet.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.JitterBuffer.RemovePacket">
             <summary>
             Removes a packet.
             </summary>
             <returns>The packet, or <c>null</c> if no packets are available.</returns>
            </member>
        <member name="T:FM.IceLink.RSAKey">
             <summary>
             An RSA key.
             </summary>
            </member>
        <member name="P:FM.IceLink.RSAKey.Modulus">
             <summary>
             Gets or sets the public value N.
             </summary>
            </member>
        <member name="P:FM.IceLink.RSAKey.PublicExponent">
             <summary>
             Gets or sets the public value E.
             </summary>
            </member>
        <member name="P:FM.IceLink.RSAKey.PrivateExponent">
             <summary>
             Gets or sets the private value D.
             </summary>
            </member>
        <member name="P:FM.IceLink.RSAKey.Prime1">
             <summary>
             Gets or sets the private value P.
             </summary>
            </member>
        <member name="P:FM.IceLink.RSAKey.Prime2">
             <summary>
             Gets or sets the private value Q.
             </summary>
            </member>
        <member name="P:FM.IceLink.RSAKey.Exponent1">
             <summary>
             Gets or sets the private value DP.
             </summary>
            </member>
        <member name="P:FM.IceLink.RSAKey.Exponent2">
             <summary>
             Gets or sets the private value DQ.
             </summary>
            </member>
        <member name="P:FM.IceLink.RSAKey.Coefficient">
             <summary>
             Gets or sets the private value inverse-Q.
             </summary>
            </member>
        <member name="M:FM.IceLink.RSAKey.HasPublic">
             <summary>
             Returns <c>true</c> if the key contains
             public information.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RSAKey.HasPrivate">
             <summary>
             Returns <c>true</c> if the key contains
             private information.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RSAKey.GetBytes">
             <summary>
             Serializes this key to binary.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RSAKey.ParseBytes(System.Byte[])">
             <summary>
             Deserializes a key from binary.
             </summary>
             <param name="bytes">The bytes.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPLinkedList">
             <summary>
             Threadsafe doubly-linked list implementation.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPLinkedList.Count">
             <summary>
             Gets the number of elements in the list
             </summary>
             <value>
             The count.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPLinkedList.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPLinkedList" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPLinkedList.AddLast(FM.IceLink.SCTPDataChunk)">
             <summary>
             Adds a new node containing the specified value at the end of this <see cref="T:FM.IceLink.SCTPLinkedList" />.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.IceLink.SCTPLinkedList.Clear">
             <summary>
             Removes all nodes from this <see cref="T:FM.IceLink.SCTPLinkedList" />.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPLinkedList.AddFirst(FM.IceLink.SCTPDataChunk)">
             <summary>
             	Adds a new node containing the specified value at the start of this <see cref="T:FM.IceLink.SCTPLinkedList" />.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="M:FM.IceLink.SCTPLinkedList.AddAfter(FM.IceLink.SCTPLinkedListNode,FM.IceLink.SCTPDataChunk)">
             <summary>
             Inserts a node into this linked list containing a specified value after a given node
             </summary>
             <param name="node">The node, after which .</param>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPLinkedList.ToString">
             <summary>
             Returns a string that represents the current object
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPLinkedList.Remove(FM.IceLink.SCTPLinkedListNode)">
             <summary>
             Removes the specified node from the list
             </summary>
             <param name="node">The node to remove.</param>
            </member>
        <member name="P:FM.IceLink.SCTPLinkedList.First">
             <summary>
             Gets the first element of the list.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPLinkedList.Last">
             <summary>
             Gets the last element of the list.
             </summary>
            </member>
        <member name="T:FM.IceLink.SCTPLinkedListNode">
             <summary>
             Doubly-linked liked list node
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPLinkedListNode.Next">
             <summary>
             Gets or sets the next node.
             </summary>
             <value>
             The next node.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPLinkedListNode.Previous">
             <summary>
             Gets or sets the previous node.
             </summary>
             <value>
             The previous node.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPLinkedListNode.Value">
             <summary>
             Gets or sets the value stored in this node.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPLinkedListNode.#ctor(FM.IceLink.SCTPDataChunk)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPLinkedListNode" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.IceLink.SDPRtcpFeedbackAttribute">
             <summary>
             This attribute is used to indicate the capability of
             using RTCP feedback.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtcpFeedbackAttribute.PayloadType">
             <summary>
             Gets or sets the payload type.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtcpFeedbackAttribute.Type">
             <summary>
             Gets or sets the type.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtcpFeedbackAttribute.SubType">
             <summary>
             Gets or sets the sub-type.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPRtcpFeedbackAttribute.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtcpFeedbackAttribute" /> class.
             </summary>
             <param name="payloadType">The payload type.</param>
             <param name="type">The type.</param>
            </member>
        <member name="M:FM.IceLink.SDPRtcpFeedbackAttribute.#ctor(System.Int32,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtcpFeedbackAttribute" /> class.
             </summary>
             <param name="payloadType">The payload type.</param>
             <param name="type">The type.</param>
             <param name="subtype">The subtype.</param>
            </member>
        <member name="M:FM.IceLink.SDPRtcpFeedbackAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtcpFeedbackAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPSctpMapAttribute">
             <summary>
              AB: Legacy attribute. To be removed when Firefox and Chrome stop using it.
              The sctpmap attribute maps from a port number (as used in an "m="
              line) to an encoding name denoting the payload format to be used on
              top of the SCTP association or the actual protocol running on top of it.
              Last appears in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-06#page-6
              Has been replaced in subsequent drafts but is used in Firefox and Chrome for now.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpMapAttribute.Port">
             <summary>
             Gets or sets the SCTP port.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpMapAttribute.SctpProtocol">
             <summary>
             Gets or sets the SCTP sub-protocol (association usage).
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpMapAttribute.Streams">
             <summary>
             Gets the number of incoming streams.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSctpMapAttribute.#ctor(System.Int32,System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSctpPortAttribute" /> class.
             </summary>
             <param name="port">The SCTP port.</param>
             <param name="protocol">The protocol.</param>
             <param name="streams">The streams.</param>
            </member>
        <member name="M:FM.IceLink.SDPSctpMapAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSctpPortAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SCTPAssociationState">
             <summary>
             Parameters describing the current state of association (denoted TCB in RFC 4960)
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.SCTPDynamicAddressReconfigurationSupport">
             <summary>
             Gets or sets a value indicating whether SCTP dynamic address reconfiguration is supported.
             </summary>
             <value>
             <c>true</c> if [SCTP dynamic address reconfiguration support]; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.AuthenticatedChunksSupport">
             <summary>
             Gets or sets the authenticated chunks support info.
             </summary>
             <value>
             The authenticated chunks support info.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.PartialReliabilitySupport">
             <summary>
             Gets or sets a value indicating whether Forward TSN can be properly parsed by this endpoint (but not necessarily processed)
             </summary>
             <value>
             <c>true</c> if forward is TSN supported by this endpoint; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.OnAssociationInitiationSuccess">
             <summary>
             Gets or sets the association initation success handler
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.OnAssociationInitiationFailure">
             <summary>
             Gets or sets the association initation failure handler
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.ExtraPacketInFlight">
             <summary>
             Regardless of the value of rwnd (including if it is 0),
             the data sender can always have one DATA chunk in flight to the receiver if allowed by cwnd (Rule 6.1 A in RFC 4960)
             </summary>
             <value>
             <c>true</c> if [extra packet in flight]; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.InitRetransmitsRemaining">
             <summary>
             Tracks the remaining  number of retransmissions of INIT and COOKIE_ECHO
             before the peer is declared unreachable.
             </summary>
             <value>
             The INIT retransmits remaining.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.MyVerificationTag">
             <summary>
             Tag expected in every inbound packet and sent in the INIT or INIT ACK chunk.
             </summary>
             <value>
             My verification tag.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.PeerVerificationTag">
             <summary>
             Tag value to be sent in every packet and is received in the INIT or INIT ACK chunk.
             </summary>
             <value>
             The peer verification tag.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.State">
             <summary>
             A state variable indicating what state the association is in
             </summary>
             <value>
             The state.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.OverallErrorCount">
             <summary>
             The overall association error count.
             </summary>
             <value>
             The overall error count.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.OverallErrorThreshold">
             <summary>
             The threshold for this association that if the Overall Error Count reaches will cause this association to be torn down.
             </summary>
             <value>
             The overall error threshold.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.PeerRWND">
             <summary>
             Peer's rwnd.
             </summary>
             <value>
             The peer RWND.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.ARWND">
             <summary>
             advertised receiver window credit for this endpoint.
             </summary>
             <value>
             The arwnd.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.NextTSNToSend">
             <summary>
             The next TSN number to be assigned to a new DATA chunk. This is sent in the INIT or INIT ACK chunk to the peer and incremented each time a DATA chunk is assigned a
             TSN (normally just prior to transmit or during fragmentation).
             </summary>
             <value>
             The next TSN to send to peer.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.GreatestReceivedTSN">
             <summary>
             This is the last TSN received in sequence. This value is set initially by taking the peer’s initial TSN, received in the INIT or INIT ACK chunk, and subtracting one from it.
             </summary>
             <value>
             The last received TSN.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.GreatestCumulativeTSNReceived">
             <summary>
             Gets or sets the greatest TSN value such that all the chunks prior to and including this value have been received
             </summary>
             <value>
             The greatest TSN raised.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.SACKOnReceivedDATA">
             <summary>
             SACK containing information on received data (to be sent out to the other party).
             </summary>
             <value>
             SACK
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.SACKCounter">
             <summary>
             This flag indicates if the next received packet is to be responded to with a SACK. This is initialized to 0. When a packet (with DATA chunks) is received it is incremented.
             If this value reaches 2 or more, a SACK is sent and the value is reset to 0. Note: This is used only when no DATA chunks are received out of order. When DATA
             chunks are out of order, SACKs are not delayed (see Section 6 of RFC 4960).
             </summary>
             <value>
             The state of the sack.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.InboundChannels">
             <summary>
             An array of structures to track the inbound channels, normally including the next sequence number expected and possibly the stream number.
             </summary>
             <value>
             The inbound channels.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.OutboundChannels">
             <summary>
             An array of structures to track the outbound channels, normally including the next sequence number to be sent on the stream.
             </summary>
             <value>
             The outbound channels.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.AssociationPMTU">
             <summary>
             The smallest PMTU discovered for the peer's transport address.
             </summary>
             <value>
             The association pmtu.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.CWND">
             <summary>
             The current congestion window.
             </summary>
             <value>
             CWND.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.MaximumStaticCWND">
             <summary>
             Gets or sets the maximum static CWND. Temporary solution before proper congestion control is implemented.
             </summary>
             <value>
             The maximum static CWND.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.SSThresh">
             <summary>
             The current ssthresh.
             </summary>
             <value>
             SSThresh.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.RTO">
             <summary>
             The current retransmission timeout value.
             </summary>
             <value>
             RTO.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.SRTT">
             <summary>
             The Smoothed Round Trip Time.
             </summary>
             <value>
             SRTT.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.RTTVAR">
             <summary>
             Gets or sets the current RTT variation.
             </summary>
             <value>
             RTTVAR.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.PartialBytesACKed">
             <summary>
             The tracking method for increase of cwnd when in congestion avoidance mode (see Section 7.2.2 of RFC 4960).
             </summary>
             <value>
             The partial bytes ac ked.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.RTOPending">
             <summary>
             RTO-Pending : A flag used to track if one of the DATA chunks sent to this address is currently being used to compute an RTT.
             If this flag is 0, the next DATA chunk sent to this destination should be used to compute an RTT and
             this flag should be set. Every time the RTT calculation completes (i.e., the DATA chunk is SACKed), clear this flag.
             </summary>
             <value>
             The rto pending.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.LastSentTime">
             <summary>
             The time to which this destination was last sent.
             This can be used to determine if a HEARTBEAT is needed.
             </summary>
             <value>
             The last time.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.EarliestAllowedSACKSendTime">
             <summary>
             Indicates the eariest time a SACK can be sent (in milliseconds since 01.01.1970).
             </summary>
             <value>
             The earliest time SACK can be sent.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.EarliestAllowedRetransmissionTime">
             <summary>
             Indicates the eariest time DATA can be retransmitted (in milliseconds since 01.01.1970).
             </summary>
             <value>
             The earliest timeDATA can be retransmitted.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.DontHaltSctpSendLoop">
             <summary>
             Gets or sets a value indicating whether SCTP manager prepared new data to be sent (either payload or control transmission data).
             This data may be sent if the current congestion window is not full.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.FreshestReceivedSACK">
             <summary>
             Stores the freshest SACK received from the other party
             </summary>
             <value>
             The freshest sack.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.ProcessIncomingSACK">
             <summary>
             Indicates that a newly received SACK should be processed (i.e. the outgoing queue should be examined and pruned)
             </summary>
             <value>
               <c>true</c> if [process sack]; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAssociationState.SecretKeyForSCTPCookie">
             <summary>
             Gets or sets the secret key bytes to sign SCTP cookie.
             </summary>
             <value>
             The key bytes to sign SCTP cookie.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPAssociationState.ResetAssociationState">
             <summary>
             Resets the association state arguments to the state when association was in the CLOSED state.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPAssociationState.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPAssociationState" /> class.
             This constructor incorporates parameters needed to create a state cookie when sending INIT ACK
             </summary>
             <param name="myVerificationTag">My verification tag.</param>
             <param name="peerVerificationTag">The peer verification tag.</param>
             <param name="peerRWND">The peer advertised RWND.</param>
             <param name="lastReceivedTSNFromPeer">The last received TSN from peer.</param>
             <param name="numOutboundChannels">The number outbound channels.</param>
             <param name="secretKey">The secret key.</param>
            </member>
        <member name="M:FM.IceLink.SCTPAssociationState.ImportSCTPAssociationStateArgsParameters(FM.IceLink.SCTPAssociationState)">
             <summary>
             Import SCTPAssociationStateArgs parameters from a SCTPAssociationStateArgs extracted from cookie
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPAssociationState.#ctor(System.Int32,System.Int32,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPAssociationState" /> class.
             </summary>
             <param name="oc">Number of outbound channels.</param>
             <param name="ic">Number of inbound channels.</param>
             <param name="a_rwnd">The advertised receiver window credit.</param>
            </member>
        <member name="M:FM.IceLink.SCTPAssociationState.#ctor(FM.IceLink.SCTPStateCookie)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPAssociationState" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPAssociationState.GetNewCookie">
             <summary>
             Gets the sctp state cookie (for INIT/INITACK purposes).
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPConstants">
             <summary>
             Contains some SCTP protocol constant parameters
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.MaxNumberStreamFormats">
             <summary>
             Maximum number of stream types when SCTP is used
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.MaxDataChunkSize">
             <summary>
             Maximum size of the SCTP chunk
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.MaxDataPacketPayloadSize">
             <summary>
             Maximum size of the SCTP packet payload
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.ValidCookieLife">
             <summary>
             Valid cookie lifespan (in milliseconds). If this time elapses, echoed cookie in initialisation stage  becomes invalid.
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.MaxTSN">
             <summary>w
             Defines the maximum allowed TSN value
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.MaxSSN">
             <summary>
             Defines the maximum allowed SSN value 
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.MaxInitiateTag">
             <summary>
             Defines the maximum Initiate Tag 
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.MaxSuggestedCookieLifespanIncrement">
             <summary>
             The maximum suggested cookie lifespan increment
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.MaxInitRetransmits">
             <summary>
             The max number of T1 INIT retransmits
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.T1InitTimeoutTimer">
             <summary>
             Timeout of the T1 INIT timer (in milliseconds)
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.DefaultSourcePort">
             <summary>
             The source port
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.DefaultDestinationPort">
             <summary>
             The destination port
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.RTOInitial">
             <summary>
             Default DATA retransmission timeout in milliseconds
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.RTOMin">
             <summary>
             Minimum DATA retransmission timeout in milliseconds
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.RTOMax">
             <summary>
             Maximum DATA retransmission timeout in milliseconds
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.RTOAlpha">
             <summary>
             RTO.Alpha parameter for DATA retransmission timeout
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.RTOBeta">
             <summary>
             RTO.Beta parameter for DATA retransmission timeout
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.MaxAckDelay">
             <summary>
             Time period whithin which SCTP should accept incoming DATA chunk in milliseconds. Cannot be greater than 500 ms.
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.AckNewDataPacketCountThreshold">
             <summary>
             After receiving this number of packets with new DATA, application will generate a SACK
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.ImmediateAckThreshold">
             <summary>
             If the share of new data chunks in a received packed is smaller than this number, a SACK will be generated immediately
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.NumberOfPacketsProcessorYieldThreshold">
             <summary>
             After sending this number of packets in a single transmission sequence, application should yield processing time to system for <seealso cref="F:FM.IceLink.SCTPConstants.TimeToYield" /> milliseconds.
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPConstants.TimeToYield">
             <summary>
             After sending <seealso cref="F:FM.IceLink.SCTPConstants.NumberOfPacketsProcessorYieldThreshold" /> packets in a single transmission sequence, application should yield processing time to system for this many milliseconds.
             </summary>
            </member>
        <member name="T:FM.IceLink.SCTPAuxilary">
             <summary>
             Collection of SCTP Auxilary methods
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPAuxilary.CalculatePaddingBytes(System.Int32)">
             <summary>
             Pads an sctp chunk parameter or an sctp chunk bytes if necessary
             (to ensure that the number of bytes is a multiple of 4)
             </summary>
             <param name="len">The non-padded (payload + header) length of the chunk.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPAuxilary.AddPadding(FM.ByteCollection)">
             <summary>
             Calculates the number of padded bytes in a given chunk. 
             These are not included in the chunk length parameter.
             </summary>
             <param name="bytes">The byte array to be padded.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPAuxilary.GetCurrentTimestampInMilliSeconds">
             <summary>
             Gets the current timestamp represented by the number of milliseconds since 01.01.1970
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPAuxilary.IncrementTSN(System.Int64)">
             <summary>
             Increments TSN value, rolling it over(if necessary).
             </summary>
             <param name="tsn">The next TSN.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPAuxilary.IncrementSSN(System.Int32)">
             <summary>
             Increments SSN value, rolling it over(if necessary).
             </summary>
             <param name="ssn">The next SSN.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPAuxilary.DecrementTSN(System.Int64)">
             <summary>
             Decrements TSN value, rolling it over(if necessary).
             </summary>
             <param name="tsn">The previous TSN.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPAuxilary.SubtractTSN(System.Int64,System.Int64)">
             <summary>
             Calculates the difference between tsnA and tsnB
             by subtracting the value of tsnB from tsnA and taking
             TSN rollover into account.
             </summary>
             <param name="tsnA">The TSN a.</param>
             <param name="tsnB">The TSN b.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPAuxilary.CompareTSNs(System.Int64,System.Int64)">
             <summary>
             Compares two TSN values (accounting for TSN rollover)
             </summary>
             <param name="tsnA">TSN value a.</param>
             <param name="tsnB">TSN value b.</param>
             <returns>0 if values are the same; 1 if the first value is greater; 2 if the second value is greater.</returns>
            </member>
        <member name="T:FM.IceLink.SCTPChunkType">
             <summary>
             Identifies the type of information contained in the Chunk Value field.
             It takes a value from 0 to 254. The value of 255 is reserved for future use as an extension field.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Data">
             <summary>
             Payload Data
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Init">
             <summary>
             Initiation
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.InitAck">
             <summary>
             Initiation Acknowledgement
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Sack">
             <summary>
             Selective Acknowledgement
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Heartbeat">
             <summary>
             Heartbeat Request
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.HeartbeatAck">
             <summary>
             Heartbeat Acknowledgement
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Abort">
             <summary>
             Abort
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Shutdown">
             <summary>
             Shutdown
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.ShutdownAck">
             <summary>
             Shutdown Acknowledgement 
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Error">
             <summary>
             Operation Error
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.CookieEcho">
             <summary>
             State Cookie
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.CookieAck">
             <summary>
             Cookie Acknowledgement 
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Ecne">
             <summary>
             Explicit Congestion Notification Echo
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Cwr">
             <summary>
             Congestion Window Reduced
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.ShutdownComplete">
             <summary>
             Shutdown Complete
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Auth">
             <summary>
             Authentication Chunk
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.AsConfAck">
             <summary>
             Gets Address Configuration Acknowledgment (ASCONF-ACK).
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.ReConfig">
             <summary>
             Re-configuration Chunk (RE-CONFIG).
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.Pad">
             <summary>
             Padding
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.ForwardCumulativeTSN">
             <summary>
             Forward Cumulative TSN
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkType.AsConf">
             <summary>
             Address Configuration Change Chunk (ASCONF)
             </summary>
            </member>
        <member name="T:FM.IceLink.SCTPParameterType">
             <summary>
             Identifies the type of information contained in the Parameter Value field.
             It takes a value from 0 to 65534. 
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.HeartbeatInfo">
             <summary>
             The heartbeat information
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.IPv4Address">
             <summary>
             IPv4 Address Parameter (5)
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.StateCookie">
             <summary>
             The state cookie (7)
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.UnrecognizedParameter">
             <summary>
             The unrecognized parameter (8)
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.CookiePreservative">
             <summary>
             The cookie preservative
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.HostNameAddress">
             <summary>
             The host name address
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.SupportedAddressTypes">
             <summary>
             The supported address types
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.RandomParameter">
             <summary>
             The random parameter
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.ChunkList">
             <summary>
             The chunk list
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.RequestedHMACAlgorithmParameter">
             <summary>
             The requested hmac algorithm parameter
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.Pad">
             <summary>
             Padding Parameter (PAD)
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.SupportedExtensionsParameter">
             <summary>
             The supported extensions parameter
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPParameterType.ForwardTSNSupportedParameter">
             <summary>
             The forward TSN supported parameter
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.InvalidStreamIdentifier">
             <summary>
             The invalid stream identifier
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.MissingMandatoryParameter">
             <summary>
             The missing mandatory parameter
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.StaleCookieError">
             <summary>
             The stale cookie error
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.OutOfResource">
             <summary>
             The out of resource
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.UnresolvableAddress">
             <summary>
             The unresolvable address
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.UnrecognizedChunkType">
             <summary>
             The unrecognized chunk type
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.InvalidMandatoryParameter">
             <summary>
             The invalid mandatory parameter
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.UnrecognizedParameters">
             <summary>
             The unrecognized parameters
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.NoUserData">
             <summary>
             The no user data
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.CookieReceivedWhileShuttingDown">
             <summary>
             The cookie received while shutting down
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.RestartOfAnAssociationWithNewAddresses">
             <summary>
             The restart of an association with new addresses
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.UserInitiatedAbort">
             <summary>
             The user initiated abort
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCauseCode.ProtocolViolation">
             <summary>
             The protocol violation
             </summary>
            </member>
        <member name="T:FM.IceLink.SCTPChannel">
             <summary>
             Reliable SCTP Data Channel
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPChannel.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPChannel" /> class.
             </summary>
             <param name="id">Channel ID.</param>
            </member>
        <member name="P:FM.IceLink.SCTPChannel.NextSSN">
             <summary>
             Gets or sets the next SSN for this channel.
             </summary>
             <value>
             The next SSN.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPChannel.ID">
             <summary>
             Gets or sets the channel identifier.
             </summary>
             <value>
             The channel identifier.
             </value>
            </member>
        <member name="T:FM.IceLink.SCTPChannels">
             <summary>
             A collection of data channels
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChannels.Count">
             <summary>
             Gets the number of channels.
             </summary>
             <value>
             The count.
             </value>
            </member>
        <member name="F:FM.IceLink.SCTPChannels._Channels">
             <summary>
             Internal collection of SCTP channels
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPChannels.GetChannel(System.Int32)">
             <summary>
             Returns the specified channel.
             </summary>
             <param name="channelID">The channel identifier.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPChannels.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPChannels" /> class.
             </summary>
             <param name="numChannels">The number channels.</param>
            </member>
        <member name="T:FM.IceLink.SCTPAbortChunk">
             <summary>
             The ABORT chunk is sent to the peer of an association to close the
             association. The ABORT chunk may contain Cause Parameters to inform
             the receiver about the reason of the abort. DATA chunks MUST NOT be
             Bundled with ABORT. Control chunks (except for INIT, INIT ACK, and
             SHUTDOWN COMPLETE) MAY be bundled with an ABORT, but they MUST be
             placed before the ABORT in the SCTP packet or they will be ignored by
             the receiver.
             If an endpoint receives an ABORT with a format error or no SCTPAssociationStateArgs is
             found, it MUST silently discard it. Moreover, under any
             circumstances, an endpoint that receives an ABORT MUST NOT respond to
             that ABORT by sending an ABORT of its own.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |   Type = 6    |    Reserved |T|              Length           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /                zero or more Error Causes                      /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             Refer to RFC 4960 3.3.7 for details
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPAbortChunk.VerificationTagReflected">
             <summary>
             Indicates whether Verification Tag is reflected (same aS received).
             </summary>
             <value>
             <c>true</c> if the verification tag is reflected (returned same as received);
             <c>false</c> if the sender filled in the verification tag expected by the peer
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPAbortChunk.ErrorCauses">
             <summary>
             Gets or sets the error causes.
             </summary>
             <value>
             Errors.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPAbortChunk.#ctor(System.Boolean,FM.IceLink.SCTPErrorCause[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPAbortChunk" /> class.
             </summary>
             <param name="verificationTagReflected"><c>true</c> if the verification tag is reflected (returned same as received);
             <c>false</c> if the sender filled in the verification tag expected by the peer.</param>
             <param name="errorCauses">Error causes.</param>
            </member>
        <member name="M:FM.IceLink.SCTPAbortChunk.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPAbortChunk" /> class.
             </summary>
             <param name="verificationTagReflected"><c>true</c> if the verification tag is reflected (returned same as received);
             <c>false</c> if the sender filled in the verification tag expected by the peer.</param>
            </member>
        <member name="M:FM.IceLink.SCTPAbortChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPAbortChunk.GetBytes(FM.IceLink.SCTPAbortChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPAbortChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a packet.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPCookieAckChunk">
             <summary>
             Cookie Acknowledgement (COOKIE ACK) (11)
             This chunk is used only during the initialization of an association.
             It is used to acknowledge the receipt of a COOKIE ECHO chunk. This
             chunk MUST precede any DATA or SACK chunk sent within the
             association, but MAY be bundled with one or more DATA chunks or SACK
             chunk’s in the same SCTP packet.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |     Type = 11 |   Chunk Flags |            Length = 4         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPCookieAckChunk.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPCookieAckChunk" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPCookieAckChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCookieAckChunk.GetBytes(FM.IceLink.SCTPCookieAckChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCookieAckChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPCookieEchoChunk">
             <summary>
             This chunk is used only during the initialization of an association.
             It is sent by the initiator of an association to its peer to complete
             the initialization process. This chunk MUST precede any DATA chunk
             sent within the association, but MAY be bundled with one or more DATA
             chunks in the same packet.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |   Type = 10   |   Chunk Flags |           Length              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                            Cookie                             /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPCookieEchoChunk.CookieBytes">
             <summary>
             This field must contain the exact cookie in byte format received in the State
             Cookie parameter from the previous INIT ACK.
             An implementation SHOULD make the cookie as small as possible to
             ensure interoperability.
             Note: A Cookie Echo does NOT contain a State Cookie parameter;
             instead, the data within the State Cookie’s Parameter Value
             becomes the data within the Cookie Echo’s Chunk Value. This
             allows an implementation to change only the first 2 bytes the
             State Cookie parameter to become a COOKIE ECHO chunk.
             </summary>
             <value>
             The cookie bytes.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPCookieEchoChunk.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPCookieEchoChunk" /> class.
             </summary>
             <param name="cookieBytes">The cookie bytes.</param>
            </member>
        <member name="M:FM.IceLink.SCTPCookieEchoChunk.#ctor(FM.IceLink.SCTPStateCookie)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPCookieEchoChunk" /> class.
             </summary>
             <param name="cookie">The cookie bytes.</param>
            </member>
        <member name="M:FM.IceLink.SCTPCookieEchoChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCookieEchoChunk.GetBytes(FM.IceLink.SCTPCookieEchoChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCookieEchoChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPDataChunk">
             <summary>
             Payload Data Chunk
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | Type = 0      | Reserved|U|B|E|           Length              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           TSN                                 |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |           Stream Identifier S | Stream Sequence Number n      |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                   Payload Protocol Identifier                 |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /                   User Data (seq n of Stream S)               /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.SendArgs">
             <summary>
             Gets or sets the send message arguments associated with this message
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.Acked">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:FM.IceLink.SCTPDataChunk" /> has been received.
             </summary>
             <value>
               <c>true</c> if acked; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.Raised">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:FM.IceLink.SCTPDataChunk" /> has been received and raised to the user.
             </summary>
             <value>
               <c>true</c> if raised; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.Unordered">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:FM.IceLink.SCTPDataChunk" /> is an unordered.
             If set to true, this is an unordered DATA chunk, and there is no Stream Sequence Number assigned to it. 
             Therefore, the receiver MUST ignore the <see cref="P:FM.IceLink.SCTPDataChunk.StreamSequenceNumber" /> field. 
             After reassembly (if necessary), unordered DATA chunks MUST be dispatched to the upper layer 
             by the receiver without any attempt to reorder. If an unordered user message is fragmented, each fragment
             of the message MUST have this set to true.
             </summary>
             <value>
               <c>true</c> if unordered; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.Beginning">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:FM.IceLink.SCTPDataChunk" /> is the first fragment of a user message.
             </summary>
             <value>
               <c>true</c> if beginning; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.Ending">
             <summary>
             Gets or sets a value indicating whether this <see cref="T:FM.IceLink.SCTPDataChunk" /> is last fragment of a user message.
             </summary>
             <value>
               <c>true</c> if beginning; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.TSN">
             <summary>
             This value represents the sequence number for the entire DATA stream (used in fragmentation for reassembly) for this DATA chunk. 
             The valid range of TSN is from 0 to 4294967295 (2**32 - 1). TSN wraps back to 0 after reaching 4294967295.
             </summary>
             <value>
             TSN.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.StreamIdentifier">
             <summary>
             Identifies the stream to which the following user data belongs.
             </summary>
             <value>
             The stream identifier.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.StreamSequenceNumber">
             <summary>
             This value represents the Stream Sequence Number of the following user data within the stream represented by <see cref="P:FM.IceLink.SCTPDataChunk.StreamIdentifier" />. 
             Valid range is 0 to 65535. When a user message is fragmented by SCTP for transport, the same Stream Sequence Number MUST be carried in each
             of the fragments of the message.
             </summary>
             <value>
             The stream sequence number.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.PayloadProtocolIdentifier">
             <summary>
             Gets or sets the payload protocol identifier. This value represents an application (or upper layer) specified protocol identifier. 
             This value is passed to SCTP by its upper layer and sent to its peer. This identifier is not used by SCTP but can be used by certain network entities, 
             as well as by the peer application, to identify the type of information being carried in this DATA chunk. This field must be sent even in fragmented DATA 
             chunks (to make sure it is available for agents in the middle of the network). Note that this field is NOT touched by an SCTP implementation; 
             therefore, its byte order is NOT necessarily big endian. The upper layer is responsible for any byte order conversions to this field. The value 0 indicates 
             that no application identifier is specified by the upper layer for this payload data.
             </summary>
             <value>
             The payload protocol identifier.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.UserData">
             <summary>
             This is the payload user data. The implementation MUST pad the end of the data to a 4-byte boundary with all-zero bytes. 
             Any padding MUST NOT be included in the Length field. A sender MUST never add more than 3 bytes of padding.
             </summary>
             <value>
             The user data.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataChunk.TransmissionTime">
             <summary>
             Gets or sets the latest time when this chunk was transmitted (in milliseconds since 01.01.1970).
             If the chunk has never been transmitted, the value is set to -1.
             </summary>
             <value>
             The transmission time.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPDataChunk.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int64,System.Int32,System.Int32,System.Int64,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPDataChunk" /> chunk class.
             </summary>
             <param name="unordered">Indicates if this <see cref="T:FM.IceLink.SCTPDataChunk" /> chunk is unordered.</param>
             <param name="beginning">Indicates if this is the first fragment of a user message.</param>
             <param name="ending">Indicates if this is the last fragment of a user message.</param>
             <param name="tsn">The sequence number for the entire <see cref="T:FM.IceLink.SCTPDataChunk" /> stream (used in fragmentation for reassembly).</param>
             <param name="streamID">The stream identifier.</param>
             <param name="ssn">The stream sequence number.</param>
             <param name="ppi">The payload protocol identifier.</param>
             <param name="userData">User data.</param>
            </member>
        <member name="M:FM.IceLink.SCTPDataChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPDataChunk.GetBytes(FM.IceLink.SCTPDataChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPDataChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPErrorChunk">
             <summary>
             An endpoint sends this chunk to its peer endpoint to notify it of
             certain error conditions. It contains one or more error causes. An
             Operation Error is not considered fatal in and of itself, but may be
             used with an ABORT chunk to report a fatal condition. It has the
             following parameters:
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Type = 9 |   Chunk Flags |               Length          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /                   one or more Error Causes                    /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPErrorChunk.ErrorCauses">
             <summary>
             Gets or sets the errors.
             </summary>
             <value>
             The errors.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPErrorChunk.#ctor(FM.IceLink.SCTPErrorCause[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPErrorChunk" /> class.
             </summary>
             <param name="errorCauses">The errors.</param>
            </member>
        <member name="M:FM.IceLink.SCTPErrorChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPErrorChunk.GetBytes(FM.IceLink.SCTPErrorChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPErrorChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to an error.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPErrorCause">
             <summary>
             Error causes are defined as variable-length parameters using the
             format described in Section 3.2.1, that is:
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |              Cause Code       |      Cause Length             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                  Cause-Specific Information                   /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPErrorCause.causeCode">
             <summary>
             The cause code
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPErrorCause.CauseCode">
             <summary>
             Defines the type of error conditions being reported.
             </summary>
             <value>
             The cause code.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPErrorCause.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPErrorCause.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Return ErrorCause object represented by a given byte[].
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The start index.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPInvalidStreamIdentifier">
             <summary>
             Invalid Stream Identifier: Indicates endpoint received a DATA chunk
             sent to a nonexistent stream.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Cause Code=1 |   Cause Length=8              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |           Stream Identifier     |            (Reserved)       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPInvalidStreamIdentifier.StreamIdentifier">
             <summary>
             Contains the Stream Identifier of the DATA chunk received in error.
             </summary>
             <value>
             The stream identifier.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPInvalidStreamIdentifier.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPInvalidStreamIdentifier" /> class.
             </summary>
             <param name="streamIdentifier">The stream identifier.</param>
            </member>
        <member name="M:FM.IceLink.SCTPInvalidStreamIdentifier.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPInvalidStreamIdentifier.GetBytes(FM.IceLink.SCTPInvalidStreamIdentifier)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPInvalidStreamIdentifier.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPMissingMandatoryParameter">
             <summary>
             Missing Mandatory Parameter: Indicates that one or more mandatory TLV
             parameters are missing in a received INIT or INIT ACK.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Cause Code=2 |            Cause Length=8+N*2 |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                    Number of missing params=N                 |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | Missing Param Type #1           | Missing Param Type #2       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | Missing Param Type #N-1         | Missing Param Type #N       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPMissingMandatoryParameter.MissingParameters">
             <summary>
             Contains the Stream Identifier of the DATA chunk received in error.
             </summary>
             <value>
             The stream identifier.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPMissingMandatoryParameter.#ctor(System.Int32[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPInvalidStreamIdentifier" /> class.
             </summary>
             <param name="missingParameters">The missing parameters.</param>
            </member>
        <member name="M:FM.IceLink.SCTPMissingMandatoryParameter.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPMissingMandatoryParameter.GetBytes(FM.IceLink.SCTPMissingMandatoryParameter)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPMissingMandatoryParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPStaleCookieError">
             <summary>
             Stale Cookie Error: Indicates the receipt of a valid State Cookie
             that has expired.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Cause Code=3 |     Cause Length=8            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                    Measure of Staleness (usec.)               |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPStaleCookieError.MeasureOfStaleness">
             <summary>
             This field contains the difference, in milliseconds, between the
             current time and the time the State Cookie expired.
             The sender of this error cause MAY choose to report how long past
             expiration the State Cookie is by including a non-zero value in
             the Measure of Staleness field. If the sender does not wish to
             provide this information, it should set the Measure of Staleness
             field to the value of zero.
             </summary>
             <value>
             The measure of staleness.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPStaleCookieError.#ctor(System.Nullable{System.Int64})">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPStaleCookieError" /> class.
             </summary>
             <param name="staleTime">This field contains the difference, in milliseconds, between the
             current time and the time the State Cookie expired.Optional.</param>
            </member>
        <member name="M:FM.IceLink.SCTPStaleCookieError.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPStaleCookieError.GetBytes(FM.IceLink.SCTPStaleCookieError)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPStaleCookieError.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPOutOfResource">
             <summary>
             Out of Resource: Indicates that the sender is out of resource. This
             is usually sent in combination with or within an ABORT.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Cause Code=4 | Cause Length=4                |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPOutOfResource.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPOutOfResource" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPOutOfResource.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPOutOfResource.GetBytes(FM.IceLink.SCTPOutOfResource)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPOutOfResource.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPUnresolvableAddress">
             <summary>
             Unresolvable Address: Indicates that the sender is not able to
             resolve the specified address parameter (e.g., type of address is not
             supported by the sender). This is usually sent in combination with
             or within an ABORT.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                 Cause Code=5  |     Cause Length              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                       Unresolvable Address                    /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPUnresolvableAddress.Address">
             <summary>
             The Unresolvable Address field contains the complete Type, Length,
             and Value of the ipv4 address parameter (or Host Name parameter) that
             contains the unresolvable address or host name.
             </summary>
             <value>
             The address.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPUnresolvableAddress.#ctor(FM.IceLink.SCTPTLVParameter)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPUnresolvableAddress" /> class.
             </summary>
             <param name="address">The actual unresolvable address (host name or ipv4 address).</param>
            </member>
        <member name="M:FM.IceLink.SCTPUnresolvableAddress.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUnresolvableAddress.GetBytes(FM.IceLink.SCTPUnresolvableAddress)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUnresolvableAddress.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPUnrecognizedChunkType">
             <summary>
             Unrecognized Chunk Type: This error cause is returned to the
             originator of the chunk if the receiver does not understand the chunk
             and the upper bits of the ’Chunk Type’ are set to 01 or 11.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Cause Code=6 |     Cause Length              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                    Unrecognized Chunk                         /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPUnrecognizedChunkType.UnrecognizedChunk">
             <summary>
             The Unrecognized Chunk field contains the unrecognized chunk from
             the SCTP packet complete with Chunk Type, Chunk Flags, and Chunk
             Length.
             </summary>
             <value>
             The address.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedChunkType.#ctor(FM.IceLink.SCTPChunk)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPUnrecognizedChunkType" /> class.
             </summary>
             <param name="unrecognizedChunk">The unrecognized chunk.</param>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedChunkType.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedChunkType.GetBytes(FM.IceLink.SCTPUnrecognizedChunkType)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedChunkType.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPInvalidMandatoryParameter">
             <summary>
             Invalid Mandatory Parameter: This error cause is returned to the
             originator of an INIT or INIT ACK chunk when one of the mandatory
             parameters is set to an invalid value.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Cause Code=7 |     Cause Length=4            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPInvalidMandatoryParameter.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPInvalidMandatoryParameter" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPInvalidMandatoryParameter.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPInvalidMandatoryParameter.GetBytes(FM.IceLink.SCTPInvalidMandatoryParameter)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPInvalidMandatoryParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPUnrecognizedParameters">
             <summary>
             Cause of error
             ---------------
             Unrecognized Parameters: This error cause is returned to the
             originator of the INIT ACK chunk if the receiver does not recognize
             one or more Optional TLV parameters in the INIT ACK chunk.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Cause Code=8 |      Cause Length             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                   Unrecognized Parameters                     /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPUnrecognizedParameters.Parameters">
             <summary>
             Unrecognized Parameters: variable length
             The Unrecognized Parameters field contains the unrecognized
             parameters copied from the INIT ACK chunk complete with TLV. This
             error cause is normally contained in an ERROR chunk bundled with
             the COOKIE ECHO chunk when responding to the INIT ACK, when the
             sender of the COOKIE ECHO chunk wishes to report unrecognized
             parameters.
             </summary>
             <value>
             The parameters.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedParameters.#ctor(FM.IceLink.SCTPTLVParameter[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPUnrecognizedParameters" /> class.
             </summary>
             <param name="parameters">The parameters.</param>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedParameters.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedParameters.GetBytes(FM.IceLink.SCTPUnrecognizedParameters)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedParameters.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPNoUserData">
             <summary>
             Cause of error
             ---------------
             No User Data: This error cause is returned to the originator of a
             DATA chunk if a received DATA chunk has no user data.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Cause Code=9 |              Cause Length=8   |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                      TSN value                                |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPNoUserData.TSN">
             <summary>
             The TSN value field contains the TSN of the DATA chunk received
             with no user data field.
             </summary>
             <value>
             TSN.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPNoUserData.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPNoUserData" /> class.
             </summary>
             <param name="tsn">The TSN value field contains the TSN of the DATA chunk received
             with no user data field.</param>
            </member>
        <member name="M:FM.IceLink.SCTPNoUserData.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPNoUserData.GetBytes(FM.IceLink.SCTPNoUserData)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPNoUserData.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPCookieReceivedWhileShuttingDown">
             <summary>
             Cookie Received While Shutting Down: A COOKIE ECHO was received while
             the endpoint was in the SHUTDOWN-ACK-SENT state. This error is
             usually returned in an ERROR chunk bundled with the retransmitted
             SHUTDOWN ACK.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |          Cause Code=10        |  Cause Length=4               |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPCookieReceivedWhileShuttingDown.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPCookieReceivedWhileShuttingDown" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPCookieReceivedWhileShuttingDown.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCookieReceivedWhileShuttingDown.GetBytes(FM.IceLink.SCTPCookieReceivedWhileShuttingDown)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCookieReceivedWhileShuttingDown.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPRestartOfAnAssociationWithNewAddresses">
             <summary>
             Restart of an association with new addresses: An INIT was received on
             an existing association. But the INIT added addresses to the
             association that were previously NOT part of the association. The
             new addresses are listed in the error code. This ERROR is normally
             sent as part of an ABORT refusing the INIT (see Section 5.2 of RFC 4960).
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |            Cause Code=11      |         Cause Length=Variable |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                           New Address TLVs                    /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             Note: Each New Address TLV is an exact copy of the TLV that was found
             in the INIT chunk that was new, including the Parameter Type and the
             Parameter Length.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPRestartOfAnAssociationWithNewAddresses.Addresses">
             <summary>
             Gets or sets the ipv4 or host name addresses.
             </summary>
             <value>
             The addresses.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPRestartOfAnAssociationWithNewAddresses.#ctor(FM.IceLink.SCTPTLVParameter[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPRestartOfAnAssociationWithNewAddresses" /> class.
             </summary>
             <param name="addresses">The new addresses.</param>
            </member>
        <member name="M:FM.IceLink.SCTPRestartOfAnAssociationWithNewAddresses.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPRestartOfAnAssociationWithNewAddresses.GetBytes(FM.IceLink.SCTPRestartOfAnAssociationWithNewAddresses)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPRestartOfAnAssociationWithNewAddresses.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPUserInitiatedAbort">
             <summary>
             This error cause MAY be included in ABORT chunks that are sent
             because of an upper-layer request. The upper layer can specify an
             Upper Layer Abort Reason that is transported by SCTP transparently
             and MAY be delivered to the upper-layer protocol at the peer.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |              Cause Code=12    |      Cause Length=Variable    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                  Upper Layer Abort Reason                     /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPUserInitiatedAbort.UpperLayerAbortReason">
             <summary>
             Gets or sets the upper layer abort reason.
             </summary>
             <value>
             The upper layer abort reason.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPUserInitiatedAbort.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPUserInitiatedAbort" /> class.
             </summary>
             <param name="abortReason">The abort reason. Optional.</param>
            </member>
        <member name="M:FM.IceLink.SCTPUserInitiatedAbort.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPUserInitiatedAbort" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPUserInitiatedAbort.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUserInitiatedAbort.GetBytes(FM.IceLink.SCTPUserInitiatedAbort)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUserInitiatedAbort.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPProtocolViolation">
             <summary>
             This error cause MAY be included in ABORT chunks that are sent
             because an SCTP endpoint detects a protocol violation of the peer
             that is not covered by other error causes. An implementation MAY provide additional
             information specifying what kind of protocol violation has been
             detected.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |            Cause Code=13      |       Cause Length=Variable   |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                    Additional Information                     /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPProtocolViolation.AdditionalInfo">
             <summary>
             Gets or sets the additional information.
             </summary>
             <value>
             The additional information.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPProtocolViolation.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPProtocolViolation" /> class.
             </summary>
             <param name="additionalInfo">The additional information.</param>
            </member>
        <member name="M:FM.IceLink.SCTPProtocolViolation.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPProtocolViolation" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPProtocolViolation.GetBytes">
             <summary>
             Gets the byte representation of this error cause.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPProtocolViolation.GetBytes(FM.IceLink.SCTPProtocolViolation)">
             <summary>
             Converts an error cause to a byte array.
             </summary>
             <param name="cause">The error cause.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPProtocolViolation.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPHeartbeatChunk">
             <summary>
             An endpoint should send this chunk to its peer endpoint to probe the
             reachability of a particular destination transport address defined in
             the present association.
             The parameter field contains the Heartbeat Information, which is a
             variable-length opaque data structure understood only by the sender.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Type = 4 |   Chunk Flags |        Heartbeat Length       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /           Heartbeat Information TLV (Variable-Length)         /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPHeartbeatChunk.HeartbeatInfo">
             <summary>
             Gets or sets the heartbeat information (variable length).
             The Sender-Specific Heartbeat Info field should normally include
             information about the sender’s current time when this HEARTBEAT
             chunk is sent and the destination transport address to which this
             HEARTBEAT is sent. This information is simply
             reflected back by the receiver in the HEARTBEAT ACK message.
             Note also that the HEARTBEAT message is both for
             reachability checking and for path verification.
             When a HEARTBEAT chunk is being used for path verification
             purposes, it MUST hold a 64-bit random nonce.
             </summary>
             <value>
             The heartbeat information.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatChunk.#ctor(FM.IceLink.SCTPTLVParameter)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPHeartbeatChunk" /> class.
             </summary>
             <param name="heartbeatInfo">The heartbeat information.</param>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatChunk.GetBytes(FM.IceLink.SCTPHeartbeatChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPHeartbeatAckChunk">
             <summary>
             An endpoint should send this chunk to its peer endpoint as a response
             to a HEARTBEAT chunk (see Section 8.3). A HEARTBEAT ACK is always
             sent to the source IP address of the IP datagram containing the
             HEARTBEAT chunk to which this ack is responding.
             The parameter field contains a variable-length opaque data structure.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Type = 5 |   Chunk Flags |        Heartbeat ACK Length   |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /           Heartbeat Information TLV (Variable-Length)         /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPHeartbeatAckChunk.HeartbeatInfo">
             <summary>
             Gets or sets the heartbeat information (variable length).
             The Sender-Specific Heartbeat Info field should normally include
             information about the sender’s current time when this HEARTBEAT
             chunk is sent and the destination transport address to which this
             HEARTBEAT is sent. This information is simply
             reflected back by the receiver in the HEARTBEAT ACK message.
             Note also that the HEARTBEAT message is both for
             reachability checking and for path verification.
             When a HEARTBEAT chunk is being used for path verification
             purposes, it MUST hold a 64-bit random nonce.
             </summary>
             <value>
             The heartbeat information.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatAckChunk.#ctor(FM.IceLink.SCTPTLVParameter)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPHeartbeatAckChunk" /> class.
             </summary>
             <param name="heartbeatInfo">The heartbeat information.</param>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatAckChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatAckChunk.GetBytes(FM.IceLink.SCTPHeartbeatAckChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatAckChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPInitChunk">
             <summary>
             This chunk is used to initiate an SCTP association between two endpoints.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Type = 1 |   Chunk Flags |       Chunk Length            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                         Initiate Tag                          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |            Advertised Receiver Window Credit (a_rwnd)         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | Number of Outbound Streams    |   Number of Inbound Streams   |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                            Initial TSN                        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /                   Optional/Variable-Length Parameters         /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.InitiateTag">
             <summary>
             The receiver of the INIT (the responding end) records the value of the Initiate Tag parameter.
             This value MUST be placed into the Verification Tag field of every SCTP packet that the receiver of
             the INIT transmits within this association. The Initiate Tag is allowed to have any value except 0.
             If the value of the Initiate Tag in a received INIT chunk is found to be 0, the receiver MUST treat
             it as an error and close the association by transmitting an ABORT.
             </summary>
             <value>
             The initiate tag.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.A_RWND">
             <summary>
             Advertised Receiver Window Credit (a_rwnd): 32 bits (unsigned integer)
             This value represents the dedicated buffer space, in number of bytes, the sender of the INIT has reserved
             in association with this window. During the life of the association, this buffer space SHOULD NOT be lessened
             (i.e., dedicated buffers taken away from this association); however, an endpoint MAY change the value of a_rwnd
             it sends in SACK chunks.
             </summary>
             <value>
             The a_ RWND.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.OS">
             <summary>
             Number of Outbound Streams (OS): 16 bits (unsigned integer)
             Defines the number of outbound streams the sender of this INIT
             chunk wishes to create in this association. The value of 0 MUST
             NOT be used.
             Note: A receiver of an INIT with the OS value set to 0 SHOULD abort the association.
             </summary>
             <value>
             Number of Outbound Streams.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.MIS">
             <summary>
             Number of Inbound Streams (MIS): 16 bits (unsigned integer).
             Defines the maximum number of streams the sender of this INIT chunk allows the peer end to create in this association.
             The value 0 MUST NOT be used. Note: There is no negotiation of the actual number of streams but instead the two endpoints
             will use the min(requested, offered).
             Note: A receiver of an INIT with the MIS value of 0 SHOULD abort the association.
             </summary>
             <value>
             Number of Inbound Streams.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.ITSN">
             <summary>
             Initial TSN (I-TSN): 32 bits (unsigned integer)
             Defines the initial TSN that the sender will use. The valid range is from 0 to 4294967295.
             </summary>
             <value>
             Initial TSN (I-TSN).
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.IPv4Addresses">
             <summary>
             Holds an IPv4 address. Optional
             Combined with the Source Port Number in the SCTP common header,
             the value passed in an IPv4 or IPv6 Address parameter indicates a
             transport address the sender of the INIT will support for the
             association being initiated. That is, during the life time of
             this association, this IP address can appear in the source address
             field of an IP datagram sent from the sender of the INIT, and can
             be used as a destination address of an IP datagram sent from the
             receiver of the INIT.
             More than one IP Address parameter can be included in an INIT
             chunk when the INIT sender is multi-homed. Moreover, a multihomed
             endpoint may have access to different types of network;
             thus, more than one address type can be present in one INIT chunk,
             i.e., IPv4 and IPv6 addresses are allowed in the same INIT chunk.
             If the INIT contains at least one IP Address parameter, then the
             source address of the IP datagram containing the INIT chunk and
             any additional address(es) provided within the INIT can be used as
             destinations by the endpoint receiving the INIT. If the INIT does
             not contain any IP Address parameters, the endpoint receiving the
             INIT MUST use the source address associated with the received IP
             datagram as its sole destination address for the association.
             Note that not using any IP Address parameters in the INIT and INIT
             ACK is an alternative to make an association more likely to work
             across a NAT box.
             </summary>
             <value>
             The IPv4 address parameters.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.SuggestedCookieLifeSpanIncrement">
             <summary>
             Suggested Cookie Life-Span Increment (msec). Optional
             The sender of the INIT shall use this parameter to suggest to the
             receiver of the INIT for a longer life-span of the State Cookie.
             </summary>
             <value>
             Suggested Cookie Life-Span Increment (msec)
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.HostNameAddress">
             <summary>
             The sender of INIT uses this parameter to pass its Host Name (in
             place of its IP addresses) to its peer. The peer is responsible for
             resolving the name. Using this parameter might make it more likely
             for the association to work across a NAT box.
             </summary>
             <value>
             The host name address.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.SupportedAddressTypes">
             <summary>
             Supported Address Types (12).The sender of INIT uses this parameter
             to list all the address typesit can support.
             </summary>
             <value>
             The supported address types.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.AuthenticatedChunksParameters">
             <summary>
             Gets or sets the details of the support for authenticated chunks parameters (as defined in RFC 4895).
             </summary>
             <value>
             The authenticated chunks parameters.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.SCTPPartialReliabilityParameters">
             <summary>
             Gets or sets the details of the support for SCTP partial reliability (as defined in RFC 3758).
             </summary>
             <value>
             <c>true</c> if [SCTP partial reliability is supported]; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.SCTPDynamicAddressReconfigurationParameters">
             <summary>
             Gets or sets the details of the support for SCTP dynamic address reconfiguration (as defined in RFC 5061).
             </summary>
             <value>
             <c>true</c> if [SCTP partial reliability is supported]; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.SupportedExtensionsChunks">
             <summary>
             Gets or sets the supported extensions chunks.  This parameter is used at startup to identify any additional
             extensions that the sender supports.  The sender MUST support both
             the sending and the receiving of any chunk types listed within the
             Supported Extensions Parameter.
             </summary>
             <value>
             The supported extensions chunks.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitChunk.UnrecognizedParametersThatNeedToBeReportedBackToSender">
             <summary>
             Gets or sets the unrecognized parameters.
             </summary>
             <value>
             The unrecognized parameters.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPInitChunk.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPInitChunk" /> class.
             </summary>
             <param name="initiateTag">The initiate tag.</param>
             <param name="a_rwnd">Advertised Receiver Window Credit .</param>
             <param name="os">Number of Outbound Streams.</param>
             <param name="mis">Number of Inbound Streams.</param>
             <param name="itsn">Initial TSN.</param>
            </member>
        <member name="M:FM.IceLink.SCTPInitChunk.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int64,FM.IceLink.SCTPIPv4ChunkParameter[],FM.IceLink.SCTPPartialReliabilitySupportParameters,FM.IceLink.SCTPAuthenticatedChunksParameters,FM.IceLink.SCTPDynamicAddressReconfigurationSupportParameters,FM.IceLink.SCTPCookiePreservativeChunkParameter,FM.IceLink.SCTPHostNameAddressChunkParameter,FM.IceLink.SCTPSupportedAddressTypesChunkParameter)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPInitChunk" /> class.
             </summary>
             <param name="initiateTag">The initiate tag.</param>
             <param name="a_rwnd">Advertised Receiver Window Credit .</param>
             <param name="os">Number of Outbound Streams.</param>
             <param name="mis">Number of Inbound Streams.</param>
             <param name="itsn">Initial TSN.</param>
             <param name="ipv4Addresses">The ipv4 addresses. Optional.</param>
             <param name="partialReliabilityParameters">if set to <c>true</c> [support forward TSN chunks].</param>
             <param name="authenticatedChunksParameters">The authenticated chunks parameters.</param>
             <param name="addressReconfigParameters">The address reconfig parameters.</param>
             <param name="suggestedCookieLifeSpanIncrement">Suggested Cookie Life-Span Increment (msec). Optional.</param>
             <param name="hostNameAddress">The host name address. Optional.</param>
             <param name="supportedAddressTypes">The supported address types. Optional.</param>
            </member>
        <member name="M:FM.IceLink.SCTPInitChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPInitChunk.GetBytes(FM.IceLink.SCTPInitChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPInitChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPInitAckChunk">
             <summary>
             The INIT ACK chunk is used to acknowledge the initiation of an SCTP association.
             The parameter part of INIT ACK is formatted similarly to the INIT chunk.
             It uses two extra variable parameters: The State Cookie and the Unrecognized Parameter
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Type = 1 |   Chunk Flags |       Chunk Length            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                         Initiate Tag                          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |            Advertised Receiver Window Credit (a_rwnd)         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | Number of Outbound Streams    |   Number of Inbound Streams   |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                            Initial TSN                        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /                   Optional/Variable-Length Parameters         /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.InitiateTag">
             <summary>
             The receiver of the INIT ACK records the value of the Initiate Tag
             parameter. This value MUST be placed into the Verification Tag
             field of every SCTP packet that the INIT ACK receiver transmits
             within this association. The Initiate Tag MUST NOT take the value 0.
             If the value of the Initiate Tag in a received INIT ACK chunk is
             found to be 0, the receiver MUST destroy the association
             discarding its SCTPAssociationStateArgs. The receiver MAY send an ABORT for debugging purpose.
             </summary>
             <value>
             The initiate tag.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.A_RWND">
             <summary>
             Advertised Receiver Window Credit (a_rwnd): 32 bits (unsigned integer)
             This value represents the dedicated buffer space, in number of bytes, the sender of the INIT_ACK has reserved
             in association with this window. During the life of the association, this buffer space SHOULD NOT be lessened
             (i.e., dedicated buffers taken away from this association); however, an endpoint MAY change the value of a_rwnd
             it sends in SACK chunks.
             </summary>
             <value>
             The a_ RWND.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.OS">
             <summary>
             Number of Outbound Streams (OS): 16 bits (unsigned integer)
             Defines the number of outbound streams the sender of this INIT
             chunk wishes to create in this association. The value of 0 MUST
             NOT be used.
             Note: A receiver of an INIT with the OS value set to 0 SHOULD abort the association.
             </summary>
             <value>
             Number of Outbound Streams.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.MIS">
             <summary>
             Number of Inbound Streams (MIS): 16 bits (unsigned integer).
             Defines the maximum number of streams the sender of this INIT chunk allows the peer end to create in this association.
             The value 0 MUST NOT be used. Note: There is no negotiation of the actual number of streams but instead the two endpoints
             will use the min(requested, offered).
             Note: A receiver of an INIT with the MIS value of 0 SHOULD abort the association.
             </summary>
             <value>
             Number of Inbound Streams.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.ITSN">
             <summary>
             Initial TSN (I-TSN): 32 bits (unsigned integer)
             Defines the initial TSN that the sender will use. The valid range is from 0 to 4294967295.
             </summary>
             <value>
             Initial TSN (I-TSN).
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.IPv4Addresses">
             <summary>
             Holds an IPv4 address. Optional
             Combined with the Source Port Number in the SCTP common header,
             the value passed in an IPv4 or IPv6 Address parameter indicates a
             transport address the sender of the INIT will support for the
             association being initiated. That is, during the life time of
             this association, this IP address can appear in the source address
             field of an IP datagram sent from the sender of the INIT, and can
             be used as a destination address of an IP datagram sent from the
             receiver of the INIT.
             More than one IP Address parameter can be included in an INIT
             chunk when the INIT sender is multi-homed. Moreover, a multihomed
             endpoint may have access to different types of network;
             thus, more than one address type can be present in one INIT chunk,
             i.e., IPv4 and IPv6 addresses are allowed in the same INIT chunk.
             If the INIT contains at least one IP Address parameter, then the
             source address of the IP datagram containing the INIT chunk and
             any additional address(es) provided within the INIT can be used as
             destinations by the endpoint receiving the INIT. If the INIT does
             not contain any IP Address parameters, the endpoint receiving the
             INIT MUST use the source address associated with the received IP
             datagram as its sole destination address for the association.
             Note that not using any IP Address parameters in the INIT and INIT
             ACK is an alternative to make an association more likely to work
             across a NAT box.
             </summary>
             <value>
             The IPv4 address parameters.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.HostNameAddress">
             <summary>
             The sender of INIT uses this parameter to pass its Host Name (in
             place of its IP addresses) to its peer. The peer is responsible for
             resolving the name. Using this parameter might make it more likely
             for the association to work across a NAT box.
             </summary>
             <value>
             The host name address.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.StateCookieChunk">
             <summary>
             Gets or sets the state cookie. State Cookie Parameter Type Value: 7
             Parameter Length: Variable size, depending on size of Cookie.
             Parameter Value:
             This parameter value MUST contain all the necessary state and
             parameter information required for the sender of this INIT ACK to
             create the association, along with a Message Authentication Code(MAC).
             </summary>
             <value>
             The state cookie.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.UnrecognizedParameter">
             <summary>
             Gets or sets the unrecognized parameter.
             Unrecognized Parameter: Parameter Type Value: 8
             Parameter Length: Variable size. Parameter Value:
             This parameter is returned to the originator of the INIT chunk
             when the INIT contains an unrecognized parameter that has a value
             that indicates it should be reported to the sender. This
             parameter value field will contain unrecognized parameters copied
             from the INIT chunk complete with Parameter Type, Length, and
             Value fields.
             </summary>
             <value>
             The unrecognized parameter.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.AuthenticatedChunksParameters">
             <summary>
             Gets or sets the details of the support for authenticated chunks parameters (as defined in RFC 4895).
             </summary>
             <value>
             The authenticated chunks parameters.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.SCTPPartialReliabilityParameters">
             <summary>
             Gets or sets the details of the support for SCTP partial reliability (as defined in RFC 3758).
             </summary>
             <value>
             <c>true</c> if [SCTP partial reliability is supported]; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.SCTPDynamicAddressReconfigurationParameters">
             <summary>
             Gets or sets the details of the support for SCTP dynamic address reconfiguration (as defined in RFC 5061).
             </summary>
             <value>
             <c>true</c> if [SCTP partial reliability is supported]; otherwise, <c>false</c>.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.SupportedExtensionsChunks">
             <summary>
             Gets or sets the supported extensions chunks.  This parameter is used at startup to identify any additional
             extensions that the sender supports.  The sender MUST support both
             the sending and the receiving of any chunk types listed within the
             Supported Extensions Parameter.
             </summary>
             <value>
             The supported extensions chunks.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPInitAckChunk.UnrecognizedParametersThatNeedToBeReportedBackToSender">
             <summary>
             Gets or sets the unrecognized parameters.
             </summary>
             <value>
             The unrecognized parameters.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPInitAckChunk.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int64,FM.IceLink.SCTPStateCookieChunkParameter,FM.IceLink.SCTPIPv4ChunkParameter[],FM.IceLink.SCTPHostNameAddressChunkParameter,FM.IceLink.SCTPUnrecognizedParameterChunkParameter)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPInitAckChunk" /> class.
             </summary>
             <param name="initiateTag">The initiate tag.</param>
             <param name="a_rnwd">Advertised Receiver Window Credit .</param>
             <param name="os">Number of Outbound Streams.</param>
             <param name="mis">Number of Inbound Streams.</param>
             <param name="itsn">Initial TSN.</param>
             <param name="stateCookie">The state cookie.</param>
             <param name="ipv4Addresses">The ipv4 addresses. Optional.</param>
             <param name="hostNameAddress">The host name address. Optional.</param>
             <param name="unrecognizedParameter">The unrecognized parameter. Optional</param>
            </member>
        <member name="M:FM.IceLink.SCTPInitAckChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPInitAckChunk.GetBytes(FM.IceLink.SCTPInitAckChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPInitAckChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPPadChunk">
             <summary>
             This chunk is defined in RFC 4820 and is used to pad an SCTP packet.
             A PAD chunk can be used to enlarge the packet by 4 to 65536 bytes
             in steps of 4 bytes.  An SCTP packet MAY contain multiple PAD chunks.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | Type = 0x84   |   Flags=0     |             Length            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                                                               |
             \                         Padding Data                          /
             /                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPPadChunk._length">
             <summary>
             The _length
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPPadChunk.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPPadChunk" /> class.
             </summary>
             <param name="length">Required size of padding chunk. Valid range: 4 to 65536 bytes in
             increments of 4 bytes.</param>
             <exception cref="T:System.Exception">Valid padding chunk size is between 4 and 65536 bytes</exception>
            </member>
        <member name="M:FM.IceLink.SCTPPadChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPPadChunk.GetBytes(FM.IceLink.SCTPPadChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPPadChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a packet.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPSackChunk">
             <summary>
             This chunk is sent to the peer endpoint to acknowledge received DATA
             chunks and to inform the peer endpoint of gaps in the received
             subsequences of DATA chunks as represented by their TSNs.
             The SACK MUST contain the Cumulative TSN Ack, Advertised Receiver
             Window Credit (a_rwnd), Number of Gap Ack Blocks, and Number of
             Duplicate TSNs fields.
             By definition, the value of the Cumulative TSN Ack parameter is the
             last TSN received before a break in the sequence of received TSNs
             occurs; the next TSN value following this one has not yet been
             received at the endpoint sending the SACK. This parameter therefore
             acknowledges receipt of all TSNs less than or equal to its value.
             The SACK also contains zero or more Gap Ack Blocks. Each Gap Ack
             Block acknowledges a subsequence of TSNs received following a break
             in the sequence of received TSNs. By definition, all TSNs
             acknowledged by Gap Ack Blocks are greater than the value of the
             Cumulative TSN Ack.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Type = 3 |   Chunk Flags |         Chunk Length          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                      Cumulative TSN Ack                       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |              Advertised Receiver Window Credit (a_rwnd)       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |  Number of Gap Ack Blocks = N |  Number of Duplicate TSNs = X |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |        Gap Ack Block #1 Start |  Gap Ack Block #1 End         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                                                               /
             \                              ...                              \
             /                                                               /
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |        Gap Ack Block #N Start |          Gap Ack Block #N End |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                      Duplicate TSN 1                          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                                                               /
             \                              ...                              \
             /                                                               /
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                          Duplicate TSN X                      |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPSackChunk.CumulativeTSNACK">
             <summary>
             Cumulative TSN Ack: 32 bits (unsigned integer)
             This parameter contains the TSN of the last DATA chunk received in
             sequence before a gap. In the case where no DATA chunk has been
             received, this value is set to the peer’s Initial TSN minus one.
             </summary>
             <value>
             The cumulative tsnack.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPSackChunk.A_RWND">
             <summary>
             Advertised Receiver Window Credit (a_rwnd): 32 bits (unsigned integer)
             This field indicates the updated receive buffer space in bytes of
             the sender of this SACK
             </summary>
             <value>
             The a_ RWND.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPSackChunk.NumberOfGapAckBlocks">
             <summary>
             Number of Gap Ack Blocks: 16 bits (unsigned integer)
             Indicates the number of Gap Ack Blocks included in this SACK.
             </summary>
             <value>
             Number of Gap Ack Blocks.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPSackChunk.NumberOfDuplicateTSNs">
             <summary>
             Number of Duplicate TSNs: 16 bit
             Indicates the number of Gap Ack Blocks included in this SACK.
             This field contains the number of duplicate TSNs the endpoint has received.
             Each duplicate TSN is listed following the Gap Ack Block list.
             </summary>
             <value>
             Number of Duplicate TSNs:.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPSackChunk.GapAckBlocks">
             <summary>
             Gets or sets the Gap Ack Block collection.
             All DATA chunks with TSNs greater than or equal to (Cumulative TSN Ack + Gap Ack Block
             Start) and less than or equal to (Cumulative TSN Ack + Gap Ack
             Block End) of each Gap Ack Block are assumed to have been received correctly.
             </summary>
             <value>
             The gap ack block start end.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPSackChunk.DuplicateTSNs">
             <summary>
             Gets or sets the duplicate TSNs.
             Duplicate TSN: 32 bits (unsigned integer)
             Indicates the number of times a TSN was received in duplicate
             since the last SACK was sent. Every time a receiver gets a
             duplicate TSN (before sending the SACK), it adds it to the list of
             duplicates. The duplicate count is reinitialized to zero after
             sending each SACK. For example, if a receiver were to get the TSN 19 three times it
             would list 19 twice in the outbound SACK. After sending the SACK, if
             it received yet one more TSN 19 it would list 19 as a duplicate once
             in the next outgoing SACK.
             </summary>
             <value>
             The duplicate TSNs.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPSackChunk.#ctor(System.Int64,System.Int64,FM.IceLink.SCTPGapAckBlock[],System.Int64[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPSackChunk" /> class.
             </summary>
             <param name="cumulativeTSNACK">The cumulative TSN ACK.</param>
             <param name="a_rnwd">Advertised Receiver Window Credit.</param>
             <param name="gapAckBlocks">Gap ACK Blocks (containing both start and end).</param>
             <param name="duplicateTSNs">Duplicate TSNs.</param>
            </member>
        <member name="M:FM.IceLink.SCTPSackChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPSackChunk.GetBytes(System.Int32)">
             <summary>
             Converts this instance to a byte array subject to a specified limit.
             </summary>
             <param name="sizeLimit">Resulting chunk size limit in bytes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPSackChunk.GetBytes(FM.IceLink.SCTPSackChunk,System.Int32)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <param name="sizeLimit">Resulting chunk size limit in bytes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPSackChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPGapAckBlock">
             <summary>
             Represents a Gap Ack Block (with a GAP ACK Block start and end)
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPGapAckBlock.GapAckBlockStart">
             <summary>
             Gets or sets the gap ack block start.
             Gap Ack Block Start: 16 bits (unsigned integer)
             Indicates the Start offset TSN for this Gap Ack Block. To
             calculate the actual TSN number the Cumulative TSN Ack is added to
             this offset number. This calculated TSN identifies the first TSN
             in this Gap Ack Block that has been received.
             </summary>
             <value>
             The gap ack block start.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPGapAckBlock.GapAckBlockEnd">
             <summary>
             Gets or sets the gap ack block end.
             Gap Ack Block End: 16 bits (unsigned integer)
             Indicates the End offset TSN for this Gap Ack Block. To calculate
             the actual TSN number, the Cumulative TSN Ack is added to this
             offset number. This calculated TSN identifies the TSN of the last
             DATA chunk received in this Gap Ack Block.
             </summary>
             <value>
             The gap ack block end.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPGapAckBlock.#ctor(System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPGapAckBlock" /> class.
             This consists of two Properties: start and end of ACK block.
             All DATA chunks with TSNs greater than or equal to (Cumulative TSN Ack + Gap Ack Block
             Start) and less than or equal to (Cumulative TSN Ack + Gap Ack Block End) of each
             Gap Ack Block are assumed to have been received correctly.
             </summary>
             <param name="start">The Gap Ack Block Start.</param>
             <param name="end">The Gap Ack Block End.</param>
            </member>
        <member name="M:FM.IceLink.SCTPGapAckBlock.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPGapAckBlock.GetBytes(FM.IceLink.SCTPGapAckBlock)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPGapAckBlock.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The start index.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPChunk">
             <summary>
             Units that can be bundled into a packet.
             Multiple chunks can be bundled into one SCTP packet up to the MTU
             size, except for the INIT, INIT_ACK, and SHUTDOWN_COMPLETE chunks.
             These chunks MUST NOT be bundled with any other chunk in a packet.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |    Chunk Type |  Chunk Flags  |       Chunk Length            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /                       Chunk Value                             /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPChunk.chunkType">
             <summary>
             The chunk type
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunk.Type">
             <summary>
             Gets or sets the type of the chunk.
             </summary>
             <value>
             This field identifies the type of information contained in the Chunk Value field.
             It takes a value from 0 to 254. The value of 255 is reserved for future use as an extension field.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPChunk.GetBytes">
             <summary>
             Gets the bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPChunk.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The start index.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPGenericChunk">
             <summary>
             Stores all the SCTP chunk information. Mostly used when an unrecognized chunk needs to be transmitted back to the sender.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPGenericChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPGenericChunk.GetBytes(FM.IceLink.SCTPGenericChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPControlChunk">
             <summary>
             SCTP Control Chunk properties and methods
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPControlChunk.TimeoutTimerThread">
             <summary>
             Gets or sets the timeout timer thread for this chunk.
             </summary>
             <value>
             The timeout timer thread.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPControlChunk.CanBundleWithDataAndSACKChunks">
             <summary>
             Indicates whether this control chunk can be bundled with DATA chunks in an SCTP packet
             </summary>
            </member>
        <member name="T:FM.IceLink.SCTPTLVParameter">
             <summary>
             Variable-Length Generic Parameter Type
             Chunk values of SCTP control chunks consist of a chunk-type-specific
             header of required fields, followed by zero or more parameters. The
             optional and variable-length parameters contained in a chunk are
             defined in a Type-Length-Value format as shown below.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Parameter Type           |           Parameter Length    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /                          Parameter Value                      /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPTLVParameter.chunkParameterType">
             <summary>
             The chunk parameter type
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPTLVParameter.Type">
             <summary>
             Gets the type.
             </summary>
             <value>
             This is a 16-bit identifier of the type of parameter.
             Values other than those defined in specific SCTP chunk descriptions are reserved for use by IETF.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPTLVParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPTLVParameter.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Parses the bytes.
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The start index.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPTLVParameter.IsInManualListOfUnrecognizedChunkParameterThatMustBeReported(System.Int32)">
             <summary>
             Determines whether the parameter received as a part of the chunk should be treated as unrecognized (even if the implementation can parse it).
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPHeartbeatInfoChunkParameter">
             <summary>
             Heartbeat Info Parameter (1)
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |    Heartbeat Info Type=1      |         HB Info Length        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                  Sender-Specific Heartbeat Info               /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             Refer to RFC 4960 3.3.5 for details
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPHeartbeatInfoChunkParameter.SenderSpecificHeartbeatInfo">
             <summary>
             Gets or sets the sender specific heartbeat information.
             </summary>
             <value>
             The sender specific heartbeat information.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatInfoChunkParameter.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPHeartbeatInfoChunkParameter" /> class.
             </summary>
             <param name="senderSpecificHeartbeatInfo">The sender specific heartbeat information.</param>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatInfoChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatInfoChunkParameter.GetBytes(FM.IceLink.SCTPHeartbeatInfoChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPHeartbeatInfoChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPIPv4ChunkParameter">
             <summary>
             IPv4 Address Parameter (5)
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |           Type = 5            |           Length = 8          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           IPv4 Address                        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             Refer to RFC 4960 3.3.2.1 for details
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPIPv4ChunkParameter.IPv4Address">
             <summary>
             Gets or sets the IPv4 address (32 bits unsigned integer)
             </summary>
             <value>
             The IPv4 address.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPIPv4ChunkParameter.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPIPv4ChunkParameter" /> class.
             </summary>
             <param name="ipv4Address">The ipv4 address.</param>
            </member>
        <member name="M:FM.IceLink.SCTPIPv4ChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPIPv4ChunkParameter.GetBytes(FM.IceLink.SCTPIPv4ChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPIPv4ChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPRandomChunkParameter">
             <summary>
             Random Parameter (32770) defined in RFC 4895
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |     Parameter Type = 0x8002   |       Parameter Length        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                                                               |
             \                          Random Number                        /
             /                               +-------------------------------\
             |                               |           Padding             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPRandomChunkParameter.RandomNumber">
             <summary>
             Gets or sets the random number.
             </summary>
             <value>
             The random number.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPRandomChunkParameter.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPPADChunkParameter" /> class.
             </summary>
             <param name="randomNumber">The random number.</param>
            </member>
        <member name="M:FM.IceLink.SCTPRandomChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPRandomChunkParameter.GetBytes(FM.IceLink.SCTPRandomChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPRandomChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPRequestedHMACAlgorithmChunkParameter">
             <summary>
             Requested HMAC Algorithm Parameter (HMAC-ALGO) (32772) defined in RFC 4895
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |     Parameter Type = 0x8004   |       Parameter Length        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |          HMAC Identifier 1    |      HMAC Identifier 2        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                                                               /
             \                              ...                              \
             /                                                               /
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |        HMAC Identifier n      |           Padding             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPRequestedHMACAlgorithmChunkParameter.HMACIdentifiers">
             <summary>
             Gets or sets the HMAC identifiers.
             </summary>
             <value>
             The hmac identifiers.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPRequestedHMACAlgorithmChunkParameter.#ctor(System.Int32[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPPADChunkParameter" /> class.
             </summary>
             <param name="hmacIdentifiers">The hmac identifiers.</param>
            </member>
        <member name="M:FM.IceLink.SCTPRequestedHMACAlgorithmChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPRequestedHMACAlgorithmChunkParameter.GetBytes(FM.IceLink.SCTPRequestedHMACAlgorithmChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPRequestedHMACAlgorithmChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPChunkListChunkParameter">
             <summary>
             Chunk List Parameter (32772) defined in RFC 4895
             This parameter is used to specify which chunk types are required to
             be authenticated before being sent by the peer.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |     Parameter Type = 0x8003   |       Parameter Length        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | Chunk Type 1  | Chunk Type 2  | Chunk Type 3  | Chunk Type 4  |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                                                               /
             \                              ...                              \
             /                                                               /
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | Chunk Type n  |                   Padding                     |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPChunkListChunkParameter.ChunkList">
             <summary>
             Gets or sets the chunk list.
             </summary>
             <value>
             The hmac identifiers.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPChunkListChunkParameter.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPChunkListChunkParameter" /> class.
             </summary>
             <param name="chunkList">The chunk list.</param>
            </member>
        <member name="M:FM.IceLink.SCTPChunkListChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPChunkListChunkParameter.GetBytes(FM.IceLink.SCTPChunkListChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPChunkListChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPPADChunkParameter">
             <summary>
             PAD Parameter (32773) defined in RFC 4820
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |     Parameter Type = 0x8005   |       Parameter Length        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                                                               /
             \                          Padding Data                         \
             /                                                               /
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPPADChunkParameter._length">
             <summary>
             The _length
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPPADChunkParameter.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPPADChunkParameter" /> class.
             </summary>
             <param name="length">Required size of padding chunk. Valid range: 4 to 65536 bytes in
             increments of 4 bytes.</param>
             <exception cref="T:System.Exception">Valid padding parameter size is between 4 and 65536 bytes</exception>
            </member>
        <member name="M:FM.IceLink.SCTPPADChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPPADChunkParameter.GetBytes(FM.IceLink.SCTPPADChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPPADChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPForwardTSNSupportedChunkParameter">
             <summary>
             Forward-TSN-Supported Parameter For INIT and INIT ACK (49152) defined in RFC 3758
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |     Parameter Type = 0xC000   |       Parameter Length = 4    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPForwardTSNSupportedChunkParameter._length">
             <summary>
             The _length
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPForwardTSNSupportedChunkParameter.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPForwardTSNSupportedChunkParameter" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPForwardTSNSupportedChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPForwardTSNSupportedChunkParameter.GetBytes(FM.IceLink.SCTPForwardTSNSupportedChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPForwardTSNSupportedChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPSupportedExtensionsChunkParameter">
             <summary>
             Supported Extensions Parameter (32776) defined in RFC 5061. May only appear in INIT or INIT_ACK
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |     Parameter Type = 0x8008   |      Parameter Length         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | CHUNK TYPE 1  |  CHUNK TYPE 2 |  CHUNK TYPE 3 |  CHUNK TYPE 4 |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                             ....                              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | CHUNK TYPE N  |      PAD      |      PAD      |      PAD      |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPSupportedExtensionsChunkParameter.SupportedChunkExtensions">
             <summary>
             Gets or sets the supported chunk extensions.
             </summary>
             <value>
             The supported chunk extensions.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPSupportedExtensionsChunkParameter.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPSupportedExtensionsChunkParameter" /> class.
             </summary>
             <param name="extensions">The extensions.</param>
            </member>
        <member name="M:FM.IceLink.SCTPSupportedExtensionsChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPSupportedExtensionsChunkParameter.GetBytes(FM.IceLink.SCTPSupportedExtensionsChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPSupportedExtensionsChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPCookiePreservativeChunkParameter">
             <summary>
             Cookie Preservative (9)
             The sender of the INIT shall use this parameter to suggest to the
             receiver of the INIT for a longer life-span of the State Cookie.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |               Type = 9        |            Length = 8         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |        Suggested Cookie Life-Span Increment (msec.)           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             Refer to RFC 4960 3.3.2.1 for details
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPCookiePreservativeChunkParameter.SuggestedCookieLifeSpanIncrement">
             <summary>
             Gets or sets the Suggested Cookie Life-Span Increment (32 bits unsigned integer)
             </summary>
             <value>
             Suggested Cookie Life-Span Increment.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPCookiePreservativeChunkParameter.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPCookiePreservativeChunkParameter" /> class.
             </summary>
             <param name="cookieIncrement">The cookie increment (milliseconds).</param>
            </member>
        <member name="M:FM.IceLink.SCTPCookiePreservativeChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCookiePreservativeChunkParameter.GetBytes(FM.IceLink.SCTPCookiePreservativeChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCookiePreservativeChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPHostNameAddressChunkParameter">
             <summary>
             Host Name Address (11)
             The sender of INIT uses this parameter to pass its Host Name (in
             place of its IP addresses) to its peer. The peer is responsible for
             resolving the name. Using this parameter might make it more likely
             for the association to work across a NAT box.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |           Type = 11           |           Length              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                           Host Name                           /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             Refer to RFC 4960 3.3.2.1 for details
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPHostNameAddressChunkParameter.HostName">
             <summary>
             Gets or sets the SHost Name: variable length
             This field contains a host name in "host name syntax" per RFC 1123
             </summary>
             <value>
             Host Name.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPHostNameAddressChunkParameter.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPHostNameAddressChunkParameter" /> class.
             </summary>
             <param name="hostName">The host name.</param>
            </member>
        <member name="M:FM.IceLink.SCTPHostNameAddressChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPHostNameAddressChunkParameter.GetBytes(FM.IceLink.SCTPHostNameAddressChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPHostNameAddressChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPSupportedAddressTypesChunkParameter">
             <summary>
             Supported Address Types (12)
             The sender of INIT uses this parameter to list all the address types
             it can support.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |        Type = 12              |           Length              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |               Address Type #1 |       Address Type #2         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                            ......                             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+
             Refer to RFC 4960 3.3.2.1 for details
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPSupportedAddressTypesChunkParameter.AddressTypes">
             <summary>
             This is filled with the type value of the corresponding address
             TLV (e.g., IPv4 = 5, IPv6 = 6, Host name = 11).
             </summary>
             <value>
             Address Types.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPSupportedAddressTypesChunkParameter.#ctor(System.Int32[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPSupportedAddressTypesChunkParameter" /> class.
             </summary>
             <param name="addressTypes">Suppoerted address types.</param>
            </member>
        <member name="M:FM.IceLink.SCTPSupportedAddressTypesChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPSupportedAddressTypesChunkParameter.GetBytes(FM.IceLink.SCTPSupportedAddressTypesChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPSupportedAddressTypesChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPStateCookieChunkParameter">
             <summary>
             State Cookie (7)
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |         Type = 7              |           Length              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                           Parameter                           /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+
             Refer to RFC 4960 5.1.3 for details
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPStateCookieChunkParameter.StateCookie">
             <summary>
             This parameter value MUST contain all the necessary state and
             parameter information required for the sender of this INIT ACK to
             create the association, along with a Message Authentication Code (MAC).
             </summary>
             <value>
             SCTP State Cookie.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPStateCookieChunkParameter.StateCookieBytes">
             <summary>
             This parameter holds SCTP State Cookie bytes received in INIT_ACK.
             </summary>
             <value>
             SCTP State Cookie.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookieChunkParameter.#ctor(FM.IceLink.SCTPStateCookie)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPStateCookieChunkParameter" /> class.
             </summary>
             <param name="stateCookie">The state cookie.</param>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookieChunkParameter.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPStateCookieChunkParameter" /> class.
             </summary>
             <param name="stateCookieBytes">The state cookie bytes.</param>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookieChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookieChunkParameter.GetBytes(FM.IceLink.SCTPStateCookieChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookieChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookieChunkParameter.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The start index.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPGenericChunkParameter">
             <summary>
             Generic Chunk parameter to store unrecognized and unsupported parameters
             Not specified in SCTP RFCs
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Parameter Type           |           Parameter Length    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             \                                                               \
             /                          Parameter Value                      /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             Parameter Length does not include padding, while parameter value does
             include padding.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPGenericChunkParameter.MeaningfulData">
             <summary>
             Gets or sets the meaningful data  of this chunk parameter (excluding padding).
             </summary>
             <value>
             The supported chunk extensions.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPGenericChunkParameter.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPGenericChunkParameter" /> class.
             </summary>
             <param name="bytes">The bytes.</param>
            </member>
        <member name="M:FM.IceLink.SCTPGenericChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPGenericChunkParameter.GetBytes(FM.IceLink.SCTPGenericChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPGenericChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPGenericChunkParameter.ToGenericParameter(FM.IceLink.SCTPTLVParameter)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPUnrecognizedParameterChunkParameter">
             <summary>
             Unrecognized Parameter (8)
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |        Type = 8              |           Length               |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                           Unrecognized Parameters             /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+
             Refer to RFC 4960 3.3.2.1 for details
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPUnrecognizedParameterChunkParameter.UnrecognizedParameters">
             <summary>
             This parameter value MUST contain all the necessary state and
             parameter information required for the sender of this INIT ACK to
             create the association, along with a Message Authentication Code (MAC).
             </summary>
             <value>
             Unrecognized Parameters.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedParameterChunkParameter.#ctor(FM.IceLink.SCTPTLVParameter[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPUnrecognizedParameterChunkParameter" /> class.
             </summary>
             <param name="chunkParameter">The chunk parameter.</param>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedParameterChunkParameter.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedParameterChunkParameter.GetBytes(FM.IceLink.SCTPUnrecognizedParameterChunkParameter)">
             <summary>
             Converts a parameter to a byte array.
             </summary>
             <param name="parameter">The parameter.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPUnrecognizedParameterChunkParameter.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a parameter.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPShutdownChunk">
             <summary>
             An endpoint in an association MUST use this chunk to initiate a
             graceful close of the association with its peer. This chunk has the
             following format.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Type = 7 |   Chunk Flags |       Length = 8              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                       Cumulative TSN Ack                      |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPShutdownChunk.CumulativeTSNAck">
             <summary>
             This parameter contains the TSN of the last chunk received in sequence before any gaps.
             Note: Since the SHUTDOWN message does not contain Gap Ack Blocks,
             it cannot be used to acknowledge TSNs received out of order. In a
             SACK, lack of Gap Ack Blocks that were previously included
             indicates that the data receiver reneged on the associated DATA
             chunks. Since SHUTDOWN does not contain Gap Ack Blocks, the
             receiver of the SHUTDOWN shouldn’t interpret the lack of a Gap Ack
             Block as a renege.
             </summary>
             <value>
             The cumulative TSN ack.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownChunk.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPShutdownChunk" /> class.
             </summary>
             <param name="cumulativeTSNAck">The cumulative TSN ack.</param>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownChunk.GetBytes(FM.IceLink.SCTPShutdownChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a packet.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPShutdownAckChunk">
             <summary>
             This chunk MUST be used to acknowledge the receipt of the SHUTDOWN
             chunk at the completion of the shutdown process.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Type = 8 |   Chunk Flags |         Length = 4            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownAckChunk.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPShutdownAckChunk" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownAckChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownAckChunk.GetBytes(FM.IceLink.SCTPShutdownAckChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownAckChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a packet.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPShutdownCompleteChunk">
             <summary>
             This chunk MUST be used to acknowledge the receipt of the SHUTDOWN
             chunk at the completion of the shutdown process.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |      Type = 8 |Reserved     |T|         Length = 4            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPShutdownCompleteChunk.VerificationTagReflected">
             <summary>
             Indicates whether Verification Tag is reflected (same aS received).
             </summary>
             <value>
             <c>true</c> if the verification tag is reflected (returned same as received);
             <c>false</c> if the sender filled in the verification tag expected by the peer
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownCompleteChunk.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPShutdownCompleteChunk" /> class.
             </summary>
             <param name="verificationTagReflected"><c>true</c> if the verification tag is reflected (returned same as received);
             <c>false</c> if the sender filled in the verification tag expected by the peer.</param>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownCompleteChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownCompleteChunk.GetBytes(FM.IceLink.SCTPShutdownCompleteChunk)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="chunk">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPShutdownCompleteChunk.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a packet.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPCommonHeader">
             <summary>
             SCTP Common Header Field Descriptions
             SCTP Common Header Format
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | Source Port Number            |     Destination Port Number   |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                     Verification Tag                          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                            Checksum                           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPCommonHeader.SourcePortNumber">
             <summary>
             Gets or sets the source port number.
             </summary>
             <value>
             This is the SCTP sender's port number. It can be used by the
             receiver in combination with the source IP address, the SCTP
             destination port, and possibly the destination IP address to
             identify the association to which this packet belongs. The port
             number 0 MUST NOT be used.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPCommonHeader.DestinationPortNumber">
             <summary>
             Gets or sets the destination port number.
             </summary>
             <value>
             This is the SCTP port number to which this packet is destined.
             The receiving host will use this port number to de-multiplex the
             SCTP packet to the correct receiving endpoint/application. The
             port number 0 MUST NOT be used.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPCommonHeader.VerificationTag">
             <summary>
             Gets or sets the verification tag
             </summary>
             <value>
             The receiver of this packet uses the Verification Tag to validate
             the sender of this SCTP packet. On transmit, the value of this
             Verification Tag MUST be set to the value of the Initiate Tag
             received from the peer endpoint during the association
             initialization, with the following exceptions:
             - A packet containing an INIT chunk MUST have a zero Verification
             Tag.
             - A packet containing a SHUTDOWN COMPLETE chunk with the T bit
             set MUST have the Verification Tag copied from the packet with
             the SHUTDOWN ACK chunk.
             - A packet containing an ABORT chunk may have the verification
             tag copied from the packet that caused the ABORT to be sent.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPCommonHeader.Checksum">
             <summary>
             Gets or sets checksum
             </summary>
             <value>
             This field contains the checksum of this SCTP packet.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPCommonHeader.#ctor(System.Int32,System.Int32,System.Int64,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPCommonHeader" /> class.
             </summary>
             <param name="sourcePort">The source port.</param>
             <param name="destionationPort">The destionation port.</param>
             <param name="vTag">The verification tag.</param>
             <param name="checksum">The checksum.</param>
            </member>
        <member name="M:FM.IceLink.SCTPCommonHeader.#ctor(System.Int32,System.Int32,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPCommonHeader" /> class.
             This constructor sets the checksum value to 0.
             </summary>
             <param name="sourcePort">The source port.</param>
             <param name="destionationPort">The destionation port.</param>
             <param name="vTag">The verification tag.</param>
            </member>
        <member name="M:FM.IceLink.SCTPCommonHeader.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCommonHeader.GetBytes(FM.IceLink.SCTPCommonHeader)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="header">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPCommonHeader.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Converts a byte array to a packet.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="offsetPlus">The offset plus.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPDataQueue">
             <summary>
             
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPDataQueue.AllAckedUpTo">
             <summary>
             Gets or sets the TSN such that all the TSNs in the queue prior to and including this value have been ACKed
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPDataQueue.NotAckedPast">
             <summary>
             Gets or sets the TSN such that all the TSNs in the queue after and including this value have not been ACKed
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPDataQueue._TsnDATADictionary">
             <summary>
             Data chunks
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.GetFirstUnACKed">
             <summary>
             Gets the first unacknowledged chunk in queue.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.GetNextChunk(System.Int64)">
             <summary>
             Gets the chunk with the TSN next after the given TSN. If none is found, null is returned.
             </summary>
             <param name="tsn">The TSN.</param>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.GetPreviousChunk(System.Int64)">
             <summary>
             Gets the chunk with the TSN just prior to the given TSN. If none is found, null is returned.
             </summary>
             <param name="tsn">The TSN.</param>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.Purge(System.Int64)">
             <summary>
             Removes all the data chunks up to and including the give TSN from the queue.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.RemoveAll">
             <summary>
             Removes chunks from the queue.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPDataQueue.EarliestTSN">
             <summary>
             Gets the earliest TSN in the data queue.
             </summary>
             <value>
             The earliest TSN.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPDataQueue.TSNs">
             <summary>
             Gets a copy of TSN values of DATA chunks in queue.
             </summary>
             <value>
             The TSN values in queue.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPDataQueue" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.Add(FM.IceLink.SCTPDataChunk)">
             <summary>
             Adds the specified DATA chunk.
             </summary>
             <param name="dataChunk">The data chunk.</param>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.Remove(System.Int64)">
             <summary>
             Removes the data chunk with the specified TSN.
             </summary>
             <param name="tsn">The TSN.</param>
             <returns>If the entry was successfully removed</returns>
            </member>
        <member name="P:FM.IceLink.SCTPDataQueue.Count">
             <summary>
             Gets the number of entries in this queue.
             </summary>
             <value>
             The count.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.GetChunk(System.Int64)">
             <summary>
             Returns DATA chunk from the quue with the given tsn
             </summary>
             <param name="tsn">The TSN.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPDataQueue.ChunkExists(System.Int64)">
             <summary>
             Returns value indicating if chunk with the given value exists in the queue
             </summary>
             <param name="tsn">The TSN value to test.</param>
             <returns>Value indicating whether the chunk with given value exists</returns>
            </member>
        <member name="T:FM.IceLink.SCTPMessage">
             <summary>
             An SCTP message.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPMessage.Payload">
             <summary>
             Gets or sets the data payload.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPMessage.PayloadType">
             <summary>
             Gets or sets the type of the payload.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPMessage.Unordered">
             <summary>
             Gets or sets a value indicating whether out-of-order delivery is acceptable.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPMessage.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPMessage" /> class.
             </summary>
             <param name="payload">The data payload.</param>
            </member>
        <member name="T:FM.IceLink.SCTPPacket">
             <summary>
             An SCTP packet is composed of a common header and chunks. A chunk
             contains either control information or user data.
             The SCTP packet format is shown below:
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                       Common Header                           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                       Chunk #1                                |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           ...                                 |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                       Chunk #n                                |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             Multiple chunks can be bundled into one SCTP packet up to the MTU
             size, except for the INIT, INIT ACK, and SHUTDOWN COMPLETE chunks.
             These chunks MUST NOT be bundled with any other chunk in a packet.
             If a user data message doesn’t fit into one SCTP packet it can be
             fragmented into multiple chunks.
             All integer fields in an SCTP packet MUST be transmitted in network
             byte order, unless otherwise stated.
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPPacket.UnrecognizedChunksThatShouldBeReportedToSender">
             <summary>
             Gets the unrecognized chunks.
             </summary>
             <value>
             The unrecognized chunks.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPPacket.Header">
             <summary>
             Gets or sets the coomon header of the packet.
             </summary>
             <value>
             The header.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPPacket.Chunks">
             <summary>
             Gets or sets the SCTP chunks.
             </summary>
             <value>
             The chunks.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPPacket.#ctor(FM.IceLink.SCTPCommonHeader,FM.IceLink.SCTPChunk[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPPacket" /> class.
             </summary>
             <param name="header">The header.</param>
             <param name="chunks">The chunks.</param>
            </member>
        <member name="M:FM.IceLink.SCTPPacket.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPPacket.GetBytes(FM.IceLink.SCTPPacket)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPPacket.ParseBytes(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Converts a byte array to a packet.
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The start index.</param>
             <param name="length">Maximum number of bytes to parse.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPPacket.ParseBytes(System.Byte[])">
             <summary>
             Converts a byte array to a packet starting with the beginning of the stream.
             </summary>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPPacket.VerifyCRC32cChecksum(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Verifies the CRC32c checksum.
             </summary>
             <param name="sctpBytes">The SCTP bytes.</param>
             <param name="offset">The offset.</param>
             <param name="len">The length.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPSendControlChunkQueue">
             <summary>
             
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPSendControlChunkQueue.controlChunks">
             <summary>
             The TSN data list
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPSendControlChunkQueue.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPDataQueue" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SCTPSendControlChunkQueue.Enqueue(FM.IceLink.SCTPControlChunk)">
             <summary>
             Adds the specified control chunk.
             </summary>
             <param name="controlChunk">The control chunk.</param>
            </member>
        <member name="M:FM.IceLink.SCTPSendControlChunkQueue.Dequeue">
             <summary>
             Returns the first control chunk from the queue (as well as removes it from the queue)
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPSendControlChunkQueue.Peek">
             <summary>
             Returns the first control chunk from the queue (but does not remove it from the queue)
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.SCTPSendControlChunkQueue.Count">
             <summary>
             Gets the number of entries in this queue.
             </summary>
             <value>
             The count.
             </value>
            </member>
        <member name="T:FM.IceLink.SCTPStateCookie">
             <summary>
             State Cookie used in the initialisation part.
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           Timestamp                           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           Timestamp                           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                        My Verification Tag                    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                       Peer Verification Tag                   |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           Peer RWND                           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           Next TSN                            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |        Outbound Channels      |            HMAC...            \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             /                           HMAC...                             /
             \                                                               \
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             </summary>
            </member>
        <member name="P:FM.IceLink.SCTPStateCookie.Timestamp">
             <summary>
             Indicates the creation time (in milliseconds since 01.01.1970).
             </summary>
             <value>
             The creation timestamp.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPStateCookie.MyVerificationTag">
             <summary>
             Tag expected in every inbound packet and sent in the INIT or INIT ACK chunk..
             </summary>
             <value>
             My verification tag.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPStateCookie.PeerVerificationTag">
             <summary>
             Tag value to be sent in every packet and is received in the INIT or INIT ACK chunk.
             </summary>
             <value>
             The peer verification tag.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPStateCookie.PeerRWND">
             <summary>
             Gets or sets the peer advertised RWND.
             </summary>
             <value>
             The peer RWND.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPStateCookie.LastReceivedTSNFromPeer">
             <summary>
             Gets or sets the last received TSN from peer.
             </summary>
             <value>
             The next TSN.
             </value>
            </member>
        <member name="P:FM.IceLink.SCTPStateCookie.NumberOfOutboundChannels">
             <summary>
             Gets or sets the number of outbound channels.
             </summary>
             <value>
             The number of outbound channels.
             </value>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookie.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Int64,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SCTPStateCookie" /> class.
             </summary>
             <param name="myVTag">My verification tag.</param>
             <param name="peerVTag">The peer verification tag.</param>
             <param name="peerRWND">The peer advertised RWND.</param>
             <param name="lastReceivedTSNFromPeer">The last received TSN from peer.</param>
             <param name="outboundChannels">The number outbound channels.</param>
             <param name="timestamp">Time created at (in milliseconds since 1970).</param>
             <param name="secretKey">The secret key.</param>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookie.GetBytes">
             <summary>
             Gets the bytes.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookie.GetBytes(FM.IceLink.SCTPStateCookie)">
             <summary>
             Gets the bytes.
             </summary>
             <param name="cookie">The cookie.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookie.ParseBytes(System.Byte[],System.Int32,System.Int32@,System.Byte[])">
             <summary>
             Parses bytes. Returns null if authentication fails.
             </summary>
             <param name="value">The value.</param>
             <param name="startIndex">The start index.</param>
             <param name="offsetPlus">The offset plus.</param>
             <param name="secretKey">The secret key.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SCTPStateCookie.ParseBytes(System.Byte[],System.Int32@,System.Byte[])">
             <summary>
             Parses bytes. Returns null if authentication fails.
             </summary>
             <param name="bytes">The bytes.</param>
             <param name="offsetPlus">The offset plus.</param>
             <param name="secretKey">The secret key.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SCTPStates">
             <summary>
             SCTP Association State Transition
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPStates.CLOSED">
             <summary>
             The closed state
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPStates.COOKIE_WAIT">
             <summary>
             The cookie wait state
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPStates.COOKIE_ECHOED">
             <summary>
             The cookie echoed state
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPStates.ESTABLISHED">
             <summary>
             The established state
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPStates.SHUTDOWN_PENDING">
             <summary>
             The shutdown pending state
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPStates.SHUTDOWN_SENT">
             <summary>
             The shutdown sent state
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPStates.SHUTDOWN_RECEIVED">
             <summary>
             The shutdown received state
             </summary>
            </member>
        <member name="F:FM.IceLink.SCTPStates.SHUTDOWN_ACK_SENT">
             <summary>
             The shutdown ack sent state
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPSctpMaxMessageSizeAttribute">
             <summary>
             The attribute can be associated with an m- line to indicate
             the maximum message size (indicated in bytes) that an SCTP endpoint
             is willing to receive on the SCTP association associated with the m-
             line. Different attribute values can be used in each direction.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpMaxMessageSizeAttribute.MaxMessageSize">
             <summary>
             Gets or sets the maximum message size in bytes.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSctpMaxMessageSizeAttribute.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSctpMaxMessageSizeAttribute" /> class.
             </summary>
             <param name="maxMessageSize">The maximum message size in bytes.</param>
            </member>
        <member name="M:FM.IceLink.SDPSctpMaxMessageSizeAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSctpMaxMessageSizeAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPSctpMedia">
             <summary>
             An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpMedia.SctpTransportProtocol">
             <summary>
             Gets the protocol keyword for the SCTP data profile.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpMedia.SctpDtlsTransportProtocol">
             <summary>
             Gets the protocol keyword for the DTLS over SCTP data profile.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpMedia.DtlsSctpTransportProtocol">
             <summary>
             Gets the protocol keyword for the SCTP over DTLS data profile.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpMedia.UdpDtlsSctpTransportProtocol">
             <summary>
             Gets the protocol keyword for the SCTP over DTLS over UDP data profile.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpMedia.TcpDtlsSctpTransportProtocol">
             <summary>
             Gets the protocol keyword for the SCTP over DTLS over TCP data profile.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSctpMedia.#ctor(System.String,System.Int32,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSctpMedia" /> class.
             </summary>
             <param name="mediaType">The media type. See <see cref="T:FM.IceLink.SDPMediaType" /> for possible values.</param>
             <param name="transportPort">The transport port.</param>
             <param name="transportProtocol">The transport protocol.</param>
             <param name="associationUsage">The association usage.</param>
            </member>
        <member name="T:FM.IceLink.SDPSctpPortAttribute">
             <summary>
             The attribute can be associated with an SDP media description (m-
             line) with a 'UDP/DTLS/SCTP' or a 'TCP/DTLS/SCTP' proto value, in
             which case the m- line port value indicates the port of the
             underlying transport-layer protocol (UDP or TCP), on which SCTP is
             carried, and the 'sctp-port' value indicates the SCTP port.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSctpPortAttribute.Port">
             <summary>
             Gets or sets the SCTP port.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSctpPortAttribute.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSctpPortAttribute" /> class.
             </summary>
             <param name="port">The SCTP port.</param>
            </member>
        <member name="M:FM.IceLink.SDPSctpPortAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSctpPortAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPSetup">
             <summary>
             Defines valid SDP setups.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSetup.ActPass">
             <summary>
             Gets the SDP setup meaning "Active or Passive".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSetup.Active">
             <summary>
             Gets the SDP setup meaning "Active".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSetup.Passive">
             <summary>
             Gets the SDP setup meaning "Passive".
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPSetupAttribute">
             <summary>
             The 'setup' attribute indicates which of the end points should
             initiate the TCP connection establishment (i.e., send the initial TCP
             SYN).  The 'setup' attribute is charset-independent and can be a
             session-level or a media-level attribute.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSetupAttribute.Setup">
             <summary>
             Gets or sets which end point should initiate the connection establishment. See <see cref="T:FM.IceLink.SDPSetup" /> for possible values.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSetupAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSetupAttribute" /> class.
             </summary>
             <param name="setup">Which end point should initiate the connection establishment. See <see cref="T:FM.IceLink.SDPSetup" /> for possible values.</param>
            </member>
        <member name="M:FM.IceLink.SDPSetupAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSetupAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.ServerArray">
             <summary>
             An array of IceLink servers, capable of responding to STUN
             requests and managing TURN relays.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerArray.Servers">
             <summary>
             Gets the servers.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerArray.TcpEnabled">
             <summary>
             Gets a value indicating whether TCP support is enabled.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerArray.PublicIPAddress">
             <summary>
             Gets or sets the public IP address of the server, if known.
             This is to assist in cases where the server can only bind
             to a private IP address, but a 1:1 NAT is in place. If
             set, this address will be used in client responses instead
             of the local private IP address.
             </summary>
            </member>
        <member name="M:FM.IceLink.ServerArray.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ServerArray" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.ServerArray.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ServerArray" /> class.
             </summary>
             <param name="tcpEnabled">Whether to enable TCP as an alternative to UDP.</param>
            </member>
        <member name="M:FM.IceLink.ServerArray.Start">
             <summary>
             Starts the server array using all available local IP
             addresses and the default port (3478).
             </summary>
            </member>
        <member name="M:FM.IceLink.ServerArray.Start(System.String[])">
             <summary>
             Starts the server array using the specified local IP
             addresses and the default port (3478).
             </summary>
             <param name="ipAddresses">The local IP addresses.</param>
            </member>
        <member name="M:FM.IceLink.ServerArray.Start(System.String[],System.Int32)">
             <summary>
             Starts the server using the specified local IP
             addresses and port.
             </summary>
             <param name="ipAddresses">The local IP addresses.</param>
             <param name="port">The port.</param>
            </member>
        <member name="M:FM.IceLink.ServerArray.Stop">
             <summary>
             Stops the servers.
             </summary>
            </member>
        <member name="T:FM.IceLink.StartSuccessArgs">
             <summary>
             Arguments for <see cref="P:FM.IceLink.StartArgs.OnSuccess" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.StartSuccessArgs.SignalProvider">
             <summary>
             Gets or sets the signal provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.StartFailureArgs">
             <summary>
             Arguments for <see cref="P:FM.IceLink.StartArgs.OnFailure" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.StartFailureArgs.SignalProvider">
             <summary>
             Gets or sets the signal provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.StartFailureArgs.Exception">
             <summary>
             Gets or sets the exception.
             </summary>
            </member>
        <member name="T:FM.IceLink.StartCompleteArgs">
             <summary>
             Arguments for <see cref="P:FM.IceLink.StartArgs.OnComplete" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.StartCompleteArgs.SignalProvider">
             <summary>
             Gets or sets the signal provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.StartArgs">
             <summary>
             The arguments used when starting signalling.
             </summary>
            </member>
        <member name="P:FM.IceLink.StartArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke after <see cref="P:FM.IceLink.StartArgs.OnSuccess" /> or <see cref="P:FM.IceLink.StartArgs.OnFailure" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.StartArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke if the operation fails.
             </summary>
            </member>
        <member name="P:FM.IceLink.StartArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke if the operation succeeds.
             </summary>
            </member>
        <member name="T:FM.IceLink.StopSuccessArgs">
             <summary>
             Arguments for <see cref="P:FM.IceLink.StopArgs.OnSuccess" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.StopSuccessArgs.SignalProvider">
             <summary>
             Gets or sets the signal provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.StopFailureArgs">
             <summary>
             Arguments for <see cref="P:FM.IceLink.StopArgs.OnFailure" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.StopFailureArgs.SignalProvider">
             <summary>
             Gets or sets the signal provider.
             </summary>
            </member>
        <member name="P:FM.IceLink.StopFailureArgs.Exception">
             <summary>
             Gets or sets the exception.
             </summary>
            </member>
        <member name="T:FM.IceLink.StopCompleteArgs">
             <summary>
             Arguments for <see cref="P:FM.IceLink.StopArgs.OnComplete" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.StopCompleteArgs.SignalProvider">
             <summary>
             Gets or sets the signal provider.
             </summary>
            </member>
        <member name="T:FM.IceLink.StopArgs">
             <summary>
             The arguments used when stopping signalling.
             </summary>
            </member>
        <member name="P:FM.IceLink.StopArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke after <see cref="P:FM.IceLink.StopArgs.OnSuccess" /> or <see cref="P:FM.IceLink.StopArgs.OnFailure" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.StopArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke if the operation fails.
             </summary>
            </member>
        <member name="P:FM.IceLink.StopArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke if the operation succeeds.
             </summary>
            </member>
        <member name="T:FM.IceLink.SendOfferAnswerArgs">
             <summary>
             The arguments used when sending an offer/answer to a remote peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendOfferAnswerArgs.OfferAnswer">
             <summary>
             Gets or sets the offer/answer.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendOfferAnswerArgs.PeerId">
             <summary>
             Gets or sets the ID of the remote peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendOfferAnswerArgs.PeerState">
             <summary>
             Gets or sets the custom state object associated with the remote peer.
             </summary>
            </member>
        <member name="T:FM.IceLink.SendCandidateArgs">
             <summary>
             The arguments used when sending a candidate to a remote peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendCandidateArgs.Candidate">
             <summary>
             Gets or sets the candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendCandidateArgs.PeerId">
             <summary>
             Gets or sets the ID of the remote peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendCandidateArgs.PeerState">
             <summary>
             Gets or sets the custom state object associated with the remote peer.
             </summary>
            </member>
        <member name="T:FM.IceLink.ReceiveOfferAnswerArgs">
             <summary>
             The arguments used when receiving an offer/answer from a remote peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.ReceiveOfferAnswerArgs.OfferAnswer">
             <summary>
             Gets or sets the offer/answer.
             </summary>
            </member>
        <member name="P:FM.IceLink.ReceiveOfferAnswerArgs.PeerId">
             <summary>
             Gets or sets the ID of the remote peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.ReceiveOfferAnswerArgs.PeerState">
             <summary>
             Gets or sets the custom state object associated with the remote peer.
             </summary>
            </member>
        <member name="M:FM.IceLink.ReceiveOfferAnswerArgs.#ctor(FM.IceLink.OfferAnswer,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ReceiveOfferAnswerArgs" /> class.
             </summary>
             <param name="offerAnswer">The offer/answer.</param>
             <param name="peerId">The ID of the remote peer.</param>
            </member>
        <member name="M:FM.IceLink.ReceiveOfferAnswerArgs.#ctor(FM.IceLink.OfferAnswer,System.String,System.Object)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ReceiveOfferAnswerArgs" /> class.
             </summary>
             <param name="offerAnswer">The offer/answer.</param>
             <param name="peerId">The ID of the remote peer.</param>
             <param name="peerState">The custom state object associated with the remote peer.</param>
            </member>
        <member name="T:FM.IceLink.ReceiveCandidateArgs">
             <summary>
             The arguments used when receiving a candidate from a remote peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.ReceiveCandidateArgs.Candidate">
             <summary>
             Gets or sets the candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ReceiveCandidateArgs.PeerId">
             <summary>
             Gets or sets the ID of the remote peer.
             </summary>
            </member>
        <member name="M:FM.IceLink.ReceiveCandidateArgs.#ctor(FM.IceLink.Candidate,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ReceiveCandidateArgs" /> class.
             </summary>
             <param name="candidate">The candidate.</param>
             <param name="peerId">The ID of the remote peer.</param>
            </member>
        <member name="T:FM.IceLink.SignalProvider">
             <summary>
             A provider for signalling used during the peer-to-peer handshake process.
             Requires the definition of two 'send' methods (SendOfferAnswer/SendCandidate).
             Implementations must call RaiseOfferAnswer or RaiseCandidate when an offer/answer
             or candidate is received from a peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.SignalProvider.ConferenceId">
             <summary>
             Gets or sets the conference ID.
             </summary>
            </member>
        <member name="M:FM.IceLink.SignalProvider.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SignalProvider" /> class.
             </summary>
             <param name="conferenceId">The conference ID.</param>
            </member>
        <member name="M:FM.IceLink.SignalProvider.Start(FM.IceLink.StartArgs)">
             <summary>
             Starts the provider.
             </summary>
             <param name="startArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.SignalProvider.Stop(FM.IceLink.StopArgs)">
             <summary>
             Stops the provider.
             </summary>
             <param name="stopArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.SignalProvider.SendOfferAnswer(FM.IceLink.SendOfferAnswerArgs)">
             <summary>
             Sends an offer/answer to a peer.
             </summary>
             <param name="sendOfferAnswerArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.SignalProvider.SendCandidate(FM.IceLink.SendCandidateArgs)">
             <summary>
             Sends a candidate to a peer.
             </summary>
             <param name="sendCandidateArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.SignalProvider.RaiseOfferAnswer(FM.IceLink.ReceiveOfferAnswerArgs)">
             <summary>
             Raises an offer/answer received from a peer.
             </summary>
             <param name="receiveOfferAnswerArgs">The arguments.</param>
            </member>
        <member name="M:FM.IceLink.SignalProvider.RaiseCandidate(FM.IceLink.ReceiveCandidateArgs)">
             <summary>
             Raises a candidate received from a peer.
             </summary>
             <param name="receiveCandidateArgs">The arguments.</param>
            </member>
        <member name="T:FM.IceLink.StreamProtocol">
             <summary>
             Describes the stream protocol to use.
             </summary>
            </member>
        <member name="F:FM.IceLink.StreamProtocol.Rtp">
             <summary>
             Indicates that the RTP protocol is used.
             </summary>
            </member>
        <member name="F:FM.IceLink.StreamProtocol.Sctp">
             <summary>
             Indicates that the SCTP protocol is used.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNAddressFamily">
             <summary>
             A STUN address family.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAddressFamily.IPv4">
             <summary>
             Gets the value indicating the IPv4 address family.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAddressFamily.IPv6">
             <summary>
             Gets the value indicating the IPv6 address family.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNConnectionAttemptIndication">
             <summary>
             A STUN connection-attempt indication.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionAttemptIndication.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionAttemptIndication" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNConnectionTimeoutOrFailureException">
             <summary>
             The connection attempt failed or timed out.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionTimeoutOrFailureException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionTimeoutOrFailureException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionTimeoutOrFailureException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionTimeoutOrFailureException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNConnectionAlreadyExistsException">
             <summary>
             The server is currently processing a Connect request for this
             allocation with the same XOR-PEER-ADDRESS; or the server has
             already successfully processed a Connect request for this
             allocation with the same XOR-PEER-ADDRESS, and the resulting
             client and peer data connections are either pending or active.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionAlreadyExistsException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionAlreadyExistsException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionAlreadyExistsException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionAlreadyExistsException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNConnectionIdAttribute">
             <summary>
             The CONNECTION-ID attribute uniquely identifies a peer data connection.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNConnectionIdAttribute.ConnectionId">
             <summary>
             Gets or sets the connection ID.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionIdAttribute.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionIdAttribute" /> class.
             </summary>
             <param name="connectionId">The connection ID.</param>
            </member>
        <member name="M:FM.IceLink.STUNConnectionIdAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNChannelNumberAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNConnectionIdAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNConnectionIdAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNConnectionAttemptMessage">
             <summary>
             A generic STUN connection-attempt message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionAttemptMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionAttemptMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNConnectionBindMessage">
             <summary>
             A generic STUN connection-bind message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionBindMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionBindMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNConnectionBindRequest">
             <summary>
             A STUN connection-bind request.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionBindRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionBindRequest" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNConnectionBindResponse">
             <summary>
             A STUN connection-bind response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectionBindResponse.#ctor(System.Byte[],System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectionBindResponse" /> class.
             </summary>
             <param name="transactionId">The transaction ID.</param>
             <param name="success">Whether the request was successful.</param>
            </member>
        <member name="T:FM.IceLink.STUNConnectResponse">
             <summary>
             A STUN connect response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectResponse.#ctor(System.Byte[],System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectResponse" /> class.
             </summary>
             <param name="transactionId">The transaction ID.</param>
             <param name="success">Whether the request was successful.</param>
            </member>
        <member name="T:FM.IceLink.STUNConnectMessage">
             <summary>
             A generic STUN connect message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNConnectRequest">
             <summary>
             A STUN connect request.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNConnectRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNConnectRequest" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.ReceiveInfo">
             <summary>
             Details about a TURN receive operation.
             </summary>
            </member>
        <member name="P:FM.IceLink.ReceiveInfo.Data">
             <summary>
             Gets or sets the data being received.
             </summary>
            </member>
        <member name="P:FM.IceLink.ReceiveInfo.PeerAddress">
             <summary>
             Gets the peer address to which the data is being sent.
             </summary>
            </member>
        <member name="P:FM.IceLink.ReceiveInfo.AllocationAddress">
             <summary>
             Gets the address of the allocated socket that received the data.
             </summary>
            </member>
        <member name="T:FM.IceLink.SendInfo">
             <summary>
             Details about a TURN send operation.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendInfo.Data">
             <summary>
             Gets or sets the data being sent.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendInfo.PeerAddress">
             <summary>
             Gets the peer address to which the data is being sent.
             </summary>
            </member>
        <member name="P:FM.IceLink.SendInfo.AllocationAddress">
             <summary>
             Gets the address of the allocated socket that sent the data
             if the operation was successful.
             </summary>
            </member>
        <member name="T:FM.IceLink.RefreshInfo">
             <summary>
             Details about a TURN refresh request or response.
             </summary>
            </member>
        <member name="P:FM.IceLink.RefreshInfo.Username">
             <summary>
             Gets or sets the username credential.
             </summary>
            </member>
        <member name="P:FM.IceLink.RefreshInfo.Realm">
             <summary>
             Gets or sets the realm credential.
             </summary>
            </member>
        <member name="P:FM.IceLink.RefreshInfo.Nonce">
             <summary>
             Gets or sets the nonce used when nonce-based
             security is enabled on the server.
             </summary>
            </member>
        <member name="P:FM.IceLink.RefreshInfo.Lifetime">
             <summary>
             Gets or sets the number of seconds to extend
             the allocation. A zero indicates a deallocation,
             and a negative number indicates the default
             server extension time.
             </summary>
            </member>
        <member name="P:FM.IceLink.RefreshInfo.TimeToExpiry">
             <summary>
             Gets the time-to-expiry of the allocation
             if the request was processed successfully.
             </summary>
            </member>
        <member name="P:FM.IceLink.RefreshInfo.Success">
             <summary>
             Gets whether or not the
             response indicates success.
             </summary>
            </member>
        <member name="T:FM.IceLink.CreatePermissionInfo">
             <summary>
             Details about a TURN create-permission request or response.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreatePermissionInfo.Username">
             <summary>
             Gets or sets the username credential.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreatePermissionInfo.Realm">
             <summary>
             Gets or sets the realm credential.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreatePermissionInfo.Nonce">
             <summary>
             Gets or sets the nonce used when nonce-based
             security is enabled on the server.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreatePermissionInfo.PeerAddress">
             <summary>
             Gets the peer address for which permission is being created.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreatePermissionInfo.Success">
             <summary>
             Gets whether or not the
             response indicates success.
             </summary>
            </member>
        <member name="T:FM.IceLink.ServerEventArgs">
             <summary>
             Arguments for IceLink server events.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.EventType">
             <summary>
             Gets or sets the event type.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.ProtocolType">
             <summary>
             Gets or sets the protocol type.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.Server">
             <summary>
             Gets or sets the server.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.RemoteAddress">
             <summary>
             Gets or sets the remote address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.AllocateInfo">
             <summary>
             Gets or sets allocate-specific details for TURN allocate requests/responses.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.ConnectInfo">
             <summary>
             Gets or sets connect-specific details for TURN connect requests/responses.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.ConnectionBindInfo">
             <summary>
             Gets or sets connect-specific details for TURN connection-bind requests/responses.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.CreatePermissionInfo">
             <summary>
             Gets or sets create-permission-specific details for TURN create-permission requests/responses.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.ChannelBindInfo">
             <summary>
             Gets or sets channel-bind-specific details for TURN channel-bind requests/responses.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.RefreshInfo">
             <summary>
             Gets or sets refresh-specific details for TURN refresh requests/responses.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.SendInfo">
             <summary>
             Gets or sets send-specific details when data is being sent by a TURN allocation.
             </summary>
            </member>
        <member name="P:FM.IceLink.ServerEventArgs.ReceiveInfo">
             <summary>
             Gets or sets receive-specific details when data is being received by a TURN allocation.
             </summary>
            </member>
        <member name="M:FM.IceLink.ServerEventArgs.Cancel(System.String)">
             <summary>
             In "before" operations, cancels the event so it the request or
             indication is not processed by the server.
             </summary>
             <param name="error">The error to send back to the client.</param>
            </member>
        <member name="T:FM.IceLink.StreamLinkDownArgs">
             <summary>
             Arguments for the stream down event.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamLinkDownArgs.Stream">
             <summary>
             Gets or sets the source stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamLinkDownArgs.StreamIndex">
             <summary>
             Gets or sets the source stream index.
             </summary>
            </member>
        <member name="T:FM.IceLink.StreamLinkInitArgs">
             <summary>
             Arguments for the stream init event.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamLinkInitArgs.Stream">
             <summary>
             Gets or sets the source stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamLinkInitArgs.StreamIndex">
             <summary>
             Gets or sets the source stream index.
             </summary>
            </member>
        <member name="T:FM.IceLink.StreamLinkUpArgs">
             <summary>
             Arguments for the stream up event.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamLinkUpArgs.Stream">
             <summary>
             Gets or sets the source stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamLinkUpArgs.StreamIndex">
             <summary>
             Gets or sets the source stream index.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamLinkUpArgs.NegotiatedStream">
             <summary>
             Gets or sets the negotiated stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.LinkOfferAnswerArgs">
             <summary>
             Arguments for the link offer/answer event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkOfferAnswerArgs.OfferAnswer">
             <summary>
             Gets or sets the created offer/answer.
             </summary>
            </member>
        <member name="M:FM.IceLink.LinkOfferAnswerArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.LinkOfferAnswerArgs.ToJson(FM.IceLink.LinkOfferAnswerArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="linkOfferAnswerArgs">The link offer/answer arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.LinkOfferAnswerArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="linkOfferAnswerArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized link offer/answer arguments.</returns>
            </member>
        <member name="T:FM.IceLink.StreamLinkReceiveRTCPArgs">
             <summary>
             Arguments for the stream receive-RTCP event.
             </summary>
            </member>
        <member name="T:FM.IceLink.RelayAuthenticateArgs">
             <summary>
             Arguments for the IceLink server's relay-authenticate event.
             </summary>
            </member>
        <member name="P:FM.IceLink.RelayAuthenticateArgs.Username">
             <summary>
             Gets or sets the username from the request.
             </summary>
            </member>
        <member name="P:FM.IceLink.RelayAuthenticateArgs.Realm">
             <summary>
             Gets or sets the realm from the request.
             </summary>
            </member>
        <member name="P:FM.IceLink.RelayAuthenticateArgs.Operation">
             <summary>
             Gets or sets the operation.
             </summary>
            </member>
        <member name="M:FM.IceLink.RelayAuthenticateArgs.#ctor(System.String,System.String,FM.IceLink.RelayOperation)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RelayAuthenticateArgs" /> class.
             </summary>
             <param name="username">The username from the request.</param>
             <param name="realm">The realm from the request.</param>
             <param name="operation">The operation.</param>
            </member>
        <member name="T:FM.IceLink.RelayAuthenticateResult">
             <summary>
             The result of attempting to authenticate a relay request.
             </summary>
            </member>
        <member name="P:FM.IceLink.RelayAuthenticateResult.Password">
             <summary>
             Gets or sets the user's password in plain text.
             </summary>
            </member>
        <member name="P:FM.IceLink.RelayAuthenticateResult.LongTermKeyBytes">
             <summary>
             Gets or sets the long-term key bytes, calculated as the MD5 hash of the
             following UTF8-encoded input: "username:realm:password" (for convenience,
             use STUN.CreateLongTermKey to calculate).
             </summary>
            </member>
        <member name="M:FM.IceLink.RelayAuthenticateResult.FromPassword(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RelayAuthenticateResult" /> class
             using a plaintext password.
             </summary>
             <param name="password">The user's password in plain text.</param>
            </member>
        <member name="M:FM.IceLink.RelayAuthenticateResult.FromLongTermKeyBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RelayAuthenticateResult" /> class
             using a long-term key.
             </summary>
             <param name="longTermKeyBytes">The long-term key bytes, calculated as the MD5 hash
             of the following UTF8-encoded input: "username:realm:password".</param>
            </member>
        <member name="T:FM.IceLink.StreamLinkReceiveRTPArgs">
             <summary>
             Arguments for the stream receive RTP event.
             </summary>
            </member>
        <member name="T:FM.IceLink.LinkInitArgs">
             <summary>
             Arguments for the link init event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkInitArgs.Initiator">
             <summary>
             Gets or sets whether the current process is the initiator.
             </summary>
            </member>
        <member name="M:FM.IceLink.LinkInitArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.LinkInitArgs.ToJson(FM.IceLink.LinkInitArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="linkInitArgs">The link init arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.LinkInitArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="linkInitArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized link init arguments.</returns>
            </member>
        <member name="T:FM.IceLink.LinkUpArgs">
             <summary>
             Arguments for the link up event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkUpArgs.NegotiatedStreams">
             <summary>
             Gets or sets the negotiated streams.
             </summary>
            </member>
        <member name="M:FM.IceLink.LinkUpArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.LinkUpArgs.ToJson(FM.IceLink.LinkUpArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="linkUpArgs">The link up arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.LinkUpArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="linkUpArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized link up arguments.</returns>
            </member>
        <member name="T:FM.IceLink.LinkDownArgs">
             <summary>
             Arguments for the link down event.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkDownArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkDownArgs.Reason">
             <summary>
             Gets or sets the reason, if specified.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkDownArgs.TimedOut">
             <summary>
             Gets or sets whether the link timed out.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkDownArgs.IsSwitchingRoles">
             <summary>
             Gets or sets whether the link is switching roles.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkDownArgs.DeadStreamDetected">
             <summary>
             Gets or sets whether a dead stream was detected.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkDownArgs.RelayFailureDetected">
             <summary>
             Gets or sets whether a relay failure was detected.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkDownArgs.NewOfferReceived">
             <summary>
             Gets or sets whether a new offer was received from the peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkDownArgs.Retry">
             <summary>
             Gets or sets whether to retry the connection.
             </summary>
            </member>
        <member name="M:FM.IceLink.LinkDownArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.LinkDownArgs.ToJson(FM.IceLink.LinkDownArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="linkDownArgs">The link down arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.LinkDownArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="linkDownArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized link down arguments.</returns>
            </member>
        <member name="T:FM.IceLink.ASN1Class">
             <summary>
             Defines ASN.1 class constants.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1Class.Universal">
             <summary>
             Indicates a universal class.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1Class.Application">
             <summary>
             Indicates an application class.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1Class.ContextSpecific">
             <summary>
             Indicates a context-specific class.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1Class.Private">
             <summary>
             Indicates a private class.
             </summary>
            </member>
        <member name="T:FM.IceLink.ASN1UniversalTag">
             <summary>
             Defines ASN.1 universal tag staticants.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.Boolean">
             <summary>
             Indicates a boolean type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.Integer">
             <summary>
             Indicates an integer type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.BitString">
             <summary>
             Indicates a bit-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.OctetString">
             <summary>
             Indicates an octet-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.Null">
             <summary>
             Indicates a null type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.ObjectIdentifier">
             <summary>
             Indicates an object-identifier type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.ObjectDescriptor">
             <summary>
             Indicates an object-descriptor type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.External">
             <summary>
             Indicates an external type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.Real">
             <summary>
             Indicates a real type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.Enumerated">
             <summary>
             Indicates an enumerated type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.EmbeddedPdv">
             <summary>
             Indicates an embedded-PDV type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.Utf8String">
             <summary>
             Indicates a UTF8-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.RelativeOid">
             <summary>
             Indicates a relative-OID type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.Sequence">
             <summary>
             Indicates a sequence or sequence-of type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.Set">
             <summary>
             Indicates a set or set-of type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.NumericString">
             <summary>
             Indicates a numeric-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.PrintableString">
             <summary>
             Indicates a printable-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.TeletexString">
             <summary>
             Indicates a Teletex-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.VideotexString">
             <summary>
             Indicates a Videotex-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.Ia5String">
             <summary>
             Indicates an IA5-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.UtcTime">
             <summary>
             Indicates a UTC-time type type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.GeneralizedTime">
             <summary>
             Indicates a generalized-time type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.GraphicString">
             <summary>
             Indicates a graphic-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.VisibleString">
             <summary>
             Indicates a visible-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.GeneralString">
             <summary>
             Indicates a general-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.UniversalString">
             <summary>
             Indicates a universal-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.CharacterString">
             <summary>
             Indicates a character-string type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ASN1UniversalTag.BmpString">
             <summary>
             Indicates a BMP-string type.
             </summary>
            </member>
        <member name="T:FM.IceLink.BaseConference">
             <summary>
             Defines common base properties for conferences.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.Id">
             <summary>
             Gets or sets an ID to identify this instance.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.SuppressPrivateCandidates">
             <summary>
             Gets or sets a value that indicates whether private (local/host) candidates should be suppressed.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.SuppressPublicCandidates">
             <summary>
             Gets or sets a value that indicates whether public (NAT/reflexive) candidates should be suppressed.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.SuppressRelayCandidates">
             <summary>
             Gets or sets a value that indicates whether relay candidates should be suppressed.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.DisableAutomaticReports">
             <summary>
             Gets or sets a value indicating whether to disable automatic RTCP sender/receiver reports.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.KeepAliveInterval">
             <summary>
             Gets or sets a value indicating how many milliseconds must elapse between STUN keep-alive binding requests.
             Defaults to 1000.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.DeadStreamTimeout">
             <summary>
             Gets or sets a value indicating how many milliseconds must elapse with no receive activity before a stream is considered dead.
             Defaults to 15000.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.DtlsCertificate">
             <summary>
             Gets or sets the certificate to use for DTLS key exchange.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.DtlsCipherSuites">
             <summary>
             Gets or sets the DTLS cipher suites to use.
             Defaults to Aes128Sha, DhRsaAes128Sha,
             EcdhRsaAes128Sha, DheRsaAes128Sha,
             EcdheRsaAes128Sha, and EcdheEcdsaAes128Sha.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.DtlsServerMinVersion">
             <summary>
             Gets or sets the minimum protocol version to
             allow when in the DTLS server role. Defaults
             to <see cref="F:FM.IceLink.ProtocolVersion.Dtls10" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.DtlsServerMaxVersion">
             <summary>
             Gets or sets the maximum protocol version to
             allow when in the DTLS server role. Defaults
             to <see cref="F:FM.IceLink.ProtocolVersion.Dtls12" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.DtlsClientVersion">
             <summary>
             Gets or sets the protocol version to use
             when in the DTLS client role. Defaults
             to <see cref="F:FM.IceLink.ProtocolVersion.Dtls10" />.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.IceUsernameFragment">
             <summary>
             Gets or sets the username fragment to use for ICE connectivity checks.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.IcePassword">
             <summary>
             Gets or sets the password to use for ICE connectivity checks.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.Cname">
             <summary>
             Gets or sets the "cname" to use for SDP messages.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.SctpPortMin">
             <summary>
             Gets or sets the minimum port IceLink will use
             when creating sockets for UDP SCTP packet transfer.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.SctpPortMax">
             <summary>
             Gets or sets the maximum port IceLink will use
             when creating sockets for UDP SCTP packet transfer.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.RtpPortMin">
             <summary>
             Gets or sets the minimum even-numbered port IceLink will use
             when creating sockets for UDP RTP packet transfer.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.RtpPortMax">
             <summary>
             Gets or sets the maximum even-numbered port IceLink will use
             when creating sockets for UDP RTP packet transfer.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.RelayUsernames">
             <summary>
             Gets or sets the long-term usernames used to authenticate relay requests.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.RelayRealms">
             <summary>
             Gets or sets the long-term realms used to authenticate relay requests.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.RelayPasswords">
             <summary>
             Gets or sets the long-term passwords used to authenticate relay requests.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.RelayUsername">
             <summary>
             Gets or sets the long-term username used to authenticate relay requests.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.RelayRealm">
             <summary>
             Gets or sets the long-term realm used to authenticate relay requests.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.RelayPassword">
             <summary>
             Gets or sets the long-term password used to authenticate relay requests.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.CandidateMode">
             <summary>
             Gets or sets the mode of operation for candidate gathering.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.EarlyCandidatesTimeout">
             <summary>
             Gets or sets the amount of time (in milliseconds) to wait
             before halting gathering efforts for early candidates.
             Only applies when <see cref="T:FM.IceLink.CandidateMode" /> is set to
             Early. Defaults to 500.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.PublicIPAddress">
             <summary>
             Gets or sets the public IP address of this
             device, if the NAT is known to be 1:1 and
             the IP address is known in advance. This
             should only be used in controlled server
             environments as an alternative to using
             an external STUN server.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.PublicIPAddresses">
             <summary>
             Gets or sets the public IP address of this
             device, if the NAT is known to be 1:1 and
             the IP address is known in advance. This
             should only be used in controlled server
             environments as an alternative to using
             an external STUN server.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.PrivateIPAddress">
             <summary>
             Gets or sets the private IP address of this
             device. If set, this will bypass the local
             network discovery and use this as the sole
             host candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.PrivateIPAddresses">
             <summary>
             Gets or sets the private IP address of this
             device. If set, this will bypass the local
             network discovery and use this as the sole
             host candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.ServerAddresses">
             <summary>
             Gets or sets the IceLink server addresses.
             Server addresses are formatted as {address}
             or {address}:{port}. If the port is not
             specified, it will default to 3478.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.ServerAddress">
             <summary>
             Gets or sets the IceLink server address.
             Server addresses are formatted as {address}
             or {address}:{port}. If the port is not
             specified, it will default to 3478.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.ServerPort">
             <summary>
             Gets or sets the IceLink server port.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.ServerIPAddress">
             <summary>
             Gets or sets the IceLink server address.
             Overload for <see cref="P:FM.IceLink.BaseConference.ServerAddress" />.
             Use <see cref="P:FM.IceLink.BaseConference.ServerAddress" /> instead.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.Streams">
             <summary>
             Gets or sets the IceLink streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.CanSend">
             <summary>
             Gets a value indicating whether any of the streams are marked
             as capable of sending media (SendReceive or SendOnly).
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.CanReceive">
             <summary>
             Gets a value indicating whether any of the streams are marked
             as capable of receiving media (SendReceive or ReceiveOnly).
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseConference.VirtualAdapters">
             <summary>
             Gets or sets the virtual adapters to use
             instead of the local device adapters.
             </summary>
            </member>
        <member name="M:FM.IceLink.BaseConference.CopyFrom(FM.IceLink.BaseConference)">
             <summary>
             Copies common properties from a <see cref="T:FM.IceLink.BaseConference" />,
             except server IP address, server port, and streams.
             </summary>
             <param name="baseLink">The source base link.</param>
            </member>
        <member name="M:FM.IceLink.BaseConference.ParseAddress(System.String,System.String@,System.Int32@)">
             <summary>
             Parses an address into a host name and port (defaults to 3478).
             </summary>
             <param name="address">The address.</param>
             <param name="host">The host name.</param>
             <param name="port">The port.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.CandidateMode">
             <summary>
             Describes how candidates are to be gathered.
             </summary>
            </member>
        <member name="F:FM.IceLink.CandidateMode.Early">
             <summary>
             Indicates that candidates should be gathered
             early and included in the offer/answer. This is
             the slowest mode of operation since candidate
             gathering is asynchronous and requires a timeout
             period to elapse before the offer/answer can be
             raised. There is also a risk that valid candidates
             might not be gathered before the end of the
             timeout period and therefore not included for
             path consideration. This mode should only be used
             for third-party compatibility.
             </summary>
            </member>
        <member name="F:FM.IceLink.CandidateMode.Late">
             <summary>
             Indicates that candidates should be gathered late
             and excluded from the offer/answer. This is the
             fastest mode of operation since it allows the
             offer/answer exchange to take place immediately,
             with candidates exchanged between peers immediately
             after being discovered. There is also little risk for
             missing valid candidates - the search for valid
             candidates only terminates when the link establishes
             or times out. This is also known as "trickle" ICE.
             </summary>
            </member>
        <member name="F:FM.IceLink.CandidateMode.Default">
             <summary>
             Same as <see cref="F:FM.IceLink.CandidateMode.Late" />.
             </summary>
            </member>
        <member name="T:FM.IceLink.Conference">
             <summary>
             A link manager that keeps track of a group of
             peer-to-peer links using a non-peer-to-peer library
             for session negotiation.
             </summary>
            </member>
        <member name="P:FM.IceLink.Conference.MaxLinks">
             <summary>
             Gets or sets the maximum number of links allowed on this conference. Defaults to 0 (no maximum).
             </summary>
            </member>
        <member name="P:FM.IceLink.Conference.Timeout">
             <summary>
             Gets or sets the time allowed for link establishment, in milliseconds.
             Defaults to 30000 (30 seconds).
             </summary>
            </member>
        <member name="P:FM.IceLink.Conference.RandomizeServers">
             <summary>
             Gets or sets whether to randomize the server
             array to automatically distribute load.
             </summary>
            </member>
        <member name="P:FM.IceLink.Conference.SignalProvider">
             <summary>
             Gets or sets the signal provider. A signal provider allows the conference
             to do its own signalling without the need for application-level interaction.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnUnhandledException">
             <summary>
             Raised when an exception is thrown in user code and not handled,
             typically in a callback or event handler.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkInit">
             <summary>
             Raised when a link is initializing.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkUp">
             <summary>
             Raised when a link is up.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkOfferAnswer">
             <summary>
             Raised when a local offer or answer is created.
             The offer/answer should be sent via signalling to the remote peer.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkRemoteOfferAnswer">
             <summary>
             Raised when a remote offer or answer is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkCandidate">
             <summary>
             Raised when a local candidate is created.
             The candidate should be sent via signalling to the remote peer.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkRemoteCandidate">
             <summary>
             Raised when a remote candidate is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkDown">
             <summary>
             Raised when a link is down.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkReceiveRTP">
             <summary>
             Raised when an RTP packet is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkReceiveSCTP">
             <summary>
             Raised when an SCTP packet is received.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkReceiveRTCP">
             <summary>
             Raised when RTCP packets are received.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkSendRTP">
             <summary>
             Raised when an RTP packet is sent.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkSendRTCP">
             <summary>
             Raised when RTCP packets are sent.
             </summary>
            </member>
        <member name="E:FM.IceLink.Conference.OnLinkLocalAddresses">
             <summary>
             Raised when local IP addresses are discovered.
             </summary>
            </member>
        <member name="M:FM.IceLink.Conference.#ctor(FM.IceLink.Stream)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Conference" /> class using the default port (3478).
             </summary>
             <param name="stream">The stream to establish.</param>
            </member>
        <member name="M:FM.IceLink.Conference.#ctor(FM.IceLink.Stream[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Conference" /> class.
             </summary>
             <param name="streams">The streams to establish.</param>
            </member>
        <member name="M:FM.IceLink.Conference.#ctor(System.String,FM.IceLink.Stream)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Conference" /> class.
             </summary>
             <param name="serverAddress">The IceLink server address.</param>
             <param name="stream">The stream to establish.</param>
            </member>
        <member name="M:FM.IceLink.Conference.#ctor(System.String,FM.IceLink.Stream[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Conference" /> class.
             </summary>
             <param name="serverAddress">The IceLink server address.</param>
             <param name="streams">The streams to establish.</param>
            </member>
        <member name="M:FM.IceLink.Conference.#ctor(System.String,System.Int32,FM.IceLink.Stream)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Conference" /> class.
             </summary>
             <param name="stream">The stream to establish.</param>
             <param name="serverAddress">The IceLink server address.</param>
             <param name="serverPort">The IceLink server port.</param>
            </member>
        <member name="M:FM.IceLink.Conference.#ctor(System.String,System.Int32,FM.IceLink.Stream[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Conference" /> class.
             </summary>
             <param name="streams">The streams to establish.</param>
             <param name="serverAddress">The IceLink server address.</param>
             <param name="serverPort">The IceLink server port.</param>
            </member>
        <member name="M:FM.IceLink.Conference.#ctor(System.String[],FM.IceLink.Stream)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Conference" /> class.
             </summary>
             <param name="serverAddresses">The IceLink server addresses.</param>
             <param name="stream">The stream to establish.</param>
            </member>
        <member name="M:FM.IceLink.Conference.#ctor(System.String[],FM.IceLink.Stream[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Conference" /> class.
             </summary>
             <param name="serverAddresses">The IceLink server addresses.</param>
             <param name="streams">The streams to establish.</param>
            </member>
        <member name="M:FM.IceLink.Conference.Link(System.String)">
             <summary>
             Creates a link to the specified peer.
             </summary>
             <param name="peerId">The peer ID.</param>
             <returns><c>true</c> if a new link was created; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.Link(System.String,System.Object)">
             <summary>
             Creates a link to the specified peer.
             </summary>
             <param name="peerId">The peer ID.</param>
             <param name="peerState">Custom state to associate with the peer.</param>
             <returns><c>true</c> if a new link was created; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.Link(System.String,System.Object,System.Boolean)">
             <summary>
             Creates a link to the specified peer.
             </summary>
             <param name="peerId">The peer ID.</param>
             <param name="peerState">Custom state to associate with the peer.</param>
             <param name="unlinkExisting">Whether to unlink the existing connection if one exists.
             If set to <c>false</c> and a link already exists, a new link will not be created.</param>
             <returns><c>true</c> if a new link was created; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.Unlink(System.String)">
             <summary>
             Destroys the link to the specified peer.
             </summary>
             <param name="peerId">The peer ID.</param>
             <returns><c>false</c> if a link with the specified peer ID does not exist; otherwise, <c>true</c>.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.Unlink(System.String,System.String)">
             <summary>
             Destroys the link to the specified peer for the specified reason.
             </summary>
             <param name="peerId">The peer ID.</param>
             <param name="reason">The reason.</param>
             <returns><c>false</c> if a link with the specified peer ID does not exist; otherwise, <c>true</c>.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.UnlinkAll">
             <summary>
             Destroys links to all connected peers.
             </summary>
            </member>
        <member name="M:FM.IceLink.Conference.UnlinkAll(System.String)">
             <summary>
             Destroys links to all connected peers for the specified reason.
             </summary>
             <param name="reason">The reason.</param>
            </member>
        <member name="M:FM.IceLink.Conference.ReceiveOfferAnswer(FM.IceLink.OfferAnswer,System.String)">
             <summary>
             Receives an offer or answer from the specified peer.
             </summary>
             <param name="offerAnswer">The offer or answer.</param>
             <param name="peerId">The peer ID.</param>
            </member>
        <member name="M:FM.IceLink.Conference.ReceiveOfferAnswer(FM.IceLink.OfferAnswer,System.String,System.Object)">
             <summary>
             Receives an offer or answer from the specified peer.
             </summary>
             <param name="offerAnswer">The offer or answer.</param>
             <param name="peerId">The peer ID.</param>
             <param name="peerState">Custom state to associate with the peer.</param>
            </member>
        <member name="M:FM.IceLink.Conference.ReceiveCandidate(FM.IceLink.Candidate,System.String)">
             <summary>
             Receives a candidate from the specified peer.
             </summary>
             <param name="peerId">The peer ID.</param>
             <param name="candidate">The candidate.</param>
            </member>
        <member name="M:FM.IceLink.Conference.SendRTP(FM.IceLink.Stream,FM.IceLink.StreamFormat,FM.IceLink.RTPPacket)">
             <summary>
             Sends an RTP packet to the conference's connected peers.
             </summary>
             <param name="stream">The stream.</param>
             <param name="format">The stream format.</param>
             <param name="packet">The RTP packet to send.</param>
             <returns>The number of bytes sent for each peer ID, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.SendRTP(FM.IceLink.Stream,FM.IceLink.StreamFormat,FM.IceLink.RTPPacket,System.String)">
             <summary>
             Sends an RTP packet to one of the conference's connected peers.
             </summary>
             <param name="stream">The stream.</param>
             <param name="format">The stream format.</param>
             <param name="packet">The RTP packet to send.</param>
             <param name="peerId">The peer ID to target.</param>
             <returns>The number of bytes sent, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.SendSCTP(FM.IceLink.SendSCTPArgs)">
             <summary>
             Sends an SCTP packet to the conference's connected peers.
             </summary>
             <param name="sendArgs">The send arguments.</param>
             <returns>
             Whether or not the data was sent for each peer ID.
             </returns>
            </member>
        <member name="M:FM.IceLink.Conference.SendSCTP(FM.IceLink.SendSCTPArgs,System.String)">
             <summary>
             Sends an SCTP packet to one of the conference's connected peers.
             </summary>
             <param name="sendArgs">The send arguments.</param>
             <param name="peerId">The peer ID to target.</param>
             <returns>
               <c>true</c> if a link with the peer ID exists; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.Conference.SendRTCP(FM.IceLink.Stream,FM.IceLink.RTCPPacket)">
             <summary>
             Sends an RTCP packet to the conference's connected peers.
             </summary>
             <param name="stream">The stream.</param>
             <param name="packet">The RTCP packet to send.</param>
             <returns>The number of bytes sent for each peer ID, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.SendRTCP(FM.IceLink.Stream,FM.IceLink.RTCPPacket,System.String)">
             <summary>
             Sends an RTCP packet to one of the conference's connected peers.
             </summary>
             <param name="stream">The stream.</param>
             <param name="packet">The RTCP packet to send.</param>
             <param name="peerId">The peer ID to target.</param>
             <returns>The number of bytes sent, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.SendRTCP(FM.IceLink.Stream,FM.IceLink.RTCPPacket[])">
             <summary>
             Sends RTCP packets to the conference's connected peers.
             </summary>
             <param name="stream">The stream.</param>
             <param name="packets">The RTCP packets to send.</param>
             <returns>The number of bytes sent for each peer ID, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.SendRTCP(FM.IceLink.Stream,FM.IceLink.RTCPPacket[],System.String)">
             <summary>
             Sends RTCP packets to one of the conference's connected peers.
             </summary>
             <param name="stream">The stream.</param>
             <param name="packets">The RTCP packets to send.</param>
             <param name="peerId">The peer ID to target.</param>
             <returns>The number of bytes sent, or -1 if the send operation failed.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.GetLink(System.String)">
             <summary>
             Gets an individual link from the conference.
             </summary>
             <param name="peerId">The peer ID.</param>
             <returns>The link to the peer, or <c>null</c> if there is no link to the peer.</returns>
            </member>
        <member name="M:FM.IceLink.Conference.GetLinks">
             <summary>
             Gets a list of links currently managed by this conference.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Conference.GetPeerState(System.String)">
             <summary>
             Gets the state of a peer given the peer ID, or
             <c>null</c> if the peer does not have a link
             that is managed by this conference.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Conference.GetPeerIds">
             <summary>
             Gets a list of the IDs of peers who have links
             managed by this conference.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Conference.GetPeerStates">
             <summary>
             Gets a hashtable of peer states keyed by the IDs of
             peers who have links managed by this conference.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Conference.IsLinked(System.String)">
             <summary>
             Checks if an individual link exists in the conference.
             </summary>
             <param name="peerId">The peer ID.</param>
             <returns><c>true</c> if a link to the peer exists; otherwise, <c>false</c>.</returns>
            </member>
        <member name="T:FM.IceLink.CandidateType">
             <summary>
             Describes candidate types.
             </summary>
            </member>
        <member name="F:FM.IceLink.CandidateType.Private">
             <summary>
             Private, or host, candidates represent local
             IP address and port combinations.
             </summary>
            </member>
        <member name="F:FM.IceLink.CandidateType.Public">
             <summary>
             Public, or reflexive, candidates represent
             IP address and port combinations assigned by the
             NAT when communicating with a STUN server.
             </summary>
            </member>
        <member name="F:FM.IceLink.CandidateType.Relay">
             <summary>
             Relay candidates represent IP address and port
             combinations assigned by the TURN server.
             </summary>
            </member>
        <member name="F:FM.IceLink.CandidateType.Relayed">
             <summary>
             Relay candidates represent IP address and port
             combinations assigned by the TURN server.
             </summary>
            </member>
        <member name="T:FM.IceLink.EncryptionMode">
             <summary>
             The encryption mode for the stream.
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionMode.Default">
             <summary>
             Same as <see cref="F:FM.IceLink.EncryptionMode.Aes128Strong" />.
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionMode.Null">
             <summary>
             No encryption and no integrity checking.
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionMode.Aes128Strong">
             <summary>
             AES 128-bit encryption with strong HMAC-SHA1 integrity checking (80-bit).
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionMode.Aes128Weak">
             <summary>
             AES 128-bit encryption with weak HMAC-SHA1 integrity checking (32-bit).
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionMode.NullStrong">
             <summary>
             Null encryption with strong HMAC-SHA1 integrity checking (80-bit).
             </summary>
            </member>
        <member name="F:FM.IceLink.EncryptionMode.NullWeak">
             <summary>
             Null encryption with weak HMAC-SHA1 integrity checking (32-bit).
             </summary>
            </member>
        <member name="T:FM.IceLink.AESCounter">
             <summary>
             Implementation of AES-ICM (128-bit).
             </summary>
            </member>
        <member name="M:FM.IceLink.AESCounter.Clear">
             <summary>
             Clears an instance of the <see cref="T:FM.IceLink.AESCounter" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.AESCounter.#ctor(System.Byte[],System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.AESCounter" /> class.
             </summary>
             <param name="key">The key.</param>
             <param name="salt">The salt.</param>
            </member>
        <member name="M:FM.IceLink.AESCounter.Generate(System.Byte,System.Int32)">
             <summary>
             Generates a value for the specified label.
             </summary>
             <param name="label">The label.</param>
             <param name="length">The length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.AESCounter.Encrypt(System.Byte[],System.Int32,System.Int32,System.Int64,System.Int64)">
             <summary>
             Encrypts a block of data.
             </summary>
             <param name="data">The data to encrypt.</param>
             <param name="offset">The data offset.</param>
             <param name="length">The data length.</param>
             <param name="ssrc">The SSRC of the stream.</param>
             <param name="packetIndex">The packet index.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.AESCounter.Decrypt(System.Byte[],System.Int32,System.Int32,System.Int64,System.Int64)">
             <summary>
             Decrypts a block of data.
             </summary>
             <param name="data">The data to decrypt.</param>
             <param name="offset">The data offset.</param>
             <param name="length">The data length.</param>
             <param name="ssrc">The SSRC of the stream.</param>
             <param name="packetIndex">The packet index.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.AcceptArgs">
             <summary>
             Arguments for link accept invocations.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptArgs.OfferAnswer">
             <summary>
             Gets or sets the offer/answer to accept.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke if the accept operation completes successfully.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke if the accept operation fails.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke when the accept operation completes.
             </summary>
            </member>
        <member name="M:FM.IceLink.AcceptArgs.#ctor(FM.IceLink.OfferAnswer)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.AcceptArgs" /> class.
             </summary>
             <param name="offerAnswer">The offer/answer to accept.</param>
            </member>
        <member name="M:FM.IceLink.AcceptArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.AcceptArgs.ToJson(FM.IceLink.AcceptArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="acceptArgs">The accept arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.AcceptArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="acceptArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized accept arguments.</returns>
            </member>
        <member name="T:FM.IceLink.AcceptCompleteArgs">
             <summary>
             Arguments for the accept complete event.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptCompleteArgs.Link">
             <summary>
             Gets or sets the active link.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptCompleteArgs.OfferAnswer">
             <summary>
             Gets or sets the original offer/answer to accept.
             </summary>
            </member>
        <member name="M:FM.IceLink.AcceptCompleteArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.AcceptCompleteArgs.ToJson(FM.IceLink.AcceptCompleteArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="acceptCompleteArgs">The accept complete arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.AcceptCompleteArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="acceptCompleteArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized accept complete arguments.</returns>
            </member>
        <member name="T:FM.IceLink.AcceptFailureArgs">
             <summary>
             Arguments for the accept failure event.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptFailureArgs.Link">
             <summary>
             Gets or sets the active link.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptFailureArgs.OfferAnswer">
             <summary>
             Gets or sets the original offer/answer to accept.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="M:FM.IceLink.AcceptFailureArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.AcceptFailureArgs.ToJson(FM.IceLink.AcceptFailureArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="acceptFailureArgs">The accept failure arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.AcceptFailureArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="acceptFailureArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized accept failure arguments.</returns>
            </member>
        <member name="T:FM.IceLink.AcceptSuccessArgs">
             <summary>
             Arguments for the accept success event.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptSuccessArgs.Link">
             <summary>
             Gets or sets the active link.
             </summary>
            </member>
        <member name="P:FM.IceLink.AcceptSuccessArgs.OfferAnswer">
             <summary>
             Gets or sets the original offer/answer to accept.
             </summary>
            </member>
        <member name="M:FM.IceLink.AcceptSuccessArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.AcceptSuccessArgs.ToJson(FM.IceLink.AcceptSuccessArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="acceptSuccessArgs">The accept success arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.AcceptSuccessArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="acceptSuccessArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized accept success arguments.</returns>
            </member>
        <member name="T:FM.IceLink.CreateCompleteArgs">
             <summary>
             Arguments for the create complete event.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreateCompleteArgs.Link">
             <summary>
             Gets or sets the active link.
             </summary>
            </member>
        <member name="M:FM.IceLink.CreateCompleteArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.CreateCompleteArgs.ToJson(FM.IceLink.CreateCompleteArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="createCompleteArgs">The create complete arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.CreateCompleteArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="createCompleteArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized create complete arguments.</returns>
            </member>
        <member name="T:FM.IceLink.CreateFailureArgs">
             <summary>
             Arguments for the create failure event.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreateFailureArgs.Link">
             <summary>
             Gets or sets the active link.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreateFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="M:FM.IceLink.CreateFailureArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.CreateFailureArgs.ToJson(FM.IceLink.CreateFailureArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="createFailureArgs">The create failure arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.CreateFailureArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="createFailureArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized create failure arguments.</returns>
            </member>
        <member name="T:FM.IceLink.CreateSuccessArgs">
             <summary>
             Arguments for the create success event.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreateSuccessArgs.Link">
             <summary>
             Gets or sets the active link.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreateSuccessArgs.OfferAnswer">
             <summary>
             Gets or sets the generated offer/answer. Must be sent using a third-party signalling
             mechanism to the relevant peer.
             </summary>
            </member>
        <member name="M:FM.IceLink.CreateSuccessArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.CreateSuccessArgs.ToJson(FM.IceLink.CreateSuccessArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="createSuccessArgs">The create success arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.CreateSuccessArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="createSuccessArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized create success arguments.</returns>
            </member>
        <member name="T:FM.IceLink.Candidate">
             <summary>
             Information about a discovered candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.Candidate.HostTypePreference">
             <summary>
             Gets or sets the default type preference for a
             host candidate. Defaults to 126.
             </summary>
            </member>
        <member name="P:FM.IceLink.Candidate.ServerReflexiveTypePreference">
             <summary>
             Gets or sets the default type preference for a
             host candidate. Defaults to 100.
             </summary>
            </member>
        <member name="P:FM.IceLink.Candidate.PeerReflexiveTypePreference">
             <summary>
             Gets or sets the default type preference for a
             host candidate. Defaults to 110.
             </summary>
            </member>
        <member name="P:FM.IceLink.Candidate.RelayTypePreference">
             <summary>
             Gets or sets the default type preference for a
             host candidate. Defaults to 0.
             </summary>
            </member>
        <member name="P:FM.IceLink.Candidate.Type">
             <summary>
             Gets or sets the candidate type.
             </summary>
            </member>
        <member name="P:FM.IceLink.Candidate.SdpMediaIndex">
             <summary>
             Gets or sets the index of the media stream for which this candidate is valid.
             </summary>
            </member>
        <member name="P:FM.IceLink.Candidate.SdpCandidateAttribute">
             <summary>
             Gets or sets the SDP attribute describing the discovered candidate.
             </summary>
            </member>
        <member name="M:FM.IceLink.Candidate.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Candidate.ToJson(FM.IceLink.Candidate)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="candidate">The candidate to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="candidateJson">The JSON to deserialize.</param>
             <returns>The deserialized candidate.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.ToJsonMultiple(FM.IceLink.Candidate[])">
             <summary>
             Serializes an array of instances to JSON.
             </summary>
             <param name="candidates">The candidates to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.FromJsonMultiple(System.String)">
             <summary>
             Deserializes an array of instances from JSON.
             </summary>
             <param name="candidatesJson">The JSON to deserialize.</param>
             <returns>The deserialized candidates.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.TypeToJson(FM.IceLink.CandidateType)">
             <summary>
             Serializes a candidate type to JSON.
             </summary>
             <param name="candidateType">The candidate type to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.TypeFromJson(System.String)">
             <summary>
             Deserializes a candidate type from JSON.
             </summary>
             <param name="candidateTypeJson">The JSON to deserialize.</param>
             <returns>The deserialized candidate type.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.TypesToJsonMultiple(FM.IceLink.CandidateType[])">
             <summary>
             Serializes an array of candidate types to JSON.
             </summary>
             <param name="candidateTypes">The candidate types to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.TypesFromJsonMultiple(System.String)">
             <summary>
             Deserializes an array of candidate types from JSON.
             </summary>
             <param name="candidateTypesJson">The JSON to deserialize.</param>
             <returns>The deserialized candidate types.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.ModeToJson(FM.IceLink.CandidateMode)">
             <summary>
             Serializes a candidate mode to JSON.
             </summary>
             <param name="candidateMode">The candidate mode to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.ModeFromJson(System.String)">
             <summary>
             Deserializes a candidate mode from JSON.
             </summary>
             <param name="candidateModeJson">The JSON to deserialize.</param>
             <returns>The deserialized candidate mode.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.ModesToJsonMultiple(FM.IceLink.CandidateMode[])">
             <summary>
             Serializes an array of candidate modes to JSON.
             </summary>
             <param name="candidateModes">The candidate modes to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.Candidate.ModesFromJsonMultiple(System.String)">
             <summary>
             Deserializes an array of candidate modes from JSON.
             </summary>
             <param name="candidateModesJson">The JSON to deserialize.</param>
             <returns>The deserialized candidate modes.</returns>
            </member>
        <member name="T:FM.IceLink.Crypto">
             <summary>
             Cryptographic functions used by IceLink.
             </summary>
            </member>
        <member name="M:FM.IceLink.Crypto.SecureRandom(System.Int32)">
             <summary>
             Generates a cryptographically strong sequence of bytes.
             </summary>
             <param name="length">The number of bytes to generate.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Crypto.EncryptAes128Cbc(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Encrypts data using AES-128 CBC.
             </summary>
             <param name="key">The key.</param>
             <param name="iv">The initialization vector.</param>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="length">The length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Crypto.EncryptAes256Cbc(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Encrypts data using AES-256 CBC.
             </summary>
             <param name="key">The key.</param>
             <param name="iv">The initialization vector.</param>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="length">The length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Crypto.DecryptAes128Cbc(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Decrypts data using AES-128 CBC.
             </summary>
             <param name="key">The key.</param>
             <param name="iv">The initialization vector.</param>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="length">The length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Crypto.DecryptAes256Cbc(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Decrypts data using AES-256 CBC.
             </summary>
             <param name="key">The key.</param>
             <param name="iv">The initialization vector.</param>
             <param name="input">The input.</param>
             <param name="inputOffset">The input offset.</param>
             <param name="output">The output.</param>
             <param name="outputOffset">The output offset.</param>
             <param name="length">The length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Crypto.CreateRsaKey">
             <summary>
             Creates an RSA key.
             </summary>
             <returns>An RSA key.</returns>
            </member>
        <member name="M:FM.IceLink.Crypto.SignRsaMd5Sha1(System.Byte[],FM.IceLink.RSAKey)">
             <summary>
             Signs an MD5/SHA-1 hash using a specified key.
             </summary>
             <param name="md5Sha1">The MD5/SHA-1 hash.</param>
             <param name="privateKey">The private key.</param>
             <returns>
             The output byte array.
             </returns>
            </member>
        <member name="M:FM.IceLink.Crypto.VerifyRsaMd5Sha1(System.Byte[],System.Byte[],FM.IceLink.RSAKey)">
             <summary>
             Verifies an MD5/SHA-1 hash using a specified key and signature.
             </summary>
             <param name="md5Sha1">The MD5/SHA-1 hash.</param>
             <param name="signature">The input signature.</param>
             <param name="publicKey">The public key.</param>
             <returns>
               <c>true</c> if the signature is valid; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.Crypto.SignRsaSha1(System.Byte[],FM.IceLink.RSAKey)">
             <summary>
             Signs a SHA-1 hash using a specified key.
             </summary>
             <param name="sha1">The SHA-1 hash.</param>
             <param name="privateKey">The private key.</param>
             <returns>
             The output byte array.
             </returns>
            </member>
        <member name="M:FM.IceLink.Crypto.VerifyRsaSha1(System.Byte[],System.Byte[],FM.IceLink.RSAKey)">
             <summary>
             Verifies a signature using a specified key and SHA-1 hash.
             </summary>
             <param name="sha1">The SHA-1 hash.</param>
             <param name="signature">The input signature.</param>
             <param name="publicKey">The public key.</param>
             <returns>
               <c>true</c> if the signature is valid; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.Crypto.SignRsaSha256(System.Byte[],FM.IceLink.RSAKey)">
             <summary>
             Signs a SHA-256 hash using a specified key.
             </summary>
             <param name="sha256">The SHA-256 hash.</param>
             <param name="privateKey">The private key.</param>
             <returns>
             The output byte array.
             </returns>
            </member>
        <member name="M:FM.IceLink.Crypto.VerifyRsaSha256(System.Byte[],System.Byte[],FM.IceLink.RSAKey)">
             <summary>
             Verifies a signature using a specified key and SHA-256 hash.
             </summary>
             <param name="sha256">The SHA-256 hash.</param>
             <param name="signature">The input signature.</param>
             <param name="publicKey">The public key.</param>
             <returns>
               <c>true</c> if the signature is valid; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.Crypto.EncryptRsa(System.Byte[],FM.IceLink.RSAKey)">
             <summary>
             Encrypts a value using a specified public key.
             </summary>
             <param name="data">The input byte array.</param>
             <param name="publicKey">The public key.</param>
             <returns>
             The output byte array.
             </returns>
            </member>
        <member name="M:FM.IceLink.Crypto.DecryptRsa(System.Byte[],FM.IceLink.RSAKey)">
             <summary>
             Decrypts a value using a specified private key.
             </summary>
             <param name="data">The input byte array.</param>
             <param name="privateKey">The private key.</param>
             <returns>
             The output byte array.
             </returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetMd5Hash(System.String)">
             <summary>
             Computes the MD5 hash of a given string.
             </summary>
             <param name="s">The input string.</param>
             <returns>The MD5 hash.</returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetMd5Hash(System.Byte[])">
             <summary>
             Computes the MD5 hash of a given byte array.
             </summary>
             <param name="data">The input byte array.</param>
             <returns>The MD5 hash.</returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetSha1Hash(System.String)">
             <summary>
             Computes the SHA-1 hash of a given string.
             </summary>
             <param name="s">The input string.</param>
             <returns>The SHA-1 hash.</returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetSha1Hash(System.Byte[])">
             <summary>
             Computes the SHA-1 hash of a given byte array.
             </summary>
             <param name="data">The input byte array.</param>
             <returns>The SHA-1 hash.</returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetMd5Sha1Hash(System.String)">
             <summary>
             Computes the MD5/SHA-1 hash of a given string.
             </summary>
             <param name="s">The input string.</param>
             <returns>The MD5/SHA-1 hash.</returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetMd5Sha1Hash(System.Byte[])">
             <summary>
             Computes the MD5/SHA-1 hash of a given byte array.
             </summary>
             <param name="data">The input byte array.</param>
             <returns>The MD5/SHA-1 hash.</returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetSha256Hash(System.String)">
             <summary>
             Computes the SHA-256 hash of a given string.
             </summary>
             <param name="s">The input string.</param>
             <returns>The SHA-256 hash.</returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetSha256Hash(System.Byte[])">
             <summary>
             Computes the SHA-256 hash of a given byte array.
             </summary>
             <param name="data">The input byte array.</param>
             <returns>The SHA-256 hash.</returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetHmacMd5(System.Byte[],System.Byte[])">
             <summary>
             Computes the HMAC using the MD5 hash function.
             </summary>
             <param name="key">The secret key.</param>
             <param name="data">The input buffer.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Crypto.GetHmacSha1(System.Byte[],System.Byte[],System.Int32,System.Int32)">
             <summary>
             Computes the HMAC using the SHA-1 hash function.
             </summary>
             <param name="key">The secret key.</param>
             <param name="data">The input buffer.</param>
             <param name="offset">The input buffer offset.</param>
             <param name="length">The input buffer length.</param>
             <returns></returns>
            </member>
        <member name="F:FM.IceLink.BigInteger.length">
             <summary>
             The Length of this BigInteger
             </summary>
            </member>
        <member name="F:FM.IceLink.BigInteger.data">
             <summary>
             The data for this BigInteger
             </summary>
            </member>
        <member name="F:FM.IceLink.BigInteger.DEFAULT_LEN">
             <summary>
             Default length of a BigInteger in bytes
             </summary>
            </member>
        <member name="F:FM.IceLink.BigInteger.smallPrimes">
             <summary>
            		Table of primes below 2000.
             </summary>
             <remarks>
            		<para>
            		This table was generated using Mathematica 4.1 using the following function:
            		</para>
            		<para>
            			<code>
            			PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            			PrimeTable [6000]
            			</code>
            		</para>
             </remarks>
            </member>
        <member name="T:FM.IceLink.BigInteger.RandomGenerator">
             <summary>
             Platform-specific random number generator.
             </summary>
            </member>
        <member name="M:FM.IceLink.BigInteger.RandomGenerator.#ctor">
             <summary>
             Creates a new random generator.
             </summary>
            </member>
        <member name="M:FM.IceLink.BigInteger.RandomGenerator.GetBytes(System.Byte[])">
             <summary>
             Generates random number data into a byte array.
             </summary>
             <param name="bytes"></param>
            </member>
        <member name="M:FM.IceLink.BigInteger.GenerateRandom(System.Int32,FM.IceLink.BigInteger.RandomGenerator)">
             <summary>
             Generates a new, random BigInteger of the specified length.
             </summary>
             <param name="bits">The number of bits for the new number.</param>
             <param name="rng">A random number generator to use to obtain the bits.</param>
             <returns>A random number of the specified length.</returns>
            </member>
        <member name="M:FM.IceLink.BigInteger.GenerateRandom(System.Int32)">
             <summary>
             Generates a new, random BigInteger of the specified length using the default RNG crypto service provider.
             </summary>
             <param name="bits">The number of bits for the new number.</param>
             <returns>A random number of the specified length.</returns>
            </member>
        <member name="M:FM.IceLink.BigInteger.Randomize(FM.IceLink.BigInteger.RandomGenerator)">
             <summary>
             Randomizes the bits in "this" from the specified RNG.
             </summary>
             <param name="rng">A RNG.</param>
            </member>
        <member name="M:FM.IceLink.BigInteger.Randomize">
             <summary>
             Randomizes the bits in "this" from the default RNG.
             </summary>
            </member>
        <member name="M:FM.IceLink.BigInteger.TestBit(System.UInt32)">
             <summary>
             Tests if the specified bit is 1.
             </summary>
             <param name="bitNum">The bit to test. The least significant bit is 0.</param>
             <returns>True if bitNum is set to 1, else false.</returns>
            </member>
        <member name="M:FM.IceLink.BigInteger.Normalize">
             <summary>
                 Normalizes this by setting the length to the actual number of
                 uints used in data and by setting the sign to Sign.Zero if the
                 value of this is 0.
             </summary>
            </member>
        <member name="M:FM.IceLink.BigInteger.Incr2">
             <summary>
             Increments this by two
             </summary>
            </member>
        <member name="F:FM.IceLink.BigInteger.ConfidenceFactor.ExtraLow">
             <summary>
             Only suitable for development use, probability of failure may be greater than 1/2^20.
             </summary>
            </member>
        <member name="F:FM.IceLink.BigInteger.ConfidenceFactor.Low">
             <summary>
             Suitable only for transactions which do not require forward secrecy.  Probability of failure about 1/2^40
             </summary>
            </member>
        <member name="F:FM.IceLink.BigInteger.ConfidenceFactor.Medium">
             <summary>
             Designed for production use. Probability of failure about 1/2^80.
             </summary>
            </member>
        <member name="F:FM.IceLink.BigInteger.ConfidenceFactor.High">
             <summary>
             Suitable for sensitive data. Probability of failure about 1/2^160.
             </summary>
            </member>
        <member name="F:FM.IceLink.BigInteger.ConfidenceFactor.ExtraHigh">
             <summary>
             Use only if you have lots of time! Probability of failure about 1/2^320.
             </summary>
            </member>
        <member name="F:FM.IceLink.BigInteger.ConfidenceFactor.Provable">
             <summary>
             Only use methods which generate provable primes. Not yet implemented.
             </summary>
            </member>
        <member name="M:FM.IceLink.BigInteger.PrimalityTests.RabinMillerTest(FM.IceLink.BigInteger,FM.IceLink.BigInteger.ConfidenceFactor)">
             <summary>
                 Probabilistic prime test based on Rabin-Miller's test
             </summary>
             <param name="bi" type="BigInteger.BigInteger">
                 <para>
                     The number to test.
                 </para>
             </param>
             <param name="confidence" type="int">
                 <para>
            	The number of chosen bases. The test has at least a
            	1/4^confidence chance of falsely returning True.
                 </para>
             </param>
             <returns>
            	<para>
            		True if "this" is a strong pseudoprime to randomly chosen bases.
            	</para>
            	<para>
            		False if "this" is definitely NOT prime.
            	</para>
             </returns>
            </member>
        <member name="M:FM.IceLink.BigInteger.PrimeGeneratorBase.PostTrialDivisionTests(FM.IceLink.BigInteger)">
             <summary>
             Performs primality tests on bi, assumes trial division has been done.
             </summary>
             <param name="bi">A BigInteger that has been subjected to and passed trial division</param>
             <returns>False if bi is composite, true if it may be prime.</returns>
             <remarks>The speed of this method is dependent on Confidence</remarks>
            </member>
        <member name="T:FM.IceLink.BigInteger.Kernel">
             <summary>
             Low level functions for the BigInteger
             </summary>
            </member>
        <member name="M:FM.IceLink.BigInteger.Kernel.AddSameSign(FM.IceLink.BigInteger,FM.IceLink.BigInteger)">
             <summary>
             Adds two numbers with the same sign.
             </summary>
             <param name="bi1">A BigInteger</param>
             <param name="bi2">A BigInteger</param>
             <returns>bi1 + bi2</returns>
            </member>
        <member name="M:FM.IceLink.BigInteger.Kernel.Compare(FM.IceLink.BigInteger,FM.IceLink.BigInteger)">
             <summary>
             Compares two BigInteger
             </summary>
             <param name="bi1">A BigInteger</param>
             <param name="bi2">A BigInteger</param>
             <returns>The sign of bi1 - bi2</returns>
            </member>
        <member name="M:FM.IceLink.BigInteger.Kernel.SingleByteDivideInPlace(FM.IceLink.BigInteger,System.UInt32)">
             <summary>
             Performs n / d and n % d in one operation.
             </summary>
             <param name="n">A BigInteger, upon exit this will hold n / d</param>
             <param name="d">The divisor</param>
             <returns>n % d</returns>
            </member>
        <member name="M:FM.IceLink.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
             <summary>
             Multiplies the data in x [xOffset:xOffset+xLen] by
             y [yOffset:yOffset+yLen] and puts it into
             d [dOffset:dOffset+xLen+yLen].
             </summary>
             <remarks>
             This code is unsafe! It is the caller's responsibility to make
             sure that it is safe to access x [xOffset:xOffset+xLen],
             y [yOffset:yOffset+yLen], and d [dOffset:dOffset+xLen+yLen].
             </remarks>
            </member>
        <member name="M:FM.IceLink.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
             <summary>
             Multiplies the data in x [xOffset:xOffset+xLen] by
             y [yOffset:yOffset+yLen] and puts the low mod words into
             d [dOffset:dOffset+mod].
             </summary>
             <remarks>
             This code is unsafe! It is the caller's responsibility to make
             sure that it is safe to access x [xOffset:xOffset+xLen],
             y [yOffset:yOffset+yLen], and d [dOffset:dOffset+mod].
             </remarks>
            </member>
        <member name="T:FM.IceLink.EventType">
             <summary>
             An IceLink event type.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.BeforeBinding">
             <summary>
             Indicates that a STUN binding request is about to be processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.BeforeAllocate">
             <summary>
             Indicates that a TURN allocate request is about to be processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.BeforeRefresh">
             <summary>
             Indicates that a TURN refresh request is about to be processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.BeforeCreatePermission">
             <summary>
             Indicates that a TURN create-permission request is about to be processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.BeforeSend">
             <summary>
             Indicates that a TURN allocation is about to send data.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.BeforeReceive">
             <summary>
             Indicates that a TURN allocation is about to receive data.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.BeforeConnect">
             <summary>
             Indicates that a TURN connect request is about to be processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.BeforeConnectionBind">
             <summary>
             Indicates that a TURN connection-bind request is about to be processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.BeforeChannelBind">
             <summary>
             Indicates that a TURN channel-bind request is about to be processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.AfterBinding">
             <summary>
             Indicates that a STUN binding request has been processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.AfterAllocate">
             <summary>
             Indicates that a TURN allocate request has been processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.AfterRefresh">
             <summary>
             Indicates that a TURN refresh request has been processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.AfterCreatePermission">
             <summary>
             Indicates that a TURN create-permission request has been processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.AfterSend">
             <summary>
             Indicates that a TURN allocation has sent data.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.AfterReceive">
             <summary>
             Indicates that a TURN allocation has received data.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.AfterConnect">
             <summary>
             Indicates that a TURN connect request has been processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.AfterConnectionBind">
             <summary>
             Indicates that a TURN connection-bind request has been processed.
             </summary>
            </member>
        <member name="F:FM.IceLink.EventType.AfterChannelBind">
             <summary>
             Indicates that a TURN channel-bind request has been processed.
             </summary>
            </member>
        <member name="T:FM.IceLink.BaseMediaStreamOutputArgs">
             <summary>
             Base arguments for media stream events.
             </summary>
            </member>
        <member name="P:FM.IceLink.BaseMediaStreamOutputArgs.MediaStream">
             <summary>
             Gets or sets the media stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentReceiveRTPArgs">
             <summary>
             ICE agent receive RTP arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveRTPArgs.MediaStream">
             <summary>
             Gets or sets the receiving media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveRTPArgs.MediaFormat">
             <summary>
             Gets or sets the receiving media format.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveRTPArgs.Packet">
             <summary>
             Gets or sets the packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveRTPArgs.StreamIndex">
             <summary>
             Gets or sets the stream index.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveRTPArgs.MediaIndex">
             <summary>
             Gets or sets the media index.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentReceiveRTCPArgs">
             <summary>
             ICE agent receive-RTCP arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveRTCPArgs.MediaStream">
             <summary>
             Gets or sets the receiving media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveRTCPArgs.Packets">
             <summary>
             Gets or sets the packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveRTCPArgs.StreamIndex">
             <summary>
             Gets or sets the stream index.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentReceiveRTCPArgs.MediaIndex">
             <summary>
             Gets or sets the media index.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICELocalCandidateArgs">
             <summary>
             ICE on-candidate arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICELocalCandidateArgs.Candidate">
             <summary>
             Gets or sets the candidate.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEPeerCloseArgs">
             <summary>
             ICE peer-close arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerCloseArgs.Reason">
             <summary>
             Gets or sets the reason given for closing the link.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEPeerRTPPacketArgs">
             <summary>
             ICE RTP-packet arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerRTPPacketArgs.MediaStream">
             <summary>
             Gets or sets the media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerRTPPacketArgs.MediaFormat">
             <summary>
             Gets or sets the media format.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerRTPPacketArgs.Packet">
             <summary>
             Gets or sets the decrypted RTP packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerRTPPacketArgs.LocalCandidate">
             <summary>
             Gets or sets the local candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerRTPPacketArgs.RemoteAddress">
             <summary>
             Gets or sets the remote address.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEPeerRTCPPacketsArgs">
             <summary>
             ICE RTCP-packet arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerRTCPPacketsArgs.MediaStream">
             <summary>
             Gets or sets the media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerRTCPPacketsArgs.Packets">
             <summary>
             Gets or sets the RTCP packets.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerRTCPPacketsArgs.LocalCandidate">
             <summary>
             Gets or sets the local candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEPeerRTCPPacketsArgs.RemoteAddress">
             <summary>
             Gets or sets the remote address.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESendRequestBeforeSendArgs">
             <summary>
             ICE send-request before-send arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestBeforeSendArgs.MessageBroker">
             <summary>
             Gets or sets the message broker.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestBeforeSendArgs.Request">
             <summary>
             Gets or sets the original request.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestBeforeSendArgs.Address">
             <summary>
             Gets or sets the original address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestBeforeSendArgs.Attempt">
             <summary>
             Gets or sets the original attempt number.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestBeforeSendArgs.TurnRelay">
             <summary>
             Gets or sets the original TURN relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestBeforeSendArgs.Cancel">
             <summary>
             Gets or sets whether to cancel the request.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentInitArgs">
             <summary>
             ICE agent opening arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentInitArgs.Initiator">
             <summary>
             Gets or sets whether we are the initiator.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentUpArgs">
             <summary>
             ICE agent open arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentUpArgs.Initiator">
             <summary>
             Gets or sets whether we are the initiator.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentUpArgs.MediaStreams">
             <summary>
             Gets or sets the media streams.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEDisconnectArgs">
             <summary>
             ICE disconnect arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEDisconnectArgs.Reason">
             <summary>
             Gets or sets the reason for disconnecting.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEDisconnectArgs.OnComplete">
             <summary>
             Gets or sets the callback to execute on completion.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEDisconnectArgs.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICEDisconnectArgs" /> class.
             </summary>
             <param name="reason">The reason for disconnecting.</param>
            </member>
        <member name="T:FM.IceLink.ICEDisconnectCompleteArgs">
             <summary>
             ICE disconnect complete arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEDisconnectCompleteArgs.Exception">
             <summary>
             Gets or sets the exception that occurred while disconnecting.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEDisconnectCompleteArgs.Reason">
             <summary>
             Gets or sets the original reason.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentDownArgs">
             <summary>
             ICE agent close arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentDownArgs.Reason">
             <summary>
             Gets or sets the reason the link was closed.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentDownArgs.DeadStreamDetected">
             <summary>
             Gets or sets whether a dead stream was detected.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentDownArgs.RelayFailureDetected">
             <summary>
             Gets or sets whether a relay failure was detected.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentCandidateArgs">
             <summary>
             ICE agent candidate arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgentCandidateArgs.Candidate">
             <summary>
             Gets or sets the candidate.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECreatePermissionArgs">
             <summary>
             ICE create-permission arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreatePermissionArgs.RemoteAddress">
             <summary>
             Gets or sets the remote address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreatePermissionArgs.OnSuccess">
             <summary>
             Gets or sets the callback to execute on success.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreatePermissionArgs.OnFailure">
             <summary>
             Gets or sets the callback to execute on failure.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreatePermissionArgs.OnComplete">
             <summary>
             Gets or sets the callback to execute on completion.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECreatePermissionArgs.#ctor(FM.IceLink.TransportAddress)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICECreatePermissionArgs" /> class.
             </summary>
             <param name="remoteAddress">The remote address.</param>
            </member>
        <member name="T:FM.IceLink.ICECreatePermissionCompleteArgs">
             <summary>
             ICE create-permission complete arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreatePermissionCompleteArgs.RemoteAddress">
             <summary>
             Gets or sets the original remote address.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECreatePermissionFailureArgs">
             <summary>
             ICE create-permission failure arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreatePermissionFailureArgs.RemoteAddress">
             <summary>
             Gets or sets the original remote address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreatePermissionFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECreatePermissionSuccessArgs">
             <summary>
             ICE create-permission success arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreatePermissionSuccessArgs.RemoteAddress">
             <summary>
             Gets or sets the original remote address.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESelectedValidCandidatePairArgs">
             <summary>
             ICE selected-valid-candidate-pair arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESelectedValidCandidatePairArgs.CandidatePair">
             <summary>
             Gets or sets the candidate pair.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESelectedValidCandidatePairArgs.MediaStream">
             <summary>
             Gets or sets the media stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESendResponseArgs">
             <summary>
             ICE send-response arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseArgs.Response">
             <summary>
             Gets or sets the response.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseArgs.Address">
             <summary>
             Gets or sets the address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseArgs.TurnRelay">
             <summary>
             Gets or sets the TURN relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseArgs.OnSuccess">
             <summary>
             Gets or sets the callback that executes on success.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseArgs.OnFailure">
             <summary>
             Gets or sets the callback that executes on failure.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseArgs.OnComplete">
             <summary>
             Gets or sets the callback that executes on complete.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESendResponseArgs.#ctor(FM.IceLink.STUNMessage,FM.IceLink.TransportAddress)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICESendResponseArgs" /> class.
             </summary>
             <param name="response">The response.</param>
             <param name="address">The address.</param>
            </member>
        <member name="T:FM.IceLink.ICESendResponseCompleteArgs">
             <summary>
             ICE send-response complete arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseCompleteArgs.Response">
             <summary>
             Gets or sets the original response.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseCompleteArgs.Address">
             <summary>
             Gets or sets the original address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseCompleteArgs.TurnRelay">
             <summary>
             Gets or sets the original turn relay.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESendResponseFailureArgs">
             <summary>
             ICE send-response failure arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseFailureArgs.Response">
             <summary>
             Gets or sets the original response.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseFailureArgs.Address">
             <summary>
             Gets or sets the original address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseFailureArgs.TurnRelay">
             <summary>
             Gets or sets the original turn relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESendResponseSuccessArgs">
             <summary>
             ICE send-response success arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseSuccessArgs.Response">
             <summary>
             Gets or sets the original response.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseSuccessArgs.Address">
             <summary>
             Gets or sets the original address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendResponseSuccessArgs.TurnRelay">
             <summary>
             Gets or sets the original turn relay.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESendRequestArgs">
             <summary>
             ICE send-request arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.EarliestTimeToSend">
             <summary>
             Gets or sets the earliest time this request can be sent/resent in milliseconds since 1970.
             </summary>
             <value>
             The earliest time to send.
             </value>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.Request">
             <summary>
             Gets or sets the request.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.Address">
             <summary>
             Gets or sets the address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.Attempt">
             <summary>
             Gets or sets the attempt number.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.MaxAttempts">
             <summary>
             Gets or sets the maximum allowed number of retries.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.TurnRelay">
             <summary>
             Gets or sets the TURN relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.OnSuccess">
             <summary>
             Gets or sets the callback to execute on success.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.OnFailure">
             <summary>
             Gets or sets the callback to execute on failure.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.OnComplete">
             <summary>
             Gets or sets the callback to execute on complete.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestArgs.OnBeforeSend">
             <summary>
             Gets or sets the callback to execute before sending.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICESendRequestArgs.#ctor(FM.IceLink.STUNMessage,FM.IceLink.TransportAddress)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICESendRequestArgs" /> class.
             </summary>
             <param name="request">The request.</param>
             <param name="address">The address.</param>
            </member>
        <member name="T:FM.IceLink.ICESendRequestCompleteArgs">
             <summary>
             ICE send-request complete arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestCompleteArgs.MessageBroker">
             <summary>
             Gets or sets the message broker.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestCompleteArgs.Request">
             <summary>
             Gets or sets the original request.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestCompleteArgs.Address">
             <summary>
             Gets or sets the original address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestCompleteArgs.Attempt">
             <summary>
             Gets or sets the original attempt number.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestCompleteArgs.MaxAttempts">
             <summary>
             Gets or sets the original maximum allowed number of retries.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestCompleteArgs.TurnRelay">
             <summary>
             Gets or sets the original TURN relay.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESendRequestFailureArgs">
             <summary>
             ICE send-request failure arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestFailureArgs.MessageBroker">
             <summary>
             Gets or sets the message broker.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestFailureArgs.Request">
             <summary>
             Gets or sets the original request.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestFailureArgs.Address">
             <summary>
             Gets or sets the original address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestFailureArgs.Attempt">
             <summary>
             Gets or sets the original attempt number.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestFailureArgs.MaxAttempts">
             <summary>
             Gets or sets the original maximum allowed number of retries.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestFailureArgs.TurnRelay">
             <summary>
             Gets or sets the original TURN relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestFailureArgs.Stopped">
             <summary>
             Gets or sets whether the request was stopped.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICESendRequestSuccessArgs">
             <summary>
             ICE send-request success arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.MessageBroker">
             <summary>
             Gets or sets the message broker.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.Request">
             <summary>
             Gets or sets the original request.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.Address">
             <summary>
             Gets or sets the original address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.Attempt">
             <summary>
             Gets or sets the original attempt number.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.MaxAttempts">
             <summary>
             Gets or sets the original maximum allowed number of retries.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.TurnRelay">
             <summary>
             Gets or sets the original TURN relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.Response">
             <summary>
             Gets or sets the response.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.RemoteAddress">
             <summary>
             Gets or sets the remote address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.Relayed">
             <summary>
             Gets or sets a value indicating whether the response was relayed.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICESendRequestSuccessArgs.DiscardedPacketCount">
             <summary>
             Gets or sets the number of discarded packets.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEServerBindArgs">
             <summary>
             ICE server-bind arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindArgs.HostCandidate">
             <summary>
             Gets or sets the host candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindArgs.Index">
             <summary>
             Gets or sets the index.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindArgs.ServerAddresses">
             <summary>
             Gets or sets the server addresses.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindArgs.ServerAddress">
             <summary>
             Gets the server address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindArgs.OnSuccess">
             <summary>
             Gets or sets the callback to execute on success.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindArgs.OnFailure">
             <summary>
             Gets or sets the callback to execute on failure.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindArgs.OnComplete">
             <summary>
             Gets or sets the callback to execute on complete.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEServerBindArgs.#ctor(FM.IceLink.ICEUdpHostCandidate,FM.IceLink.TransportAddress[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICEServerBindArgs" /> class.
             </summary>
             <param name="hostCandidate">The host candidate.</param>
             <param name="serverAddresses">The server addresses.</param>
            </member>
        <member name="T:FM.IceLink.ICEServerBindCompleteArgs">
             <summary>
             ICE server-bind complete arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindCompleteArgs.ServerAddress">
             <summary>
             Gets or sets the original server address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindCompleteArgs.HostCandidate">
             <summary>
             Gets or sets the original host candidate.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEServerBindFailureArgs">
             <summary>
             ICE server-bind failure arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindFailureArgs.ServerAddress">
             <summary>
             Gets or sets the original server address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindFailureArgs.HostCandidate">
             <summary>
             Gets or sets the original host candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEServerBindSuccessArgs">
             <summary>
             ICE server-bind success arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindSuccessArgs.ServerAddress">
             <summary>
             Gets or sets the original server address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindSuccessArgs.HostCandidate">
             <summary>
             Gets or sets the original host candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerBindSuccessArgs.ServerReflexiveCandidate">
             <summary>
             Gets or sets the server reflexive candidate.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEServerAllocateCompleteArgs">
             <summary>
             ICE server-allocate complete arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateCompleteArgs.ServerAddress">
             <summary>
             Gets or sets the original server address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateCompleteArgs.HostCandidate">
             <summary>
             Gets or sets the original host candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateCompleteArgs.Username">
             <summary>
             Gets or sets the original username.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateCompleteArgs.Realm">
             <summary>
             Gets or sets the original realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateCompleteArgs.Password">
             <summary>
             Gets or sets the original password.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEServerAllocateFailureArgs">
             <summary>
             ICE server-allocate failure arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateFailureArgs.ServerAddress">
             <summary>
             Gets or sets the original server address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateFailureArgs.HostCandidate">
             <summary>
             Gets or sets the original host candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateFailureArgs.Username">
             <summary>
             Gets or sets the original username.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateFailureArgs.Realm">
             <summary>
             Gets or sets the original realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateFailureArgs.Password">
             <summary>
             Gets or sets the original password.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEServerAllocateSuccessArgs">
             <summary>
             ICE server-allocate success arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateSuccessArgs.ServerAddress">
             <summary>
             Gets or sets the original server address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateSuccessArgs.HostCandidate">
             <summary>
             Gets or sets the original host candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateSuccessArgs.Username">
             <summary>
             Gets or sets the original username.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateSuccessArgs.Realm">
             <summary>
             Gets or sets the original realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateSuccessArgs.Password">
             <summary>
             Gets or sets the original password.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateSuccessArgs.ServerReflexiveCandidate">
             <summary>
             Gets or sets the server reflexive candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateSuccessArgs.RelayedCandidate">
             <summary>
             Gets or sets the relayed candidate.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAcceptArgs">
             <summary>
             ICE connect arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAcceptArgs.OfferAnswer">
             <summary>
             Gets or sets the offer/answer.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAcceptArgs.OnSuccess">
             <summary>
             Gets or sets the callback to execute on success.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAcceptArgs.OnFailure">
             <summary>
             Gets or sets the callback to execute on failure.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAcceptArgs.OnComplete">
             <summary>
             Gets or sets the callback to execute on completion.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEAcceptArgs.#ctor(FM.IceLink.OfferAnswer)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICEAcceptArgs" /> class.
             </summary>
             <param name="offerAnswer">The offer/answer.</param>
            </member>
        <member name="T:FM.IceLink.ICEAcceptCompleteArgs">
             <summary>
             ICE accept complete arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAcceptCompleteArgs.OfferAnswer">
             <summary>
             Gets or sets the original offer/answer.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAcceptFailureArgs">
             <summary>
             ICE accept failure arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAcceptFailureArgs.OfferAnswer">
             <summary>
             Gets or sets the original offer/answer.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAcceptFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAcceptSuccessArgs">
             <summary>
             ICE accept success arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAcceptSuccessArgs.OfferAnswer">
             <summary>
             Gets or sets the original offer/answer.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAcceptSuccessArgs.MediaStreams">
             <summary>
             Gets or sets the media streams.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEServerAllocateArgs">
             <summary>
             ICE server-allocate arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.HostCandidate">
             <summary>
             Gets or sets the host candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.Index">
             <summary>
             Gets or sets the index.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.ServerAddresses">
             <summary>
             Gets or sets the server addresses.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.Usernames">
             <summary>
             Gets or sets the usernames.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.Realms">
             <summary>
             Gets or sets the realms.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.Passwords">
             <summary>
             Gets or sets the passwords.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.ServerAddress">
             <summary>
             Gets the server address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.Username">
             <summary>
             Gets the username.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.Password">
             <summary>
             Gets the password.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.Realm">
             <summary>
             Gets the realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.OnSuccess">
             <summary>
             Gets or sets the callback to execute on success.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.OnFailure">
             <summary>
             Gets or sets the callback to execute on failure.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEServerAllocateArgs.OnComplete">
             <summary>
             Gets or sets the callback to execute on complete.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEServerAllocateArgs.#ctor(FM.IceLink.ICEUdpHostCandidate,FM.IceLink.TransportAddress[],System.String[],System.String[],System.String[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICEServerAllocateArgs" /> class.
             </summary>
             <param name="hostCandidate">The host candidate.</param>
             <param name="serverAddresses">The server addresses.</param>
             <param name="usernames">The usernames.</param>
             <param name="realms">The realms.</param>
             <param name="passwords">The passwords.</param>
            </member>
        <member name="T:FM.IceLink.ICECheckThread">
             <summary>
             ICE check thread used for sending triggered and ordinary checks.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECheckThread.#ctor(FM.IceLink.ICEAgentRole,System.Int32,FM.EmptyFunction{FM.IceLink.ICECandidatePair},FM.EmptyAction)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICECheckThread" /> class.
             </summary>
             <param name="role">The role.</param>
             <param name="keepAliveInterval">The keep alive interval.</param>
             <param name="getWaitingCandidatePair">Callback to get the next candidate pair.</param>
             <param name="concludeProcessing">Callback to conclude processing.</param>
            </member>
        <member name="P:FM.IceLink.ICECheckThread.IsRunning">
             <summary>
             Gets a value indicating whether the thread is running.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECheckThread.Start">
             <summary>
             Starts the thread.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECheckThread.Stop">
             <summary>
             Stops the thread.
             </summary>
            </member>
        <member name="T:FM.IceLink.LocalNetwork">
             <summary>
             Local network utility methods.
             </summary>
            </member>
        <member name="M:FM.IceLink.LocalNetwork.CheckServer(FM.IceLink.CheckServerArgs)">
             <summary>
             Checks a server's accessibility by issuing a STUN binding request.
             </summary>
             <param name="checkArgs">The check arguments.</param>
            </member>
        <member name="M:FM.IceLink.LocalNetwork.GetIPAddresses(System.Boolean)">
             <summary>
             Gets a list of local IP addresses (excluding loopback).
             </summary>
             <param name="ipv6">Whether to gather IPv6 addresses.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.LocalNetwork.GetIPAddresses(System.Boolean,System.Boolean)">
             <summary>
             Gets a list of local IP addresses (excluding loopback).
             </summary>
             <param name="ipv6">Whether to gather IPv6 addresses.</param>
             <param name="allowPrivate">Whether to include private addresses.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.LocalNetwork.GetLocalAddresses(FM.IceLink.AddressType)">
             <summary>
             Gets the local addresses.
             </summary>
             <param name="addressType">The address type.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.OfferAnswer">
             <summary>
             An offer/answer for distribution to a peer client.
             </summary>
            </member>
        <member name="P:FM.IceLink.OfferAnswer.SdpMessage">
             <summary>
             Gets or sets the SDP message describing the session.
             </summary>
            </member>
        <member name="P:FM.IceLink.OfferAnswer.TieBreaker">
             <summary>
             Gets or sets the tie breaker in case of a role conflict.
             </summary>
            </member>
        <member name="P:FM.IceLink.OfferAnswer.IsOffer">
             <summary>
             Gets or sets whether this is an offer.
             </summary>
            </member>
        <member name="M:FM.IceLink.OfferAnswer.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.OfferAnswer.ToJson(FM.IceLink.OfferAnswer)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="offerAnswer">The offer/answer to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.OfferAnswer.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="offerAnswerJson">The JSON to deserialize.</param>
             <returns>The deserialized offer/answer.</returns>
            </member>
        <member name="T:FM.IceLink.RTCPAfbPacket">
             <summary>
             An RTCP Feedback PS-AFB packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPAfbPacket.FeedbackMessageTypeByte">
             <summary>
             Gets the feedback message type byte.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPAfbPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPAfbPacket" /> class.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPAfbPacket.AFBPayload">
             <summary>
             Gets or sets the Application-Layer Feedback payload (AFB).
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPAfbPacket.DeserializeFCI">
             <summary>
             Deserializes the feedback control information from the FCI payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPAfbPacket.SerializeFCI">
             <summary>
             Serializes the feedback control information to the FCI payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPPliPacket">
             <summary>
             An RTCP Feedback PS-PLI packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPPliPacket.FeedbackMessageTypeByte">
             <summary>
             Gets the feedback message type byte.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPPliPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPPliPacket" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPPliPacket.DeserializeFCI">
             <summary>
             Deserializes the feedback control information from the FCI payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPPliPacket.SerializeFCI">
             <summary>
             Serializes the feedback control information to the FCI payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPFbApplicationLayerFeedback">
             <summary>
             An Application-Layer Feedback message (AFB).
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbApplicationLayerFeedback.Payload">
             <summary>
             Gets or sets the payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPFbGenericNack">
             <summary>
             A Generic NACK feedback message.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.PacketId">
             <summary>
             Gets or sets the RTP sequence number of the lost packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus1">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 1 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus2">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 2 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus3">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 3 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus4">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 4 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus5">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 5 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus6">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 6 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus7">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 7 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus8">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 8 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus9">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 9 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus10">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 10 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus11">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 11 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus12">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 12 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus13">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 13 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus14">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 14 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus15">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 15 was lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus16">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 16 was lost.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPFbGenericNack.GetLostPacketIdPlus(System.Int32)">
             <summary>
             Gets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + value was lost.
             </summary>
             <param name="value">The value.</param>
             <returns>Whether the packet was lost.</returns>
            </member>
        <member name="M:FM.IceLink.RTCPFbGenericNack.SetLostPacketIdPlus(System.Int32,System.Boolean)">
             <summary>
             Sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + value was lost.
             </summary>
             <param name="value">The value.</param>
             <param name="lost">Whether the packet was lost.</param>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.PacketIdHandled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus1Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 1 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus2Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 2 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus3Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 3 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus4Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 4 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus5Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 5 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus6Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 6 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus7Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 7 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus8Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 8 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus9Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 9 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus10Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 10 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus11Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 11 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus12Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 12 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus13Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 13 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus14Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 14 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus15Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 15 was retransmitted.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.LostPacketIdPlus16Handled">
             <summary>
             Gets or sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + 16 was retransmitted.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPFbGenericNack.GetLostPacketIdPlusHandled(System.Int32)">
             <summary>
             Gets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + value was retransmitted.
             </summary>
             <param name="value">The value.</param>
             <returns>Whether the packet was retransmitted.</returns>
            </member>
        <member name="M:FM.IceLink.RTCPFbGenericNack.SetLostPacketIdPlusHandled(System.Int32,System.Boolean)">
             <summary>
             Sets whether the packet with ID <see cref="P:FM.IceLink.RTCPFbGenericNack.PacketId" /> + value was retransmitted.
             </summary>
             <param name="value">The value.</param>
             <param name="handled">Whether the packet was retransmitted.</param>
            </member>
        <member name="P:FM.IceLink.RTCPFbGenericNack.Handled">
             <summary>
             Gets a value indicating whether all lost packets were retransmitted.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPFbGenericNack.Flush">
             <summary>
             Updates this instance to reflect only the lost packets that
             were not retransmitted.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPFbGenericNack.GetBytes">
             <summary>
             Gets a 4-byte payload from this instance.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPFbGenericNack.ParseBytes(System.Byte[])">
             <summary>
             Parses a 4-byte payload into a Generic NACK message.
             </summary>
             <param name="genericNACKBytes">The bytes to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.RTCPGenericNackPacket">
             <summary>
             An RTCP Feedback RTP-Generic NACK packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPGenericNackPacket.GenericNACKs">
             <summary>
             Gets the set of generic NACKs.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPGenericNackPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPRtpPacket" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPGenericNackPacket.AddGenericNACK(FM.IceLink.RTCPFbGenericNack)">
             <summary>
             Adds a generic NACK.
             </summary>
             <param name="genericNACK">The generic NACK to add.</param>
            </member>
        <member name="M:FM.IceLink.RTCPGenericNackPacket.RemoveGenericNACK(FM.IceLink.RTCPFbGenericNack)">
             <summary>
             Removes a generic NACK.
             </summary>
             <param name="genericNACK">The generic NACK to remove.</param>
             <returns><c>true</c> if the generic NACK was removed; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.RTCPGenericNackPacket.DeserializeFCI">
             <summary>
             Deserializes the feedback control information from the FCI payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPGenericNackPacket.SerializeFCI">
             <summary>
             Serializes the feedback control information to the FCI payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPFeedbackPacket">
             <summary>
             An RTCP Feedback packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFeedbackPacket.FeedbackMessageType">
             <summary>
             Gets or sets the feedback message type.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFeedbackPacket.PacketSenderSynchronizationSource">
             <summary>
             Gets or sets the SSRC of the packet sender.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFeedbackPacket.MediaSourceSynchronizationSource">
             <summary>
             Gets or sets the SSRC of the media source that this
             piece of feedback information is related to.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPFeedbackPacket.FCIPayload">
             <summary>
             Gets or sets the Feedback Control Information payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPFeedbackPacket.#ctor(System.Byte)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPFeedbackPacket" /> class.
             </summary>
             <param name="feedbackMessageType">The feedback message type.</param>
            </member>
        <member name="M:FM.IceLink.RTCPFeedbackPacket.Deserialize">
             <summary>
             Deserializes the packet data from the first byte and payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPFeedbackPacket.Serialize">
             <summary>
             Serializes the packet data to the first byte and payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPFeedbackPacket.DeserializeFCI">
             <summary>
             Deserializes the feedback control information from the FCI payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPFeedbackPacket.SerializeFCI">
             <summary>
             Serializes the feedback control information to the FCI payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPPsPacket">
             <summary>
             An RTCP Feedback PS packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPPsPacket.#ctor(System.Byte)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPPsPacket" /> class.
             </summary>
             <param name="feedbackMessageType">The feedback message type.</param>
            </member>
        <member name="M:FM.IceLink.RTCPPsPacket.CreatePacket(System.Byte)">
             <summary>
             Creates a packet given the first byte.
             </summary>
             <param name="firstByte">The first byte.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.RTCPRtpPacket">
             <summary>
             An RTCP Feedback RTP packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPRtpPacket.#ctor(System.Byte)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPRtpPacket" /> class.
             </summary>
             <param name="feedbackMessageType">The feedback message type.</param>
            </member>
        <member name="M:FM.IceLink.RTCPRtpPacket.CreatePacket(System.Byte)">
             <summary>
             Creates a packet given the first byte.
             </summary>
             <param name="firstByte">The first byte.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.RTCPAppPacket">
             <summary>
             An RTCP APP packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPAppPacket.SubType">
             <summary>
             Gets or sets the subtype to allow a set of APP packets to be defined
             under one unique name, or for any application-dependent data.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPAppPacket.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPAppPacket.Name">
             <summary>
             Gets or sets a name chosen by the person defining the set of APP packets
             to be unique with respect to other APP packets this application might receive.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPAppPacket.Data">
             <summary>
             Gets or sets optional application-dependent data.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPAppPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPAppPacket" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPAppPacket.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPAppPacket" /> class.
             </summary>
             <param name="synchronizationSource">The synchronization source.</param>
            </member>
        <member name="M:FM.IceLink.RTCPAppPacket.Deserialize">
             <summary>
             Deserializes the packet data from the first byte and payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPAppPacket.Serialize">
             <summary>
             Serializes the packet data to the first byte and payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPByePacket">
             <summary>
             An RTCP BYE packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPByePacket.SynchronizationAndContributingSources">
             <summary>
             Gets or sets the synchronization and contributing sources.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPByePacket.ReasonForLeaving">
             <summary>
             Gets or sets the reason for leaving.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPByePacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPByePacket" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPByePacket.#ctor(System.Int64[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPByePacket" /> class.
             </summary>
             <param name="synchronizationAndContributingSources">The synchronization and contributing sources.</param>
            </member>
        <member name="M:FM.IceLink.RTCPByePacket.Deserialize">
             <summary>
             Deserializes the packet data from the first byte and payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPByePacket.Serialize">
             <summary>
             Serializes the packet data to the first byte and payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPReportBlock">
             <summary>
             An RTCP report block.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportBlock.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportBlock.FractionLost">
             <summary>
             Gets or sets the fraction lost according to RFC 1889.
             The value has a range of 0 (no packet loss) to 255 (all packets lost).
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportBlock.PercentLost">
             <summary>
             Gets or sets the percentage of lost packets.
             The value has a range of 0.0 (no packet loss) to 1.0 (all packets lost).
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportBlock.CumulativeNumberOfPacketsLost">
             <summary>
             Gets or sets the cumulative number of packets lost.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportBlock.ExtendedHighestSequenceNumberReceived">
             <summary>
             Gets or sets the extended highest sequence number received.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportBlock.InterarrivalJitter">
             <summary>
             Gets or sets the interarrival jitter.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportBlock.LastSenderReportTimestamp">
             <summary>
             Gets or sets the last sender report timestamp.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPReportBlock.DelaySinceLastSenderReport">
             <summary>
             Gets or sets the delay since last sender report.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPReportBlock.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPReportBlock" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPReportBlock.#ctor(System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPReportBlock" /> class.
             </summary>
             <param name="fractionLost">The fraction lost.</param>
             <param name="cumulativeNumberOfPacketsLost">The cumulative number of packets lost.</param>
             <param name="extendedHighestSequenceNumberReceived">The extended highest sequence number received.</param>
             <param name="interarrivalJitter">The interarrival jitter.</param>
             <param name="lastSenderReportTimestamp">The last sender report timestamp.</param>
             <param name="delaySinceLastSenderReport">The delay since last sender report.</param>
            </member>
        <member name="M:FM.IceLink.RTCPReportBlock.#ctor(System.Int64,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPReportBlock" /> class.
             </summary>
             <param name="synchronizationSource">The synchronization source.</param>
             <param name="fractionLost">The fraction lost.</param>
             <param name="cumulativeNumberOfPacketsLost">The cumulative number of packets lost.</param>
             <param name="extendedHighestSequenceNumberReceived">The extended highest sequence number received.</param>
             <param name="interarrivalJitter">The interarrival jitter.</param>
             <param name="lastSenderReportTimestamp">The last sender report timestamp.</param>
             <param name="delaySinceLastSenderReport">The delay since last sender report.</param>
            </member>
        <member name="M:FM.IceLink.RTCPReportBlock.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPReportBlock.GetBytes(FM.IceLink.RTCPReportBlock)">
             <summary>
             Converts an instance to a byte array.
             </summary>
             <param name="reportBlock">The report block.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPReportBlock.ParseBytes(System.Byte[])">
             <summary>
             Converts a byte array to an instance.
             </summary>
             <param name="reportBlockBytes">The report block bytes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPReportBlock.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPSdesPacket">
             <summary>
             An RTCP SDES packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSdesPacket.SourceDescriptionChunks">
             <summary>
             Gets or sets the source description chunks.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSdesPacket.Deserialize">
             <summary>
             Deserializes the packet data from the first byte and payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSdesPacket.Serialize">
             <summary>
             Serializes the packet data to the first byte and payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPSourceDescriptionChunk">
             <summary>
             An RTCP source description chunk.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSourceDescriptionChunk.SynchronizationSource">
             <summary>
             Gets or sets the SSRC/CSRC identifier.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSourceDescriptionChunk.SourceDescriptionItems">
             <summary>
             Gets or sets the source description items.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSourceDescriptionChunk.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPSourceDescriptionChunk.GetBytes(FM.IceLink.RTCPSourceDescriptionChunk)">
             <summary>
             Converts an instance to a byte array.
             </summary>
             <param name="chunk">The source description chunk.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPSourceDescriptionChunk.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Converts a byte array to an instance.
             </summary>
             <param name="data">The source data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset after parsing.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.RTCPSourceDescriptionItem">
             <summary>
             An RTCP source description item.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSourceDescriptionItem.Type">
             <summary>
             Gets or sets the type.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSourceDescriptionItem.Text">
             <summary>
             Gets or sets the text.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSourceDescriptionItem.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPSourceDescriptionItem.GetBytes(FM.IceLink.RTCPSourceDescriptionItem)">
             <summary>
             Converts an instance to a byte array.
             </summary>
             <param name="item">The source description item.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPSourceDescriptionItem.ParseBytes(System.Byte[],System.Int32,System.Int32@)">
             <summary>
             Converts a byte array to an instance.
             </summary>
             <param name="data">The source data.</param>
             <param name="offset">The offset.</param>
             <param name="offsetPlus">The offset after parsing.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.RTCPRrPacket">
             <summary>
             An RTCP RR packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPRrPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPRrPacket" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPRrPacket.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPRrPacket" /> class.
             </summary>
             <param name="synchronizationSource">The synchronization source.</param>
            </member>
        <member name="M:FM.IceLink.RTCPRrPacket.Deserialize">
             <summary>
             Deserializes the packet data from the first byte and payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPRrPacket.Serialize">
             <summary>
             Serializes the packet data to the first byte and payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPFingerprintAttribute">
             <summary>
             The SDP session attribute "fingerprint" provides an encryption
             certificate fingerprint to a remote peer for use with DTLS.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPFingerprintAttribute.HashFunction">
             <summary>
             Gets or sets the hash function (i.e. sha-256).
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPFingerprintAttribute.Fingerprint">
             <summary>
             Gets or sets the fingerprint.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPFingerprintAttribute.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPFingerprintAttribute" /> class.
             </summary>
             <param name="hashFunction">The hash function.</param>
             <param name="fingerprint">The fingerprint.</param>
            </member>
        <member name="M:FM.IceLink.SDPFingerprintAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPFingerprintAttribute" /> class.
             </summary>
             <param name="value">The attribute as a string.</param>
            </member>
        <member name="M:FM.IceLink.SDPFingerprintAttribute.GetValue">
             <summary>
             Gets the value of the attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPRtcpMuxAttribute">
             <summary>
             This attribute is used to signal that RTP and RTCP traffic should be
             multiplexed on a single port.  It is a property attribute, which does
             not take a value.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPRtcpMuxAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtcpMuxAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPRtcpMuxAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtcpMuxAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.RTCPUnknownPacket">
             <summary>
             An unknown RTCP packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPUnknownPacket.Serialize">
             <summary>
             Serializes the packet data to the first byte and payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPUnknownPacket.Deserialize">
             <summary>
             Deserializes the packet data from the first byte and payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPPacket">
             <summary>
             An RTCP packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPPacket.FirstByte">
             <summary>
             Gets or sets the first byte.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPPacket.PayloadType">
             <summary>
             Gets or sets the type of the payload.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPPacket.Payload">
             <summary>
             Gets or sets the data payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPPacket.GetBytes">
             <summary>
             Converts this packet to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPPacket.GetBytes(FM.IceLink.RTCPPacket)">
             <summary>
             Converts a packet to a byte array.
             </summary>
             <param name="packet">The packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPPacket.GetBytesMultiple(FM.IceLink.RTCPPacket[])">
             <summary>
             Converts an array of packets to a byte array.
             </summary>
             <param name="packets">The packets.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPPacket.ParseBytes(System.Byte[])">
             <summary>
             Converts a byte array to an array of packets.
             </summary>
             <param name="bytes">The byte array.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTCPPacket.Deserialize">
             <summary>
             Deserializes the packet data from the first byte and payload.
             </summary>
             <returns>This packet instance.</returns>
            </member>
        <member name="M:FM.IceLink.RTCPPacket.Serialize">
             <summary>
             Serializes the packet data to the first byte and payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTCPSrPacket">
             <summary>
             An RTCP SR packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSrPacket.Timestamp">
             <summary>
             Gets or sets the time when this report was sent (wallclock-style).
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSrPacket.NTPTimestamp">
             <summary>
             Gets or sets the time when this report was sent (NTP-style).
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSrPacket.RTPTimestamp">
             <summary>
             Gets or sets the time when this report was sent (RTP-style).
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSrPacket.PacketCount">
             <summary>
             Gets or sets the sender's packet count.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTCPSrPacket.OctetCount">
             <summary>
             Gets or sets the sender's octet count.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSrPacket.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPSrPacket" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSrPacket.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTCPSrPacket" /> class.
             </summary>
             <param name="synchronizationSource">The synchronization source.</param>
             <param name="ntpTimestamp">The time when this report was sent (NTP-style).</param>
             <param name="rtpTimestamp">The time when this report was sent (RTP-style).</param>
             <param name="packetCount">The sender's packet count.</param>
             <param name="octetCount">The sender's octet count.</param>
            </member>
        <member name="M:FM.IceLink.RTCPSrPacket.Deserialize">
             <summary>
             Deserializes the packet data from the first byte and payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSrPacket.Serialize">
             <summary>
             Serializes the packet data to the first byte and payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTCPSrPacket.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
            </member>
        <member name="T:FM.IceLink.RTPPacket">
             <summary>
             An RTP packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.Payload">
             <summary>
             Gets or sets the data payload.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.Marker">
             <summary>
             Gets or sets the marker bit.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.Padding">
             <summary>
             Gets or sets the padding bit.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.ExtensionPresent">
             <summary>
             Gets the extension bit.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.PayloadType">
             <summary>
             Gets or sets the type of the payload.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.SequenceNumber">
             <summary>
             Gets or sets the sequence number.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.Timestamp">
             <summary>
             Gets or sets the timestamp.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.ContributingSources">
             <summary>
             Gets or sets the contributing sources.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.ContributingSourcesCount">
             <summary>
             Gets the contributing sources count.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.ExtensionHeader">
             <summary>
             Gets or sets the extension header.
             </summary>
            </member>
        <member name="P:FM.IceLink.RTPPacket.Extension">
             <summary>
             Gets or sets the extension.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTPPacket.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.RTPPacket" /> class.
             </summary>
             <param name="payload">The payload.</param>
            </member>
        <member name="P:FM.IceLink.RTPPacket.HeaderLength">
             <summary>
             Gets the length of the header.
             </summary>
            </member>
        <member name="M:FM.IceLink.RTPPacket.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTPPacket.ParseBytes(System.Byte[])">
             <summary>
             Converts a byte array to a packet.
             </summary>
             <param name="bytes">The byte array.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTPPacket.ParseBytes(System.Byte[],System.Int32)">
             <summary>
             Converts a byte array to a packet.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="length">The length of the RTP packet.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.RTPPacket.GetSequenceNumberDelta(System.Int32,System.Int32)">
             <summary>
             Retrieves the difference between two sequence numbers
             while accounting for overflow rollover.
             </summary>
             <param name="sequenceNumber">The current sequence number.</param>
             <param name="lastSequenceNumber">The last (previous) sequence number.</param>
             <returns>The difference between the two sequence numbers.</returns>
            </member>
        <member name="T:FM.IceLink.SDPSsrcAttribute">
             <summary>
             The SDP media attribute "ssrc" indicates a property (known as a
             "source-level attribute") of a media source (RTP stream) within an
             RTP session.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSsrcAttribute.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSsrcAttribute.AttributeName">
             <summary>
             Gets or sets the name of the attribute.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSsrcAttribute.AttributeValue">
             <summary>
             Gets or sets the attribute value.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSsrcAttribute.#ctor(System.Int64,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSsrcAttribute" /> class.
             </summary>
             <param name="synchronizationSource">The synchronization source.</param>
             <param name="attributeName">Name of the attribute.</param>
            </member>
        <member name="M:FM.IceLink.SDPSsrcAttribute.#ctor(System.Int64,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSsrcAttribute" /> class.
             </summary>
             <param name="synchronizationSource">The synchronization source.</param>
             <param name="attributeName">Name of the attribute.</param>
             <param name="attributeValue">The attribute value.</param>
            </member>
        <member name="M:FM.IceLink.SDPSsrcAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSsrcAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPUnknownAttribute">
             <summary>
             This attribute is used to encapsulate unrecognized SDP attributes.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPUnknownAttribute.Name">
             <summary>
             Gets or sets the attribute name.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPUnknownAttribute.Value">
             <summary>
             Gets or sets the attribute value.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPUnknownAttribute.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPUnknownAttribute" /> class.
             </summary>
             <param name="name">The name.</param>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.IceLink.SDPCryptoSessionParam">
             <summary>
             Defines valid SDP crypto session parameters.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoSessionParam.UnencryptedSRTP">
             <summary>
             Gets the SDP crypto session parameter meaning "unencrypted SRTP".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoSessionParam.UnencryptedSRTCP">
             <summary>
             Gets the SDP crypto session parameter meaning "unencrypted SRTCP".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoSessionParam.UnauthenticatedSRTP">
             <summary>
             Gets the SDP crypto session parameter meaning "unauthenticated SRTP".
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPCryptoKeyMethod">
             <summary>
             Defines valid SDP crypto key methods.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoKeyMethod.Inline">
             <summary>
             Gets the SDP crypto key method meaning "inline".
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPCryptoSuite">
             <summary>
             Defines valid SDP crypto suites.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoSuite.AESCM128HMACSHA180">
             <summary>
             Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoSuite.AESCM128HMACSHA132">
             <summary>
             Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoSuite.NULLHMACSHA180">
             <summary>
             Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoSuite.NULLHMACSHA132">
             <summary>
             Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPCryptoSuite.GetEncryptionMode(System.String)">
             <summary>
             Converts a crypto-suite string to an EncryptionMode enum.
             </summary>
             <param name="cryptoSuite">The crypto-suite string.</param>
             <returns>The EncryptionMode enum.</returns>
            </member>
        <member name="M:FM.IceLink.SDPCryptoSuite.GetCryptoSuite(FM.IceLink.EncryptionMode)">
             <summary>
             Converts an EncryptionMode enum to a crypto-suite string.
             </summary>
             <param name="encryptionMode">The EncryptionMode enum.</param>
             <returns>The crypto-suite string.</returns>
            </member>
        <member name="T:FM.IceLink.SDPCryptoAttribute">
             <summary>
             This gives the maximum amount of media that can be encapsulated
             in each packet, expressed as time in milliseconds.  The time
             SHALL be calculated as the sum of the time the media present in
             the packet represents.  For frame-based codecs, the time SHOULD
             be an integer multiple of the frame size.  This attribute is
             probably only meaningful for audio data, but may be used with
             other media types if it makes sense.  It is a media-level
             attribute, and it is not dependent on charset.  Note that this
             attribute was introduced after RFC 2327, and non-updated
             implementations will ignore this attribute.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoAttribute.Tag">
             <summary>
             Gets or sets the tag.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoAttribute.CryptoSuite">
             <summary>
             Gets or sets the crypto suite. See <see cref="T:FM.IceLink.SDPCryptoSuite" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoAttribute.KeyParams">
             <summary>
             Gets or sets the key parameters.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCryptoAttribute.SessionParams">
             <summary>
             Gets or sets the session parameters.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPCryptoAttribute.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPCryptoAttribute" /> class.
             </summary>
             <param name="tag">The tag.</param>
             <param name="cryptoSuite">The crypto suite.</param>
            </member>
        <member name="M:FM.IceLink.SDPCryptoAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPCryptoAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="M:FM.IceLink.SDPCryptoAttribute.GetKey">
             <summary>
             Gets the key from the "inline" key parameter.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPCryptoAttribute.GetSalt">
             <summary>
             Gets the salt from the "inline" key parameter.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPCryptoAttribute.SetKeySalt(System.Byte[],System.Byte[])">
             <summary>
             Sets the key and salt for the "inline" key parameter.
             </summary>
             <param name="key">The key.</param>
             <param name="salt">The salt.</param>
            </member>
        <member name="T:FM.IceLink.Serializer">
             <summary>
             Provides methods for serializing/deserializing IceLink objects.
             </summary>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeOfferAnswer(FM.IceLink.OfferAnswer)">
             <summary>
             Serializes an offer/answer to JSON.
             </summary>
             <param name="offerAnswer">The offer/answer to serialize.</param>
             <returns>The serialized offer/answer.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeOfferAnswer(System.String)">
             <summary>
             Deserializes an offer/answer from JSON.
             </summary>
             <param name="offerAnswerJson">The offer/answer (in JSON) to deserialize.</param>
             <returns>The deserialized offer/answer.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCandidate(FM.IceLink.Candidate)">
             <summary>
             Serializes a candidate to JSON.
             </summary>
             <param name="candidate">The candidate to serialize.</param>
             <returns>The serialized candidate.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCandidate(System.String)">
             <summary>
             Deserializes a candidate from JSON.
             </summary>
             <param name="candidateJson">The candidate (in JSON) to deserialize.</param>
             <returns>The deserialized candidate.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCandidateArray(FM.IceLink.Candidate[])">
             <summary>
             Serializes a list of candidates to JSON.
             </summary>
             <param name="candidates">The candidates to serialize.</param>
             <returns>The serialized candidates.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCandidateArray(System.String)">
             <summary>
             Deserializes a list of candidates from JSON.
             </summary>
             <param name="candidatesJson">The candidates (in JSON) to deserialize.</param>
             <returns>The deserialized candidates.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCandidateType(FM.IceLink.CandidateType)">
             <summary>
             Serializes a candidate type to JSON.
             </summary>
             <param name="candidateType">The candidate type to serialize.</param>
             <returns>The serialized candidate type.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCandidateType(System.String)">
             <summary>
             Deserializes a candidate type from JSON.
             </summary>
             <param name="candidateTypeJson">The candidate type (in JSON) to deserialize.</param>
             <returns>The deserialized candidate type.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCandidateTypeArray(FM.IceLink.CandidateType[])">
             <summary>
             Serializes a list of candidate types to JSON.
             </summary>
             <param name="candidateTypes">The list of candidate types to serialize.</param>
             <returns>The serialized candidate types.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCandidateTypeArray(System.String)">
             <summary>
             Deserializes a list of candidate types from JSON.
             </summary>
             <param name="candidateTypesJson">The list of candidate types (in JSON) to deserialize.</param>
             <returns>The deserialized candidate types.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCandidateMode(FM.IceLink.CandidateMode)">
             <summary>
             Serializes a candidate mode to JSON.
             </summary>
             <param name="candidateMode">The candidate mode to serialize.</param>
             <returns>The serialized candidate mode.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCandidateMode(System.String)">
             <summary>
             Deserializes a candidate mode from JSON.
             </summary>
             <param name="candidateModeJson">The candidate mode (in JSON) to deserialize.</param>
             <returns>The deserialized candidate mode.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCandidateModeArray(FM.IceLink.CandidateMode[])">
             <summary>
             Serializes a list of candidate modes to JSON.
             </summary>
             <param name="candidateModes">The list of candidate modes to serialize.</param>
             <returns>The serialized candidate modes.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCandidateModeArray(System.String)">
             <summary>
             Deserializes a list of candidate modes from JSON.
             </summary>
             <param name="candidateModesJson">The list of candidate modes (in JSON) to deserialize.</param>
             <returns>The deserialized candidate modes.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCreateArgs(FM.IceLink.CreateArgs)">
             <summary>
             Serializes create-arguments to JSON.
             </summary>
             <param name="createArgs">The create-arguments to serialize.</param>
             <returns>The serialized create-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCreateArgs(System.String)">
             <summary>
             Deserializes create-arguments from JSON.
             </summary>
             <param name="createArgsJson">The create-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized create-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCreateSuccessArgs(FM.IceLink.CreateSuccessArgs)">
             <summary>
             Serializes create-success-arguments to JSON.
             </summary>
             <param name="createSuccessArgs">The create-success-arguments to serialize.</param>
             <returns>The serialized create-success-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCreateSuccessArgs(System.String)">
             <summary>
             Deserializes create-success-arguments from JSON.
             </summary>
             <param name="createSuccessArgsJson">The create-success-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized create-success-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCreateFailureArgs(FM.IceLink.CreateFailureArgs)">
             <summary>
             Serializes create-failure-arguments to JSON.
             </summary>
             <param name="createFailureArgs">The create-failure-arguments to serialize.</param>
             <returns>The serialized create-failure-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCreateFailureArgs(System.String)">
             <summary>
             Deserializes create-failure-arguments from JSON.
             </summary>
             <param name="createFailureArgsJson">The create-failure-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized create-failure-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCreateCompleteArgs(FM.IceLink.CreateCompleteArgs)">
             <summary>
             Serializes create-complete-arguments to JSON.
             </summary>
             <param name="createCompleteArgs">The create-complete-arguments to serialize.</param>
             <returns>The serialized create-complete-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCreateCompleteArgs(System.String)">
             <summary>
             Deserializes create-complete-arguments from JSON.
             </summary>
             <param name="createCompleteArgsJson">The create-complete-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized create-complete-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeAcceptArgs(FM.IceLink.AcceptArgs)">
             <summary>
             Serializes accept-arguments to JSON.
             </summary>
             <param name="acceptArgs">The accept-arguments to serialize.</param>
             <returns>The serialized accept-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeAcceptArgs(System.String)">
             <summary>
             Deserializes accept-arguments from JSON.
             </summary>
             <param name="acceptArgsJson">The accept-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized accept-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeAcceptSuccessArgs(FM.IceLink.AcceptSuccessArgs)">
             <summary>
             Serializes accept-success-arguments to JSON.
             </summary>
             <param name="acceptSuccessArgs">The accept-success-arguments to serialize.</param>
             <returns>The serialized accept-success-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeAcceptSuccessArgs(System.String)">
             <summary>
             Deserializes accept-success-arguments from JSON.
             </summary>
             <param name="acceptSuccessArgsJson">The accept-success-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized accept-success-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeAcceptFailureArgs(FM.IceLink.AcceptFailureArgs)">
             <summary>
             Serializes accept-failure-arguments to JSON.
             </summary>
             <param name="acceptFailureArgs">The accept-failure-arguments to serialize.</param>
             <returns>The serialized accept-failure-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeAcceptFailureArgs(System.String)">
             <summary>
             Deserializes accept-failure-arguments from JSON.
             </summary>
             <param name="acceptFailureArgsJson">The accept-failure-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized accept-failure-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeAcceptCompleteArgs(FM.IceLink.AcceptCompleteArgs)">
             <summary>
             Serializes accept-complete-arguments to JSON.
             </summary>
             <param name="acceptCompleteArgs">The accept-complete-arguments to serialize.</param>
             <returns>The serialized accept-complete-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeAcceptCompleteArgs(System.String)">
             <summary>
             Deserializes accept-complete-arguments from JSON.
             </summary>
             <param name="acceptCompleteArgsJson">The accept-complete-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized accept-complete-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCloseArgs(FM.IceLink.CloseArgs)">
             <summary>
             Serializes close-arguments to JSON.
             </summary>
             <param name="closeArgs">The close-arguments to serialize.</param>
             <returns>The serialized close-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCloseArgs(System.String)">
             <summary>
             Deserializes close-arguments from JSON.
             </summary>
             <param name="closeArgsJson">The close-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized close-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeCloseCompleteArgs(FM.IceLink.CloseCompleteArgs)">
             <summary>
             Serializes close-complete-arguments to JSON.
             </summary>
             <param name="closeCompleteArgs">The close-complete-arguments to serialize.</param>
             <returns>The serialized close-complete-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeCloseCompleteArgs(System.String)">
             <summary>
             Deserializes close-complete-arguments from JSON.
             </summary>
             <param name="closeCompleteArgsJson">The close-complete-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized close-complete-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeLinkInitArgs(FM.IceLink.LinkInitArgs)">
             <summary>
             Serializes link-init-arguments to JSON.
             </summary>
             <param name="linkInitArgs">The link-init-arguments to serialize.</param>
             <returns>The serialized link-init-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeLinkInitArgs(System.String)">
             <summary>
             Deserializes link-init-arguments from JSON.
             </summary>
             <param name="linkInitArgsJson">The link-init-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized link-init-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeLinkOfferAnswerArgs(FM.IceLink.LinkOfferAnswerArgs)">
             <summary>
             Serializes link-offer-answer-arguments to JSON.
             </summary>
             <param name="linkOfferAnswerArgs">The link-offer-answer-arguments to serialize.</param>
             <returns>The serialized link-offer-answer-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeLinkOfferAnswerArgs(System.String)">
             <summary>
             Deserializes link-offer-answer-arguments from JSON.
             </summary>
             <param name="linkOfferAnswerArgsJson">The link-offer-answer-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized link-offer-answer-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeLinkCandidateArgs(FM.IceLink.LinkCandidateArgs)">
             <summary>
             Serializes link-candidate-arguments to JSON.
             </summary>
             <param name="linkCandidateArgs">The link-candidate-arguments to serialize.</param>
             <returns>The serialized link-candidate-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeLinkCandidateArgs(System.String)">
             <summary>
             Deserializes link-candidate-arguments from JSON.
             </summary>
             <param name="linkCandidateArgsJson">The link-candidate-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized link-candidate-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeLinkUpArgs(FM.IceLink.LinkUpArgs)">
             <summary>
             Serializes link-up-arguments to JSON.
             </summary>
             <param name="linkUpArgs">The link-up-arguments to serialize.</param>
             <returns>The serialized link-up-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeLinkUpArgs(System.String)">
             <summary>
             Deserializes link-up-arguments from JSON.
             </summary>
             <param name="linkUpArgsJson">The link-up-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized link-up-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeLinkDownArgs(FM.IceLink.LinkDownArgs)">
             <summary>
             Serializes link-down-arguments to JSON.
             </summary>
             <param name="linkDownArgs">The link-down-arguments to serialize.</param>
             <returns>The serialized link-down-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeLinkDownArgs(System.String)">
             <summary>
             Deserializes link-down-arguments from JSON.
             </summary>
             <param name="linkDownArgsJson">The link-down-arguments (in JSON) to deserialize.</param>
             <returns>The deserialized link-down-arguments.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeStreamFormat(FM.IceLink.StreamFormat)">
             <summary>
             Serializes an stream format to JSON.
             </summary>
             <param name="streamFormat">The stream format to serialize.</param>
             <returns>The serialized stream format.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeStreamFormat(System.String)">
             <summary>
             Deserializes an stream format from JSON.
             </summary>
             <param name="streamFormatJson">The stream format (in JSON) to deserialize.</param>
             <returns>The deserialized stream format.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeStreamFormatArray(FM.IceLink.StreamFormat[])">
             <summary>
             Serializes an array of stream format objects to JSON.
             </summary>
             <param name="streamFormats">The stream format objects to serialize.</param>
             <returns>The stream format objects as a JSON array.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeStreamFormatArray(System.String)">
             <summary>
             Deserializes the stream format objects from JSON.
             </summary>
             <param name="streamFormatsJson">The JSON-encoded stream format objects to deserialize.</param>
             <returns>The deserialized stream format objects.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeStream(FM.IceLink.Stream)">
             <summary>
             Serializes a stream to JSON.
             </summary>
             <param name="stream">The stream to serialize.</param>
             <returns>The serialized stream.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeStream(System.String)">
             <summary>
             Deserializes a stream from JSON.
             </summary>
             <param name="streamJson">The stream (in JSON) to deserialize.</param>
             <returns>The deserialized stream.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeStreamArray(FM.IceLink.Stream[])">
             <summary>
             Serializes an array of stream objects to JSON.
             </summary>
             <param name="streams">The stream objects to serialize.</param>
             <returns>The stream objects as a JSON array.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeStreamArray(System.String)">
             <summary>
             Deserializes the stream objects from JSON.
             </summary>
             <param name="streamsJson">The JSON-encoded stream objects to deserialize.</param>
             <returns>The deserialized stream objects.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeStreamType(FM.IceLink.StreamType)">
             <summary>
             Serializes a stream type to JSON.
             </summary>
             <param name="streamType">The stream type to serialize.</param>
             <returns>The serialized stream type.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeStreamType(System.String)">
             <summary>
             Deserializes a stream type from JSON.
             </summary>
             <param name="streamTypeJson">The stream type (in JSON) to deserialize.</param>
             <returns>The deserialized stream type.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeStreamTypeArray(FM.IceLink.StreamType[])">
             <summary>
             Serializes a list of stream types to JSON.
             </summary>
             <param name="streamTypes">The list of stream types to serialize.</param>
             <returns>The serialized stream types.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeStreamTypeArray(System.String)">
             <summary>
             Deserializes a list of stream types from JSON.
             </summary>
             <param name="streamTypesJson">The list of stream types (in JSON) to deserialize.</param>
             <returns>The deserialized stream types.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeEncryptionMode(FM.IceLink.EncryptionMode)">
             <summary>
             Serializes a encryption mode to JSON.
             </summary>
             <param name="encryptionMode">The encryption mode to serialize.</param>
             <returns>The serialized encryption mode.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeEncryptionMode(System.String)">
             <summary>
             Deserializes a encryption mode from JSON.
             </summary>
             <param name="encryptionModeJson">The encryption mode (in JSON) to deserialize.</param>
             <returns>The deserialized encryption mode.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeEncryptionModeArray(FM.IceLink.EncryptionMode[])">
             <summary>
             Serializes a list of encryption modes to JSON.
             </summary>
             <param name="encryptionModes">The list of encryption modes to serialize.</param>
             <returns>The serialized encryption modes.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeEncryptionModeArray(System.String)">
             <summary>
             Deserializes a list of encryption modes from JSON.
             </summary>
             <param name="encryptionModesJson">The list of encryption modes (in JSON) to deserialize.</param>
             <returns>The deserialized encryption modes.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeEncryptionRole(FM.IceLink.EncryptionRole)">
             <summary>
             Serializes a encryption role to JSON.
             </summary>
             <param name="encryptionRole">The encryption role to serialize.</param>
             <returns>The serialized encryption role.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeEncryptionRole(System.String)">
             <summary>
             Deserializes a encryption role from JSON.
             </summary>
             <param name="encryptionRoleJson">The encryption role (in JSON) to deserialize.</param>
             <returns>The deserialized encryption role.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeEncryptionRoleArray(FM.IceLink.EncryptionRole[])">
             <summary>
             Serializes a list of encryption roles to JSON.
             </summary>
             <param name="encryptionRoles">The list of encryption roles to serialize.</param>
             <returns>The serialized encryption roles.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeEncryptionRoleArray(System.String)">
             <summary>
             Deserializes a list of encryption roles from JSON.
             </summary>
             <param name="encryptionRolesJson">The list of encryption roles (in JSON) to deserialize.</param>
             <returns>The deserialized encryption roles.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeRtpMode(FM.IceLink.RtpMode)">
             <summary>
             Serializes a RTP mode to JSON.
             </summary>
             <param name="rtpMode">The RTP mode to serialize.</param>
             <returns>The serialized RTP mode.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeRtpMode(System.String)">
             <summary>
             Deserializes a RTP mode from JSON.
             </summary>
             <param name="rtpModeJson">The RTP mode (in JSON) to deserialize.</param>
             <returns>The deserialized RTP mode.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.SerializeProtocol(FM.IceLink.StreamProtocol)">
             <summary>
             Serializes a stream protocol to JSON.
             </summary>
             <param name="protocol">The protocol to serialize.</param>
             <returns>The serialized protocol.</returns>
            </member>
        <member name="M:FM.IceLink.Serializer.DeserializeProtocol(System.String)">
             <summary>
             Deserializes a protocol from JSON.
             </summary>
             <param name="protocolJson">The protocol (in JSON) to deserialize.</param>
             <returns>The deserialized protocol.</returns>
            </member>
        <member name="P:FM.IceLink.TURNTcpConnection.IsClosed">
             <summary>
             Gets a value indicating whether the socket is closed.
             </summary>
            </member>
        <member name="T:FM.IceLink.Server">
             <summary>
             An IceLink server, capable of responding to STUN
             requests and managing a TURN relay.
             </summary>
            </member>
        <member name="E:FM.IceLink.Server.RequestReceived">
             <summary>
             Raised when a request is received by the server.
             </summary>
            </member>
        <member name="E:FM.IceLink.Server.RequestProcessed">
             <summary>
             Raised when a request has been processed by the server.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.VirtualAdapter">
             <summary>
             Gets or sets the virtual adapter to use
             instead of the local device adapter.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.Realm">
             <summary>
             Gets or sets the realm used for this server.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.TcpEnabled">
             <summary>
             Gets a value indicating whether TCP support is enabled.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.RelayPortMin">
             <summary>
             Gets or sets the minimum allowed port to be
             used when allocating sockets on the relay.
             The default value is 49152, which is the
             lowest port that cannot be registered with
             IANA.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.RelayPortMax">
             <summary>
             Gets or sets the maximum allowed port to be
             used when allocating sockets on the relay
             The default value is 65535.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.RelayEnabled">
             <summary>
             Gets whether the TURN relay is enabled.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.RelayAllocationCount">
             <summary>
             Gets the number of allocations on the TURN relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.LocalIPAddress">
             <summary>
             Gets the local IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.LocalIPAddresses">
             <summary>
             Gets the local IP addresses.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.LocalPort">
             <summary>
             Gets the local port.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.LocalPorts">
             <summary>
             Gets the local ports.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.DefaultAllocateLifetime">
             <summary>
             Gets or sets the default lifetime for new allocations
             in seconds. Defaults to 600 (10 minutes).
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.ForceDefaultAllocateLifetime">
             <summary>
             Gets or sets whether the server should force the
             default lifetime for new allocations (true) or allow
             clients to request their own lifetime within the
             min/max range (false). Defaults to false.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.MinAllocateLifetime">
             <summary>
             Gets the minimum lifetime for new allocations
             in seconds. Equal to 600 (10 minutes).
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.MaxAllocateLifetime">
             <summary>
             Gets or sets the maximum lifetime for new
             allocations in seconds. Defaults to 3600
             (1 hour).
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.DefaultRefreshLifetime">
             <summary>
             Gets or sets the default lifetime for refreshed allocations
             in seconds. Defaults to 600 (10 minutes).
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.ForceDefaultRefreshLifetime">
             <summary>
             Gets or sets whether the server should force the
             default lifetime for refreshed allocations (true) or allow
             clients to request their own lifetime within the
             min/max range (false). Defaults to false.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.MinRefreshLifetime">
             <summary>
             Gets the minimum lifetime for refreshed allocations
             in seconds. Equal to 600 (10 minutes).
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.MaxRefreshLifetime">
             <summary>
             Gets or sets the maximum lifetime for refreshed
             allocations in seconds. Defaults to 3600
             (1 hour).
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.StaleNonceSecurity">
             <summary>
             Gets or sets whether the server should enforce
             stale-nonce security by sending a 438 Stale Nonce
             in response to allocate requests with a stale
             or non-existent nonce.
             </summary>
            </member>
        <member name="M:FM.IceLink.Server.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Server" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.Server.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Server" /> class.
             </summary>
             <param name="tcpEnabled">Whether to enable TCP as an alternative to UDP.</param>
            </member>
        <member name="M:FM.IceLink.Server.EnableRelay(FM.SingleFunction{FM.IceLink.RelayAuthenticateArgs,FM.IceLink.RelayAuthenticateResult})">
             <summary>
             Enables the TURN relay functionality of the server, allowing
             the processing of TURN requests and socket allocation.
             </summary>
             <param name="relayAuthenticate">The callback function that will authenticate TURN allocation requests.</param>
            </member>
        <member name="M:FM.IceLink.Server.DisableRelay">
             <summary>
             Disables the TURN relay functionality of the server.
             </summary>
            </member>
        <member name="P:FM.IceLink.Server.PublicIPAddress">
             <summary>
             Gets or sets the public IP address of the server, if known.
             This is to assist in cases where the server can only bind
             to a private IP address, but a 1:1 NAT is in place. If
             set, this address will be used in client responses instead
             of the local private IP address.
             </summary>
            </member>
        <member name="M:FM.IceLink.Server.Start">
             <summary>
             Starts the server using all available IP addresses
             and the default port (3478).
             </summary>
            </member>
        <member name="M:FM.IceLink.Server.Start(System.Int32)">
             <summary>
             Starts the server using all available IP addresses
             and the specified port.
             </summary>
             <param name="port">The port.</param>
            </member>
        <member name="M:FM.IceLink.Server.Start(System.String)">
             <summary>
             Starts the server using the specified IP address
             and the default port (3478).
             </summary>
             <param name="ipAddress">The local IP address.</param>
            </member>
        <member name="M:FM.IceLink.Server.Start(System.String[])">
             <summary>
             Starts the server using the specified IP addresses
             and the default port (3478).
             </summary>
             <param name="ipAddresses">The local IP addresses.</param>
            </member>
        <member name="M:FM.IceLink.Server.Start(System.String,System.Int32)">
             <summary>
             Starts the server using the specified IP address
             and the specified port.
             </summary>
             <param name="ipAddress">The local IP address.</param>
             <param name="port">The port.</param>
            </member>
        <member name="M:FM.IceLink.Server.Start(System.String[],System.Int32)">
             <summary>
             Starts the server using the specified IP addresses
             and the specified port.
             </summary>
             <param name="ipAddresses">The local IP addresses.</param>
             <param name="port">The port.</param>
            </member>
        <member name="M:FM.IceLink.Server.Stop">
             <summary>
             Stops the server.
             </summary>
            </member>
        <member name="T:FM.IceLink.CheckServerArgs">
             <summary>
             Arguments for checking a server's accessibility.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerArgs.ServerIPAddress">
             <summary>
             Gets or sets the server IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerArgs.ServerPort">
             <summary>
             Gets or sets the server port.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerArgs.RelayUsername">
             <summary>
             Gets or sets the relay username.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerArgs.RelayPassword">
             <summary>
             Gets or sets the relay password.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerArgs.RelayRealm">
             <summary>
             Gets or sets the relay realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerArgs.Timeout">
             <summary>
             Gets or sets the timeout period for the check.
             Defaults to 5000ms.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerArgs.Ipv6">
             <summary>
             Gets whether the server IP address uses IPv6.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke on success.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke on failure.
             </summary>
            </member>
        <member name="M:FM.IceLink.CheckServerArgs.#ctor(System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.CheckServerArgs" /> class.
             </summary>
             <param name="serverIPAddress">The server IP address.</param>
             <param name="serverPort">The server port.</param>
            </member>
        <member name="T:FM.IceLink.CheckServerSuccessArgs">
             <summary>
             Arguments for the server-check success callback.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerSuccessArgs.ServerIPAddress">
             <summary>
             Gets or sets the original server IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerSuccessArgs.ServerPort">
             <summary>
             Gets or sets the original server port.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerSuccessArgs.RelayUsername">
             <summary>
             Gets or sets the original relay username.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerSuccessArgs.RelayPassword">
             <summary>
             Gets or sets the original relay password.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerSuccessArgs.RelayRealm">
             <summary>
             Gets or sets the original relay realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerSuccessArgs.Timeout">
             <summary>
             Gets or sets the original timeout period for the check.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerSuccessArgs.PublicIPAddress">
             <summary>
             Gets or sets the current device's public IP address
             as returned by the server.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerSuccessArgs.PublicPort">
             <summary>
             Gets or sets the current device's public port as
             returned by the server.
             </summary>
            </member>
        <member name="T:FM.IceLink.CheckServerFailureArgs">
             <summary>
             Arguments for the server-check failure callback.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerFailureArgs.ServerIPAddress">
             <summary>
             Gets or sets the original server IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerFailureArgs.ServerPort">
             <summary>
             Gets or sets the original server port.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerFailureArgs.RelayUsername">
             <summary>
             Gets or sets the original relay username.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerFailureArgs.RelayPassword">
             <summary>
             Gets or sets the original relay password.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerFailureArgs.RelayRealm">
             <summary>
             Gets or sets the original relay realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerFailureArgs.Timeout">
             <summary>
             Gets or sets the original timeout period for the check.
             </summary>
            </member>
        <member name="P:FM.IceLink.CheckServerFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.IceLink.ServerCheck">
             <summary>
             Utility class for checking a server's accessibility.
             </summary>
            </member>
        <member name="M:FM.IceLink.ServerCheck.#ctor(FM.IceLink.CheckServerArgs)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ServerCheck" /> class.
             </summary>
             <param name="checkArgs">The check arguments.</param>
            </member>
        <member name="M:FM.IceLink.ServerCheck.Check">
             <summary>
             Checks the server for STUN/TURN accessibility.
             </summary>
            </member>
        <member name="T:FM.IceLink.CompareResult">
             <summary>
             The compare result in a sort operation.
             </summary>
            </member>
        <member name="F:FM.IceLink.CompareResult.Equal">
             <summary>
             Indicates that the two elements are equal.
             </summary>
            </member>
        <member name="F:FM.IceLink.CompareResult.Negative">
             <summary>
             Indicates that the first element belongs before the second.
             </summary>
            </member>
        <member name="F:FM.IceLink.CompareResult.Positive">
             <summary>
             Indicates that ths second element belongs before the first.
             </summary>
            </member>
        <member name="T:FM.IceLink.Sort">
             <summary>
             Encapsulates useful sorting utilities.
             </summary>
            </member>
        <member name="M:FM.IceLink.Sort.QuickSort``1(System.Collections.Generic.List{``0},FM.DoubleFunction{``0,``0,FM.IceLink.CompareResult})">
             <summary>
             Sorts an array using the in-place quick-sort algorithm.
             </summary>
             <typeparam name="T">The type of elements in the array.</typeparam>
             <param name="array">The array of elements.</param>
             <param name="comparer">The function used to compare elements in the array -
             should return less than 0 if item 1 is less than item 2 (item 1 should appear
             before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
             than item 2 (item 1 should appear after item 2).</param>
            </member>
        <member name="T:FM.IceLink.Encryptor">
             <summary>
             Implements AES encryption for RTP/RTCP data streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.Encryptor.EncryptionMode">
             <summary>
             Gets or sets the encryption mode.
             </summary>
            </member>
        <member name="P:FM.IceLink.Encryptor.LocalKey">
             <summary>
             Gets or sets the local key.
             </summary>
            </member>
        <member name="P:FM.IceLink.Encryptor.LocalSalt">
             <summary>
             Gets or sets the local salt.
             </summary>
            </member>
        <member name="P:FM.IceLink.Encryptor.RemoteKey">
             <summary>
             Gets or sets the remote key.
             </summary>
            </member>
        <member name="P:FM.IceLink.Encryptor.RemoteSalt">
             <summary>
             Gets or sets the remote salt.
             </summary>
            </member>
        <member name="M:FM.IceLink.Encryptor.#ctor(FM.IceLink.StreamProtocol,FM.IceLink.EncryptionMode,System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Encryptor" /> class.
             </summary>
             <param name="protocol">The protocol.</param>
             <param name="encryptionMode">The encryption mode.</param>
             <param name="localKey">The local key.</param>
             <param name="localSalt">The local salt.</param>
             <param name="remoteKey">The remote key.</param>
             <param name="remoteSalt">The remote salt.</param>
            </member>
        <member name="M:FM.IceLink.Encryptor.EncryptRTP(FM.IceLink.RTPPacket)">
             <summary>
             Transforms an unencrypted RTP packet into an encrypted byte sequence.
             </summary>
             <param name="packet">The unencrypted RTP packet.</param>
             <returns>
             The encrypted byte sequence.
             </returns>
            </member>
        <member name="M:FM.IceLink.Encryptor.DecryptRTP(System.Byte[])">
             <summary>
             Transforms an encrypted byte sequence into an unencrypted RTP packet.
             </summary>
             <param name="encryptedBytes">The encrypted byte sequence.</param>
             <returns>
             The unencrypted RTP packet.
             </returns>
            </member>
        <member name="M:FM.IceLink.Encryptor.EncryptRTCP(FM.IceLink.RTCPPacket[])">
             <summary>
             Transforms an array of unencrypted RTCP packets into an encrypted byte sequence.
             </summary>
             <param name="packets">The unencrypted RTCP packets.</param>
             <returns>
             The encrypted byte sequence.
             </returns>
            </member>
        <member name="M:FM.IceLink.Encryptor.DecryptRTCP(System.Byte[])">
             <summary>
             Transforms an encrypted byte sequence into an array of unencrypted RTCP packets.
             </summary>
             <param name="encryptedBytes">The encrypted byte sequence.</param>
             <returns>
             The unencrypted RTCP packets.
             </returns>
            </member>
        <member name="M:FM.IceLink.Encryptor.Clear">
             <summary>
             Clears the associated RTP and RTCP decryption and encryption instances.
             </summary>
            </member>
        <member name="M:FM.IceLink.Encryptor.TestSRTP">
             <summary>
             Tests the SRTP implementation.
             </summary>
            </member>
        <member name="T:FM.IceLink.StreamType">
             <summary>
             The valid types of streams that can be established.
             </summary>
            </member>
        <member name="F:FM.IceLink.StreamType.Audio">
             <summary>
             Indicates an audio stream.
             </summary>
            </member>
        <member name="F:FM.IceLink.StreamType.Video">
             <summary>
             Indicates a video stream.
             </summary>
            </member>
        <member name="F:FM.IceLink.StreamType.Text">
             <summary>
             Indicates a text stream.
             </summary>
            </member>
        <member name="F:FM.IceLink.StreamType.Application">
             <summary>
             Indicates an application stream.
             </summary>
            </member>
        <member name="F:FM.IceLink.StreamType.Message">
             <summary>
             Indicates a message stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.Stream">
             <summary>
             Describes an RTP stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.EncryptionMode">
             <summary>
             Gets or sets the preferred encryption mode.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.EncryptionModes">
             <summary>
             Gets or sets the encryption modes.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.Format">
             <summary>
             Gets or sets the first stream format.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.Formats">
             <summary>
             Gets or sets the stream formats.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.RtpMode">
             <summary>
             Gets or sets the RTP mode.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.SctpProtocol">
             <summary>
             Gets or sets the SCTP sub-protocol (association usage).
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.SctpChannelCount">
             <summary>
             Gets or sets the number of SCTP channels to set up within
             the SCTP association.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.SctpPort">
             <summary>
             Gets or sets the SCTP port. Defaults to 5000.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.SctpMaxMessageSize">
             <summary>
             Gets or sets the maximum allowed size for incoming
             SCTP messages in bytes. Defaults to 65536.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.DisableKeepAliveThread">
             <summary>
             Gets or sets a value indicating whether the keep-alive thread should be disabled.
             If set to <c>true</c>, the overhead of a background thread can be avoided, but media
             must flow regularly to avoid dead stream detection on the remote side and/or NAT path
             closure by network devices. Defaults to <c>false</c>.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.MaxQueuedPackets">
             <summary>
             Gets or sets the maximum number of queued
             packets allowed for this stream. Defaults to
             -1 (no maximum).
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.EncryptionRole">
             <summary>
             Gets or sets the encryption role for
             the stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Stream.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source.
             </summary>
            </member>
        <member name="M:FM.IceLink.Stream.CreateRtpStream(FM.IceLink.StreamType,FM.IceLink.StreamFormat)">
             <summary>
             Creates an RTP stream.
             </summary>
             <param name="type">The type.</param>
             <param name="format">The format.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Stream.CreateRtpStream(FM.IceLink.StreamType,FM.IceLink.StreamFormat[])">
             <summary>
             Creates an RTP stream.
             </summary>
             <param name="type">The type.</param>
             <param name="formats">The formats.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Stream.CreateRtpStream(FM.IceLink.StreamType,FM.IceLink.StreamFormat,FM.IceLink.EncryptionMode)">
             <summary>
             Creates an RTP stream.
             </summary>
             <param name="type">The type.</param>
             <param name="format">The format.</param>
             <param name="encryptionMode">The encryption mode.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Stream.CreateRtpStream(FM.IceLink.StreamType,FM.IceLink.StreamFormat[],FM.IceLink.EncryptionMode)">
             <summary>
             Creates an RTP stream.
             </summary>
             <param name="type">The type.</param>
             <param name="formats">The formats.</param>
             <param name="encryptionMode">The encryption mode.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Stream.CreateRtpStream(FM.IceLink.StreamType,FM.IceLink.StreamFormat,FM.IceLink.EncryptionMode[])">
             <summary>
             Creates an RTP stream.
             </summary>
             <param name="type">The type.</param>
             <param name="format">The format.</param>
             <param name="encryptionModes">The encryption modes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Stream.CreateRtpStream(FM.IceLink.StreamType,FM.IceLink.StreamFormat[],FM.IceLink.EncryptionMode[])">
             <summary>
             Creates an RTP stream.
             </summary>
             <param name="type">The type.</param>
             <param name="formats">The formats.</param>
             <param name="encryptionModes">The encryption modes.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Stream.CreateSctpStream">
             <summary>
             Creates an SCTP stream.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Stream.CreateSctpStream(System.String)">
             <summary>
             Creates an SCTP stream.
             </summary>
             <param name="protocol">The protocol.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamFormat)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="format">The stream format.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamFormat[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="formats">The stream formats.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamFormat,FM.IceLink.EncryptionMode)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="format">The stream format.</param>
             <param name="encryptionMode">The encryption mode.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamFormat[],FM.IceLink.EncryptionMode)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="formats">The stream formats.</param>
             <param name="encryptionMode">The encryption mode.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamFormat,FM.IceLink.EncryptionMode[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="format">The stream format.</param>
             <param name="encryptionModes">The encryption modes.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamFormat[],FM.IceLink.EncryptionMode[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="formats">The stream formats.</param>
             <param name="encryptionModes">The encryption modes.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamProtocol,FM.IceLink.StreamFormat)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="protocol">The stream protocol.</param>
             <param name="format">The stream format.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamProtocol,FM.IceLink.StreamFormat[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="protocol">The stream protocol.</param>
             <param name="formats">The stream formats.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamProtocol,FM.IceLink.StreamFormat,FM.IceLink.EncryptionMode)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="protocol">The stream protocol.</param>
             <param name="format">The stream format.</param>
             <param name="encryptionMode">The encryption mode.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamProtocol,FM.IceLink.StreamFormat[],FM.IceLink.EncryptionMode)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="protocol">The stream protocol.</param>
             <param name="formats">The stream formats.</param>
             <param name="encryptionMode">The encryption mode.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamProtocol,FM.IceLink.StreamFormat,FM.IceLink.EncryptionMode[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="protocol">The stream protocol.</param>
             <param name="format">The stream format.</param>
             <param name="encryptionModes">The encryption modes.</param>
            </member>
        <member name="M:FM.IceLink.Stream.#ctor(FM.IceLink.StreamType,FM.IceLink.StreamProtocol,FM.IceLink.StreamFormat[],FM.IceLink.EncryptionMode[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Stream" /> class.
             </summary>
             <param name="type">The stream type.</param>
             <param name="protocol">The stream protocol.</param>
             <param name="formats">The stream formats.</param>
             <param name="encryptionModes">The encryption modes.</param>
            </member>
        <member name="M:FM.IceLink.Stream.FindFormat(System.String)">
             <summary>
             Finds the first stream format with the given encoding name (case-insensitive).
             </summary>
             <param name="encodingName">The encoding name.</param>
             <returns>The matching stream format, or <c>null</c>.</returns>
            </member>
        <member name="M:FM.IceLink.Stream.FindFormat(System.String,System.Int32)">
             <summary>
             Finds the first stream format with the given encoding name (case-insensitive) and clock rate.
             </summary>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
             <returns>The matching stream format, or <c>null</c>.</returns>
            </member>
        <member name="M:FM.IceLink.Stream.FindFormat(System.String,System.Int32,System.String)">
             <summary>
             Finds the first stream format with the given encoding name (case-insensitive), clock rate, and encoding parameters (case-insensitive).
             </summary>
             <param name="encodingName">The encoding name.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="encodingParameters">The encoding parameters.</param>
             <returns>The matching stream format, or <c>null</c>.</returns>
            </member>
        <member name="M:FM.IceLink.Stream.ToSDPMediaDescription">
             <summary>
             Converts the stream description to an SDP media description.
             </summary>
             <returns>The equivalent SDP media description.</returns>
            </member>
        <member name="M:FM.IceLink.Stream.ToSDPMediaDescription(FM.IceLink.Stream)">
             <summary>
             Converts the stream description to an SDP media description.
             </summary>
             <param name="streamDescription">The stream description.</param>
             <returns>The equivalent SDP media description.</returns>
            </member>
        <member name="M:FM.IceLink.Stream.FromSDPMediaDescription(FM.IceLink.SDPMediaDescription,FM.IceLink.SDPMessage)">
             <summary>
             Converts an SDP media description to a stream description.
             </summary>
             <param name="mediaDescription">The SDP media description.</param>
             <param name="message">The message.</param>
             <returns>
             The equivalent stream description.
             </returns>
            </member>
        <member name="M:FM.IceLink.Stream.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Stream.ToJson(FM.IceLink.Stream)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="stream">The stream to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.Stream.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="streamJson">The JSON to deserialize.</param>
             <returns>The deserialized stream.</returns>
            </member>
        <member name="M:FM.IceLink.Stream.ToJsonMultiple(FM.IceLink.Stream[])">
             <summary>
             Serializes an array of instances to JSON.
             </summary>
             <param name="streams">The streams to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.Stream.FromJsonMultiple(System.String)">
             <summary>
             Deserializes an array of instances from JSON.
             </summary>
             <param name="streamsJson">The JSON to deserialize.</param>
             <returns>The deserialized streams.</returns>
            </member>
        <member name="T:FM.IceLink.StreamFormat">
             <summary>
             Describes a stream format.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamFormat.PayloadType">
             <summary>
             Gets or sets the payload type associated with the format.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamFormat.EncodingName">
             <summary>
             Gets or sets the format's encoding name.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamFormat.ClockRate">
             <summary>
             Gets or sets the format's clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.StreamFormat.EncodingParameters">
             <summary>
             Gets or sets the format's encoding parameters.
             </summary>
            </member>
        <member name="M:FM.IceLink.StreamFormat.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.StreamFormat" /> class with a dynamically assigned payload type.
             </summary>
             <param name="encodingName">The format's encoding name.</param>
            </member>
        <member name="M:FM.IceLink.StreamFormat.#ctor(System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.StreamFormat" /> class with a dynamically assigned payload type.
             </summary>
             <param name="encodingName">The format's encoding name.</param>
             <param name="clockRate">The format's clock rate.</param>
            </member>
        <member name="M:FM.IceLink.StreamFormat.#ctor(System.String,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.StreamFormat" /> class with a dynamically assigned payload type.
             </summary>
             <param name="encodingName">The format's encoding name.</param>
             <param name="clockRate">The format's clock rate.</param>
             <param name="encodingParameters">The format's encoding parameters.</param>
            </member>
        <member name="M:FM.IceLink.StreamFormat.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.StreamFormat" /> class.
             </summary>
             <param name="payloadType">The payload type associated with the format.</param>
             <param name="encodingName">The format's encoding name.</param>
            </member>
        <member name="M:FM.IceLink.StreamFormat.#ctor(System.Int32,System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.StreamFormat" /> class.
             </summary>
             <param name="payloadType">The payload type associated with the format.</param>
             <param name="encodingName">The format's encoding name.</param>
             <param name="clockRate">The format's clock rate.</param>
            </member>
        <member name="M:FM.IceLink.StreamFormat.#ctor(System.Int32,System.String,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.StreamFormat" /> class.
             </summary>
             <param name="payloadType">The payload type associated with the format.</param>
             <param name="encodingName">The format's encoding name.</param>
             <param name="clockRate">The format's clock rate.</param>
             <param name="encodingParameters">The format's encoding parameters.</param>
            </member>
        <member name="M:FM.IceLink.StreamFormat.IsEquivalent(FM.IceLink.StreamFormat)">
             <summary>
             Checks if the stream format is equivalent, ignoring the payload type.
             </summary>
             <param name="format">The format to compare.</param>
             <returns><c>true</c> if the formats are equivalent; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.StreamFormat.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.StreamFormat.ToJson(FM.IceLink.StreamFormat)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="streamFormat">The stream format to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.StreamFormat.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="streamFormatJson">The JSON to deserialize.</param>
             <returns>The deserialized stream format.</returns>
            </member>
        <member name="M:FM.IceLink.StreamFormat.ToJsonMultiple(FM.IceLink.StreamFormat[])">
             <summary>
             Serializes an array of instances to JSON.
             </summary>
             <param name="streamFormats">The stream formats to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.StreamFormat.FromJsonMultiple(System.String)">
             <summary>
             Deserializes an array of instances from JSON.
             </summary>
             <param name="streamFormatsJson">The JSON to deserialize.</param>
             <returns>The deserialized stream formats.</returns>
            </member>
        <member name="T:FM.IceLink.ICECreateArgs">
             <summary>
             ICE initialize arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateArgs.OnSuccess">
             <summary>
             Gets or sets the callback to execute on success.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateArgs.OnFailure">
             <summary>
             Gets or sets the callback to execute on failure.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateArgs.OnComplete">
             <summary>
             Gets or sets the callback to execute on complete.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECreateCompleteArgs">
             <summary>
             ICE create complete arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateCompleteArgs.MediaStreams">
             <summary>
             Gets or sets the original supported media streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateCompleteArgs.TurnUsername">
             <summary>
             Gets or sets the original TURN username.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateCompleteArgs.TurnRealm">
             <summary>
             Gets or sets the original TURN realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateCompleteArgs.TurnPassword">
             <summary>
             Gets or sets the original TURN password.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECreateFailureArgs">
             <summary>
             ICE create failure arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateFailureArgs.MediaStreams">
             <summary>
             Gets or sets the original supported media streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateFailureArgs.TurnUsername">
             <summary>
             Gets or sets the original TURN username.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateFailureArgs.TurnRealm">
             <summary>
             Gets or sets the original TURN realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateFailureArgs.TurnPassword">
             <summary>
             Gets or sets the original TURN password.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateFailureArgs.Exception">
             <summary>
             Gets or sets the exception that occurred.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECreateSuccessArgs">
             <summary>
             ICE create success arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateSuccessArgs.MediaStreams">
             <summary>
             Gets or sets the original supported media streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateSuccessArgs.TurnUsername">
             <summary>
             Gets or sets the original TURN username.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateSuccessArgs.TurnRealm">
             <summary>
             Gets or sets the original TURN realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateSuccessArgs.TurnPassword">
             <summary>
             Gets or sets the original TURN password.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECreateSuccessArgs.OfferAnswer">
             <summary>
             Gets or sets the offer/answer.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEValidList">
             <summary>
             ICE valid list.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEValidList.CandidatePairs">
             <summary>
             Gets the candidate pairs.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEValidList.HasNominated">
             <summary>
             Gets a value indicating whether the valid list has nominated a candidate pair.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEValidList.AddCandidatePair(FM.IceLink.ICECandidatePair)">
             <summary>
             Adds a candidate pair.
             </summary>
             <param name="candidatePair">The candidate pair to add.</param>
            </member>
        <member name="M:FM.IceLink.ICEValidList.RemoveCandidatePair(FM.IceLink.ICECandidatePair)">
             <summary>
             Removes a candidate pair.
             </summary>
             <param name="candidatePair">The candidate pair to remove.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.ICEAgentState">
             <summary>
             State of an ICE agent.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICEAgentState.Running">
             <summary>
             In this state, ICE processing is under way.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICEAgentState.Completed">
             <summary>
             In this state, ICE processing is complete.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICEAgentState.Failed">
             <summary>
             In this state, ICE processing failed.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICEAgentState.Inactive">
             <summary>
             In this state, ICE processing has not yet begun.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICEAgentState.Completing">
             <summary>
             In this state, ICE processing is completing.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECheckListState">
             <summary>
             State of an ICE check list.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICECheckListState.Running">
             <summary>
             In this state, ICE checks are still in progress for this
             media stream.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICECheckListState.Completed">
             <summary>
             In this state, ICE checks have produced nominated pairs
             for each component of the media stream.  Consequently, ICE has
             succeeded and media can be sent.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICECheckListState.Failed">
             <summary>
             In this state, the ICE checks have not completed
             successfully for this media stream.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECandidatePairState">
             <summary>
             State of an ICE candidate pair.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICECandidatePairState.Waiting">
             <summary>
             A check has not been performed for this pair, and can be
             performed as soon as it is the highest-priority Waiting pair on
             the check list.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICECandidatePairState.InProgress">
             <summary>
             A check has been sent for this pair, but the
             transaction is in progress.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICECandidatePairState.Succeeded">
             <summary>
             A check for this pair was already done and produced a
             successful result.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICECandidatePairState.Failed">
             <summary>
             A check for this pair was already done and failed, either
             never producing any response or producing an unrecoverable failure
             response.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEAgentRole">
             <summary>
             ICE agent roles.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICEAgentRole.Controlling">
             <summary>
             Indicates that the agent is controlling.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICEAgentRole.Controlled">
             <summary>
             Indicates that the agent is controlled.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECheckList">
             <summary>
             ICE check list.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECheckList.CandidatePairs">
             <summary>
             Gets the candidate pairs.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECheckList.State">
             <summary>
             Gets or sets the state.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECheckList.AddCandidatePair(FM.IceLink.ICECandidatePair)">
             <summary>
             Adds a candidate pair.
             </summary>
             <param name="candidatePair">The candidate pair to add.</param>
            </member>
        <member name="M:FM.IceLink.ICECheckList.FindMatchingLocalCandidate(System.String,System.Int32)">
             <summary>
             Finds a matching local candidate.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <param name="port">The port.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICECheckList.FindMatchingRemoteCandidate(System.String,System.Int32)">
             <summary>
             Finds a matching remote candidate.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <param name="port">The port.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICECheckList.FindMatchingCandidatePair(FM.IceLink.ICECandidatePair)">
             <summary>
             Finds a matching candidate pair.
             </summary>
             <param name="cp">The candidate pair.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICECheckList.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.ICEUdpMessageBroker">
             <summary>
             ICE UDP message broker.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpMessageBroker.VirtualSocket">
             <summary>
             Gets or sets the virtual socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpMessageBroker.Socket">
             <summary>
             Gets or sets the socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpMessageBroker.IsClosed">
             <summary>
             Gets a value indicating whether the socket is closed.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpMessageBroker.Start">
             <summary>
             Starts STUN transaction thread.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpMessageBroker.Stop">
             <summary>
             Stops STUN transaction thread.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpMessageBroker.SendRequest(FM.IceLink.ICESendRequestArgs)">
             <summary>
             Sends a request.
             </summary>
             <param name="sendRequestArgs">The send request arguments.</param>
            </member>
        <member name="M:FM.IceLink.ICEUdpMessageBroker.SendResponse(FM.IceLink.ICESendResponseArgs)">
             <summary>
             Sends a response.
             </summary>
             <param name="sendResponseArgs">The send response arguments.</param>
            </member>
        <member name="M:FM.IceLink.ICEUdpMessageBroker.StartListening">
             <summary>
             Starts listening for incoming packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpMessageBroker.SendData(System.Byte[],FM.IceLink.TransportAddress,FM.IceLink.TransportAddress)">
             <summary>
             Sends data.
             </summary>
             <param name="buffer">The data buffer.</param>
             <param name="address">The address.</param>
             <param name="relay">The relay.</param>
             <returns>The number of bytes sent.</returns>
            </member>
        <member name="T:FM.IceLink.LinkInitializeState">
             <summary>
             Link initialization state.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkInitializeState.Complete">
             <summary>
             Gets or sets the callback to invoke when complete.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkInitializeState.Host">
             <summary>
             Gets or sets the host.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkInitializeState.Port">
             <summary>
             Gets or sets the port.
             </summary>
            </member>
        <member name="P:FM.IceLink.LinkInitializeState.Index">
             <summary>
             Gets or sets the index.
             </summary>
            </member>
        <member name="T:FM.IceLink.Link">
             <summary>
             A peer link over which data can be streamed.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.BytesSentRTP">
             <summary>
             Gets an array of the number of RTP packet bytes sent,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.BytesSentRTCP">
             <summary>
             Gets an array of the number of RTCP packet bytes sent,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.PacketsSentRTP">
             <summary>
             Gets an array of the number of RTP packets sent,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.PacketsSentRTCP">
             <summary>
             Gets an array of the number of RTCP packets sent,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.BytesReceivedRTP">
             <summary>
             Gets an array of the number of RTP packet bytes received,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.BytesReceivedRTCP">
             <summary>
             Gets an array of the number of RTCP packet bytes received,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.PacketsReceivedRTP">
             <summary>
             Gets an array of the number of RTP packets received,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.PacketsReceivedRTCP">
             <summary>
             Gets an array of the number of RTCP packets received,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.InboundPacketsLostRTP">
             <summary>
             Gets an array of the number of inbound RTP packets lost,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.OutboundPacketsLostRTP">
             <summary>
             Gets an array of the number of outbound RTP packets lost,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.RoundTripTime">
             <summary>
             Gets an array of the estimated round-trip times in seconds,
             indexed per media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.IsRelayed">
             <summary>
             Gets whether or not any of the streams are relayed.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.IsStreamRelayed">
             <summary>
             Gets whether or not the streams are relayed.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.LocalCandidateTypes">
             <summary>
             Gets the active local candidate types.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.RemoteCandidateTypes">
             <summary>
             Gets the active remote candidate types.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.LocalCandidates">
             <summary>
             Gets the active local candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.Link.RemoteCandidates">
             <summary>
             Gets the active remote candidates.
             </summary>
            </member>
        <member name="M:FM.IceLink.Link.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.Link" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.Link.KeepAlive">
             <summary>
             Keeps the link alive.
             </summary>
            </member>
        <member name="M:FM.IceLink.Link.CreateOfferAsync(FM.IceLink.CreateArgs)">
             <summary>
             Invokes the CreateOffer operation using .NET async tasks.
             </summary>
             <param name="createArgs">The create arguments.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Link.CreateAnswerAsync(FM.IceLink.CreateArgs)">
             <summary>
             Invokes the CreateAnswer operation using .NET async tasks.
             </summary>
             <param name="createArgs">The create arguments.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Link.AcceptAsync(FM.IceLink.AcceptArgs)">
             <summary>
             Invokes the Accept operation using .NET async tasks.
             </summary>
             <param name="acceptArgs">The accept arguments.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Link.CloseAsync">
             <summary>
             Invokes the Close operation using .NET async tasks.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.Link.CloseAsync(FM.IceLink.CloseArgs)">
             <summary>
             Invokes the Close operation using .NET async tasks.
             </summary>
             <param name="closeArgs">The close arguments.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.ICELocalAddress.IPAddress">
             <summary>
             Gets or sets the address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICELocalAddress.Mask">
             <summary>
             Gets or sets the subnet mask.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICELocalAddress.AdapterSpeed">
             <summary>
             Gets or sets the adapter speed.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICELocalAddress.#ctor(System.String,System.String,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICELocalAddress" /> class.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <param name="mask">The subnet mask.</param>
             <param name="adapterSpeed">The adapter speed.</param>
            </member>
        <member name="M:FM.IceLink.ICELocalAddress.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="M:FM.IceLink.ICELocalAddress.IsLocalAddress(System.String)">
             <summary>
             Checks if an IP address is locally accessible
             by a source address.
             </summary>
             <param name="address">The address.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.ICEMediaFormat">
             <summary>
             ICE media format representation.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaFormat.RtpPayloadType">
             <summary>
             Gets or sets the type of the RTP payload.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaFormat.EncodingName">
             <summary>
             Gets or sets the name of the encoding.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaFormat.ClockRate">
             <summary>
             Gets or sets the clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaFormat.EncodingParameters">
             <summary>
             Gets or sets the encoding parameters.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEMediaFormat.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICEMediaFormat" /> class.
             </summary>
             <param name="rtpPayloadType">Type of the RTP payload.</param>
             <param name="encodingName">Name of the encoding.</param>
            </member>
        <member name="M:FM.IceLink.ICEMediaFormat.#ctor(System.Int32,System.String,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICEMediaFormat" /> class.
             </summary>
             <param name="rtpPayloadType">Type of the RTP payload.</param>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
            </member>
        <member name="M:FM.IceLink.ICEMediaFormat.#ctor(System.Int32,System.String,System.Int64,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICEMediaFormat" /> class.
             </summary>
             <param name="rtpPayloadType">Type of the RTP payload.</param>
             <param name="encodingName">Name of the encoding.</param>
             <param name="clockRate">The clock rate.</param>
             <param name="encodingParameters">The encoding parameters.</param>
            </member>
        <member name="T:FM.IceLink.SDPCandidateType">
             <summary>
             Defines valid SDP candidate types.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateType.Host">
             <summary>
             Gets the SDP candidate type meaning "Host".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateType.ServerReflexive">
             <summary>
             Gets the SDP candidate type meaning "Server Reflexive".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateType.PeerReflexive">
             <summary>
             Gets the SDP candidate type meaning "Peer Reflexive".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateType.Relayed">
             <summary>
             Gets the SDP candidate type meaning "Relayed".
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPRemoteCandidate">
             <summary>
             An SDP remote candidate element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRemoteCandidate.ComponentId">
             <summary>
             Gets or sets the ID of the component for which this is a remote candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRemoteCandidate.ConnectionAddress">
             <summary>
             Gets or sets the IP address of the remote candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRemoteCandidate.Port">
             <summary>
             Gets or sets the port of the remote candidate.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPRemoteCandidate.#ctor(System.Int32,System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRemoteCandidate" /> class.
             </summary>
             <param name="componentId">The ID of the component for which this is a remote candidate.</param>
             <param name="connectionAddress">The IP address of the remote candidate.</param>
             <param name="port">The port of the remote candidate.</param>
            </member>
        <member name="M:FM.IceLink.SDPRemoteCandidate.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPRemoteCandidate.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPRemoteCandidate" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUNRoleConflictException">
             <summary>
             The Binding request contained either the ICE-
             CONTROLLING or ICE-CONTROLLED attribute, indicating a role that
             conflicted with the server.  The server ran a tie-breaker based on
             the tie-breaker value in the request and determined that the
             client needs to switch roles.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNRoleConflictException.IceControlled">
             <summary>
             Gets or sets the ICE-controlled attribute.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNRoleConflictException.IceControlling">
             <summary>
             Gets or sets the ICE-controlling attribute.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNRoleConflictException.#ctor(FM.IceLink.STUNIceControlledAttribute,FM.IceLink.STUNIceControllingAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRoleConflictException" /> class.
             </summary>
             <param name="iceControlled">The ICE-controlled attribute.</param>
             <param name="iceControlling">The ICE-controlling attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNRoleConflictException.#ctor(System.String,FM.IceLink.STUNIceControlledAttribute,FM.IceLink.STUNIceControllingAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRoleConflictException" /> class.
             </summary>
             <param name="message">The message.</param>
             <param name="iceControlled">The ICE-controlled attribute.</param>
             <param name="iceControlling">The ICE-controlling attribute.</param>
            </member>
        <member name="T:FM.IceLink.STUNIceControllingAttribute">
             <summary>
             The ICE-CONTROLLING attribute is present in a Binding request and
             indicates that the client believes it is currently in the controlling
             role.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNIceControllingAttribute.Value">
             <summary>
             Gets or sets the tiebreaker value.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNIceControllingAttribute.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNIceControllingAttribute" /> class.
             </summary>
             <param name="value">The tiebreaker value.</param>
            </member>
        <member name="M:FM.IceLink.STUNIceControllingAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNIceControllingAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNIceControllingAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNIceControllingAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNIceControlledAttribute">
             <summary>
             The ICE-CONTROLLED attribute is present in a Binding request and
             indicates that the client believes it is currently in the controlled
             role.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNIceControlledAttribute.Value">
             <summary>
             Gets or sets the tiebreaker value.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNIceControlledAttribute.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNIceControlledAttribute" /> class.
             </summary>
             <param name="value">The tiebreaker value.</param>
            </member>
        <member name="M:FM.IceLink.STUNIceControlledAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNIceControlledAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNIceControlledAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNIceControlledAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNUseCandidateAttribute">
             <summary>
             The USE-CANDIDATE attribute indicates that the candidate pair
             resulting from this check should be used for transmission of media.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUseCandidateAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUseCandidateAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUseCandidateAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUseCandidateAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNUseCandidateAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNUseCandidateAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.SDPIceUfragAttribute">
             <summary>
             The "ice-ufrag" attribute conveys the username fragment
             used by ICE for message integrity.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPIceUfragAttribute.Ufrag">
             <summary>
             Gets or sets the username fragment used by ICE for message integrity.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPIceUfragAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIceUfragAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPIceUfragAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIceUfragAttribute" /> class.
             </summary>
             <param name="ufrag">The username fragment used by ICE for message integrity.</param>
            </member>
        <member name="M:FM.IceLink.SDPIceUfragAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIceUfragAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="M:FM.IceLink.SDPIceUfragAttribute.GetValue">
             <summary>
             Gets the value of the attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPIceUfragAttribute.GenerateUfrag">
             <summary>
             Generates a username fragment.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPIceOptionsAttribute">
             <summary>
             The "ice-options" attribute is a session-level attribute.  It
             contains a series of tokens that identify the options supported by
             the agent.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPIceOptionsAttribute.Tags">
             <summary>
             Gets or sets the tokens that identify options supported by the agent.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPIceOptionsAttribute.#ctor(System.String[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIceOptionsAttribute" /> class.
             </summary>
             <param name="tags">The tokens that identify options supported by the agent.</param>
            </member>
        <member name="M:FM.IceLink.SDPIceOptionsAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIceOptionsAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="M:FM.IceLink.SDPIceOptionsAttribute.GetValue">
             <summary>
             Gets the value of the attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPIcePasswordAttribute">
             <summary>
             The "ice-pwd" attribute conveys the password used by
             ICE for message integrity.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPIcePasswordAttribute.Password">
             <summary>
             Gets or sets the password used by ICE for message integrity.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPIcePasswordAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIcePasswordAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPIcePasswordAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIcePasswordAttribute" /> class.
             </summary>
             <param name="password">The password used by ICE for message integrity.</param>
            </member>
        <member name="M:FM.IceLink.SDPIcePasswordAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIcePasswordAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="M:FM.IceLink.SDPIcePasswordAttribute.GetValue">
             <summary>
             Gets the value of the attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPIcePasswordAttribute.GeneratePassword">
             <summary>
             Generates a random password.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPIcePasswordAttribute.GeneratePassword(System.String)">
             <summary>
             Converts an ICE username fragment to a password (MD5 hash).
             </summary>
             <param name="ufrag">The username fragment to convert.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPIceMismatchAttribute">
             <summary>
             "ice-mismatch" is a media-level
             attribute only, and when present in an answer, indicates that the
             offer arrived with a default destination for a media component that
             didn't have a corresponding candidate attribute.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPIceMismatchAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIceMismatchAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPIceMismatchAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIceMismatchAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="M:FM.IceLink.SDPIceMismatchAttribute.GetValue">
             <summary>
             Gets the value of the attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPIceLiteAttribute">
             <summary>
             "ice-lite" is a session-level attribute only, and indicates that an
             agent is a lite implementation.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPIceLiteAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIceLiteAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPIceLiteAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPIceLiteAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="M:FM.IceLink.SDPIceLiteAttribute.GetValue">
             <summary>
             Gets the value of the attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPRemoteCandidatesAttribute">
             <summary>
             The attribute contains a connection-address and port for each
             component.  The ordering of components is irrelevant.  However, a
             value MUST be present for each component of a media stream.  This
             attribute MUST be included in an offer by a controlling agent for a
             media stream that is Completed, and MUST NOT be included in any other
             case.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRemoteCandidatesAttribute.Candidates">
             <summary>
             Gets or sets the array of remote candidates.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPRemoteCandidatesAttribute.#ctor(FM.IceLink.SDPRemoteCandidate[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRemoteCandidatesAttribute" /> class.
             </summary>
             <param name="candidates">The array of remote candidates.</param>
            </member>
        <member name="M:FM.IceLink.SDPRemoteCandidatesAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRemoteCandidatesAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="M:FM.IceLink.SDPRemoteCandidatesAttribute.GetValue">
             <summary>
             Gets the value of the attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPCandidateAttribute">
             <summary>
             The candidate attribute is a media-level attribute only.  It contains
             a transport address for a candidate that can be used for connectivity
             checks.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.Foundation">
             <summary>
             Gets or sets the candidate's foundation.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.ComponentId">
             <summary>
             Gets or sets the ID of the component for which this is a candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.Protocol">
             <summary>
             Gets or sets the protocol of this candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.Priority">
             <summary>
             Gets or sets the priority of the candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.ConnectionAddress">
             <summary>
             Gets or sets the IP address of the candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.Port">
             <summary>
             Gets or sets the port of the candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.CandidateType">
             <summary>
             Gets or sets the type of the candidate. See <see cref="T:FM.IceLink.SDPCandidateType" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.RelatedAddress">
             <summary>
             Gets or sets the IP address related to the candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.RelatedPort">
             <summary>
             Gets or sets the port related to the candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCandidateAttribute.Extensions">
             <summary>
             Gets or sets the extensions.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPCandidateAttribute.#ctor(System.String,System.Int32,System.Int64,System.String,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPCandidateAttribute" /> class.
             </summary>
             <param name="foundation">The candidate's foundation.</param>
             <param name="componentId">The ID of the component for which this is a candidate.</param>
             <param name="priority">The priority of the candidate.</param>
             <param name="connectionAddress">The IP address of the candidate.</param>
             <param name="port">The port of the candidate.</param>
             <param name="candidateType">The type of the candidate. See <see cref="T:FM.IceLink.SDPCandidateType" /> for possible values.</param>
            </member>
        <member name="M:FM.IceLink.SDPCandidateAttribute.#ctor(System.String,System.Int32,System.Int64,System.String,System.Int32,System.String,System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPCandidateAttribute" /> class.
             </summary>
             <param name="foundation">The candidate's foundation.</param>
             <param name="componentId">The ID of the component for which this is a candidate.</param>
             <param name="priority">The priority of the candidate.</param>
             <param name="connectionAddress">The IP address of the candidate.</param>
             <param name="port">The port of the candidate.</param>
             <param name="candidateType">The type of the candidate. See <see cref="T:FM.IceLink.SDPCandidateType" /> for possible values.</param>
             <param name="relatedAddress">The IP address related to the candidate.</param>
             <param name="relatedPort">The port related to the candidate.</param>
            </member>
        <member name="M:FM.IceLink.SDPCandidateAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPCandidateAttribute" /> class.
             </summary>
             <param name="value">The attribute as a string.</param>
            </member>
        <member name="M:FM.IceLink.SDPCandidateAttribute.GetValue">
             <summary>
             Gets the value of the attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUNPriorityAttribute">
             <summary>
             The PRIORITY attribute indicates the priority that is to be
             associated with a peer reflexive candidate, should one be discovered
             by this check.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNPriorityAttribute.Priority">
             <summary>
             Gets or sets the priority.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNPriorityAttribute.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNPriorityAttribute" /> class.
             </summary>
             <param name="priority">The priority.</param>
            </member>
        <member name="M:FM.IceLink.STUNPriorityAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNPriorityAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNPriorityAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNPriorityAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.CreateArgs">
             <summary>
             Arguments for link create invocations.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreateArgs.OnSuccess">
             <summary>
             Gets or sets the callback to invoke if the create operation completes successfully.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreateArgs.OnFailure">
             <summary>
             Gets or sets the callback to invoke if the create operation fails.
             </summary>
            </member>
        <member name="P:FM.IceLink.CreateArgs.OnComplete">
             <summary>
             Gets or sets the callback to invoke when the create operation completes.
             </summary>
            </member>
        <member name="M:FM.IceLink.CreateArgs.ToJson">
             <summary>
             Serializes this instance to JSON.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.CreateArgs.ToJson(FM.IceLink.CreateArgs)">
             <summary>
             Serializes an instance to JSON.
             </summary>
             <param name="createArgs">The create arguments to serialize.</param>
             <returns>The serialized JSON.</returns>
            </member>
        <member name="M:FM.IceLink.CreateArgs.FromJson(System.String)">
             <summary>
             Deserializes an instance from JSON.
             </summary>
             <param name="createArgsJson">The JSON to deserialize.</param>
             <returns>The deserialized create arguments.</returns>
            </member>
        <member name="T:FM.IceLink.NetworkTimeProtocol">
             <summary>
             Utility class to assist with Network Time Protocol (NTP) conversions.
             </summary>
            </member>
        <member name="P:FM.IceLink.NetworkTimeProtocol.UtcNow">
             <summary>
             Gets the current UTC time in NTP format.
             </summary>
            </member>
        <member name="M:FM.IceLink.NetworkTimeProtocol.DateTimeToNTPSeconds(System.DateTime)">
             <summary>
             Converts a date to an NTP timestamp (double).
             </summary>
             <param name="dateTime">The date to convert.</param>
             <returns>The equivalent NTP timestamp.</returns>
            </member>
        <member name="M:FM.IceLink.NetworkTimeProtocol.NTPSecondsToDateTime(System.Double)">
             <summary>
             Converts an NTP timestamp (double) to a date.
             </summary>
             <param name="ntpSeconds">The NTP timestamp to convert.</param>
             <returns>The equivalent date.</returns>
            </member>
        <member name="M:FM.IceLink.NetworkTimeProtocol.DateTimeToNTP(System.DateTime)">
             <summary>
             Converts a date to an NTP timestamp (64 bits).
             </summary>
             <param name="dateTime">The date to convert.</param>
             <returns>The equivalent NTP timestamp.</returns>
            </member>
        <member name="M:FM.IceLink.NetworkTimeProtocol.NTPToDateTime(System.Int64)">
             <summary>
             Converts an NTP timestamp (64 bits) to a date.
             </summary>
             <param name="ntp">The NTP timestamp to convert.</param>
             <returns>The equivalent date.</returns>
            </member>
        <member name="M:FM.IceLink.NetworkTimeProtocol.DateTimeToCompactNTP(System.DateTime)">
             <summary>
             Converts a date to a compact NTP timestamp (32 bits).
             </summary>
             <param name="dateTime">The date to convert.</param>
             <returns>The equivalent NTP timestamp.</returns>
            </member>
        <member name="M:FM.IceLink.NetworkTimeProtocol.CompactNTPToDateTime(System.Int64)">
             <summary>
             Converts a compact NTP timestamp (32 bits) to a date.
             </summary>
             <param name="ntp">The NTP timestamp to convert.</param>
             <returns>The equivalent date.</returns>
            </member>
        <member name="T:FM.IceLink.SDPRtcpAttribute">
             <summary>
             The RTCP attribute is used to document the RTCP port used for media
             stream, when that port is not the next higher (odd) port number
             following the RTP port described in the media line.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtcpAttribute.Port">
             <summary>
             Gets or sets the RTCP port number.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtcpAttribute.NetworkType">
             <summary>
             Gets or sets the type of network. See <see cref="T:FM.IceLink.SDPNetworkType" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtcpAttribute.AddressType">
             <summary>
             Gets or sets the type of the address. See <see cref="T:FM.IceLink.SDPAddressType" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtcpAttribute.ConnectionAddress">
             <summary>
             Gets or sets the RTCP connection address.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPRtcpAttribute.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtcpAttribute" /> class.
             </summary>
             <param name="port">The RTCP port number.</param>
             <param name="connectionAddress">The RTCP connection address.</param>
            </member>
        <member name="M:FM.IceLink.SDPRtcpAttribute.Update(System.Int32,System.String)">
             <summary>
             Updates the port and connection address.
             </summary>
             <param name="port">The port.</param>
             <param name="connectionAddress">The connection address.</param>
            </member>
        <member name="M:FM.IceLink.SDPRtcpAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtcpAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPRtpAvpMedia">
             <summary>
             An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtpAvpMedia.RtpSavpfTransportProtocol">
             <summary>
             Gets the protocol keyword for the extended Secure RTP audio/video profile.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtpAvpMedia.RtpAvpfTransportProtocol">
             <summary>
             Gets the protocol keyword for the extended RTP audio/video profile.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtpAvpMedia.RtpSavpTransportProtocol">
             <summary>
             Gets the protocol keyword for the Secure RTP audio/video profile.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtpAvpMedia.RtpAvpTransportProtocol">
             <summary>
             Gets the protocol keyword for the RTP audio/video profile.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPRtpAvpMedia.#ctor(System.String,System.Int32,System.String,System.Int32[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtpAvpMedia" /> class.
             </summary>
             <param name="mediaType">The media type. See <see cref="T:FM.IceLink.SDPMediaType" /> for possible values.</param>
             <param name="transportPort">The transport port.</param>
             <param name="transportProtocol">The transport protocol.</param>
             <param name="rtpPayloadTypeNumbers">The RTP payload type numbers.</param>
            </member>
        <member name="M:FM.IceLink.SDPRtpAvpMedia.FromRtpMode(FM.IceLink.RtpMode,System.Boolean)">
             <summary>
             Gets the string value of an RTP mode from an enum.
             </summary>
             <param name="rtpMode">The RTP mode.</param>
             <param name="encrypted">Whether the stream is encrypted.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPRtpAvpMedia.ToRtpMode(System.String)">
             <summary>
             Gets the enum value of an RTP mode from a string.
             </summary>
             <param name="rtpAvpMedia">The RTP mode.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPUdpMedia">
             <summary>
             An SDP media description with a transport protocol of "udp".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPUdpMedia.UdpTransportProtocol">
             <summary>
             Gets the protocol keyword for UDP.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPUdpMedia.#ctor(System.String,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPUdpMedia" /> class.
             </summary>
             <param name="mediaType">The media type. See <see cref="T:FM.IceLink.SDPMediaType" /> for possible values.</param>
             <param name="transportPort">The transport port.</param>
             <param name="formatDescription">The format description.</param>
            </member>
        <member name="T:FM.IceLink.SDPPromptEncryptionKey">
             <summary>
             An SDP encryption key with a method of "prompt".
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPUriEncryptionKey">
             <summary>
             An SDP encryption key with a method of "uri".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPUriEncryptionKey.Uri">
             <summary>
             Gets or sets the URI referring to the data containing the key.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPUriEncryptionKey.#ctor(System.Uri)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPUriEncryptionKey" /> class.
             </summary>
             <param name="uri">The URI referring to the data containing the key.</param>
            </member>
        <member name="T:FM.IceLink.SDPBase64EncryptionKey">
             <summary>
             An SDP encryption key with a method of "base64".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPBase64EncryptionKey.EncodedEncryptionKey">
             <summary>
             Gets or sets the base64-encoded encryption key.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPBase64EncryptionKey.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPBase64EncryptionKey" /> class.
             </summary>
             <param name="encodedEncryptionKey">The base64-encoded encryption key.</param>
            </member>
        <member name="T:FM.IceLink.SDPClearEncryptionKey">
             <summary>
             An SDP encryption key with a method of "clear".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPClearEncryptionKey.EncryptionKey">
             <summary>
             Gets or sets the untransformed encryption key.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPClearEncryptionKey.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPClearEncryptionKey" /> class.
             </summary>
             <param name="encryptionKey">The untransformed encryption key.</param>
            </member>
        <member name="T:FM.IceLink.SDPConferenceType">
             <summary>
             Defines valid SDP conference types.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPConferenceType.Broadcast">
             <summary>
             Gets the SDP conference type meaning "Broadcast", which should imply receive-only.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPConferenceType.Meeting">
             <summary>
             Gets the SDP conference type meaning "Meeting", which should imply send-receive.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPConferenceType.Moderated">
             <summary>
             Gets the SDP conference type meaning "Moderated", which should indicate the use of
             a floor control tool and that the media tools are started so as to mute
             new sites joining the conference.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPConferenceType.Test">
             <summary>
             Gets the SDP conference type meaning "Test", which should imply that unless
             explicitly requested otherwise, receivers can safely avoid displaying
             this session description to users.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPConferenceType.H332">
             <summary>
             Gets the SDP conference type meaning "H332", which should imply receive-only and
             indicate that this loosely coupled session is part of an H.332 session.
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPOrientation">
             <summary>
             Defines valid SDP orientations.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrientation.Portrait">
             <summary>
             Gets the SDP orientation meaning "Portrait".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrientation.Landscape">
             <summary>
             Gets the SDP orientation meaning "Landscape".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrientation.Seascape">
             <summary>
             Gets the SDP orientation meaning "Upside-Down Landscape".
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPReceiveOnlyAttribute">
             <summary>
             This specifies that the tools should be started in receive-only
             mode where applicable.  It can be either a session- or media-
             level attribute, and it is not dependent on charset.  Note that
             recvonly applies to the media only, not to any associated
             control protocol (e.g., an RTP-based system in recvonly mode
             SHOULD still send RTCP packets).
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPReceiveOnlyAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPReceiveOnlyAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPReceiveOnlyAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPReceiveOnlyAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPSendReceiveAttribute">
             <summary>
             This specifies that the tools should be started in send and
             receive mode.  This is necessary for interactive conferences
             with tools that default to receive-only mode.  It can be either
             a session or media-level attribute, and it is not dependent on
             charset.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSendReceiveAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSendReceiveAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSendReceiveAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSendReceiveAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPSendOnlyAttribute">
             <summary>
             This specifies that the tools should be started in send-only
             mode.  An example may be where a different unicast address is
             to be used for a traffic destination than for a traffic source.
             In such a case, two media descriptions may be used, one
             sendonly and one recvonly.  It can be either a session- or
             media-level attribute, but would normally only be used as a
             media attribute.  It is not dependent on charset.  Note that
             sendonly applies only to the media, and any associated control
             protocol (e.g., RTCP) SHOULD still be received and processed as
             normal.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSendOnlyAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSendOnlyAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSendOnlyAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSendOnlyAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPInactiveAttribute">
             <summary>
             This specifies that the tools should be started in inactive
             mode.  This is necessary for interactive conferences where
             users can put other users on hold.  No media is sent over an
             inactive media stream.  Note that an RTP-based system SHOULD
             still send RTCP, even if started inactive.  It can be either a
             session or media-level attribute, and it is not dependent on
             charset.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPInactiveAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPInactiveAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPInactiveAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPInactiveAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPOrientationAttribute">
             <summary>
             Normally this is only used for a whiteboard or presentation
             tool.  It specifies the orientation of a the workspace on the
             screen.  It is a media-level attribute.  Permitted values are
             "portrait", "landscape", and "seascape" (upside-down
             landscape).  It is not dependent on charset.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrientationAttribute.Orientation">
             <summary>
             Gets or sets the orientation of a workspace on the screen. See <see cref="T:FM.IceLink.SDPOrientation" /> for possible values.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPOrientationAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPOrientationAttribute" /> class.
             </summary>
             <param name="orientation">The orientation of a workspace on the screen. See <see cref="T:FM.IceLink.SDPOrientation" /> for possible values.</param>
            </member>
        <member name="M:FM.IceLink.SDPOrientationAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPOrientationAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPConferenceTypeAttribute">
             <summary>
             This specifies the type of the conference.  Suggested values
             are "broadcast", "meeting", "moderated", "test", and "H332".
             "recvonly" should be the default for "type:broadcast" sessions,
             "type:meeting" should imply "sendrecv", and "type:moderated"
             should indicate the use of a floor control tool and that the
             media tools are started so as to mute new sites joining the
             conference.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPConferenceTypeAttribute.ConferenceType">
             <summary>
             Gets or sets the type of the conference. See <see cref="T:FM.IceLink.SDPConferenceType" /> for possible values.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPConferenceTypeAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPConferenceTypeAttribute" /> class.
             </summary>
             <param name="conferenceType">The type of the conference. See <see cref="T:FM.IceLink.SDPConferenceType" /> for possible values.</param>
            </member>
        <member name="M:FM.IceLink.SDPConferenceTypeAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPConferenceTypeAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPCharacterSetAttribute">
             <summary>
             This specifies the character set to be used to display the
             session name and information data.  By default, the ISO-10646
             character set in UTF-8 encoding is used.  If a more compact
             representation is required, other character sets may be used.
             For example, the ISO 8859-1 is specified with the following SDP
             attribute:
             
                a=charset:ISO-8859-1
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCharacterSetAttribute.CharacterSet">
             <summary>
             Gets or sets the character set to be used to display the session name and information data.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPCharacterSetAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPCharacterSetAttribute" /> class.
             </summary>
             <param name="characterSet">The character set to be used to display the session name and information data.</param>
            </member>
        <member name="M:FM.IceLink.SDPCharacterSetAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPCharacterSetAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPSdpLanguageAttribute">
             <summary>
             This can be a session-level attribute or a media-level
             attribute.  As a session-level attribute, it specifies the
             language for the session description.  As a media-level
             attribute, it specifies the language for any media-level SDP
             information field associated with that media.  Multiple sdplang
             attributes can be provided either at session or media level if
             multiple languages in the session description or media use
             multiple languages, in which case the order of the attributes
             indicates the order of importance of the various languages in
             the session or media from most important to least important.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPSdpLanguageAttribute.LanguageTag">
             <summary>
             Gets or sets the language for either the session description
             (if used as a session-level attribute) or any media-level SDP
             information field associated with that media (if used as a
             media-level attribute).
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPSdpLanguageAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSdpLanguageAttribute" /> class.
             </summary>
             <param name="languageTag">The language for either the session description
             (if used as a session-level attribute) or any media-level SDP
             information field associated with that media (if used as a
             media-level attribute).</param>
            </member>
        <member name="M:FM.IceLink.SDPSdpLanguageAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPSdpLanguageAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPLanguageAttribute">
             <summary>
             This can be a session-level attribute or a media-level
             attribute.  As a session-level attribute, it specifies the
             default language for the session being described.  As a media-
             level attribute, it specifies the language for that media,
             overriding any session-level language specified.  Multiple lang
             attributes can be provided either at session or media level if
             the session description or media use multiple languages, in
             which case the order of the attributes indicates the order of
             importance of the various languages in the session or media
             from most important to least important.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPLanguageAttribute.LanguageTag">
             <summary>
             Gets or sets the default language for the session being described
             (if used as a session-level attribute) or the language for a media
             stream (if used as a media-level attribute).
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPLanguageAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPLanguageAttribute" /> class.
             </summary>
             <param name="languageTag">The default language for the session being described
             (if used as a session-level attribute) or the language for a media
             stream (if used as a media-level attribute).</param>
            </member>
        <member name="M:FM.IceLink.SDPLanguageAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPLanguageAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPFrameRateAttribute">
             <summary>
             This gives the maximum video frame rate in frames/sec.  It is
             intended as a recommendation for the encoding of video data.
             Decimal representations of fractional values using the notation
             "integer.fraction" are allowed.  It is a media-level
             attribute, defined only for video media, and it is not
             dependent on charset.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPFrameRateAttribute.FrameRate">
             <summary>
             Gets or sets the maximum video frame rate in frames/second.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPFrameRateAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPFrameRateAttribute" /> class.
             </summary>
             <param name="frameRate">The maximum video frame rate in frames/second.</param>
            </member>
        <member name="M:FM.IceLink.SDPFrameRateAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPFrameRateAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPQualityAttribute">
             <summary>
             This gives a suggestion for the quality of the encoding as an
             integer value.  The intention of the quality attribute for
             video is to specify a non-default trade-off between frame-rate
             and still-image quality.  For video, the value is in the range
             0 to 10, with the following suggested meaning:
             
                10 - the best still-image quality the compression scheme can
                     give.
                5  - the default behaviour given no quality suggestion.
                0  - the worst still-image quality the codec designer thinks
                     is still usable.
             
             It is a media-level attribute, and it is not dependent on
             charset.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPQualityAttribute.Quality">
             <summary>
             Gets or sets the suggested quality of the encoding as an integer value from 0-10.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPQualityAttribute.#ctor(System.Byte)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPQualityAttribute" /> class.
             </summary>
             <param name="quality">The suggested quality of the encoding as an integer value from 0-10.</param>
            </member>
        <member name="M:FM.IceLink.SDPQualityAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPQualityAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPFormatParametersAttribute">
             <summary>
             This attribute allows parameters that are specific to a
             particular format to be conveyed in a way that SDP does not
             have to understand them.  The format must be one of the formats
             specified for the media.  Format-specific parameters may be any
             set of parameters required to be conveyed by SDP and given
             unchanged to the media tool that will use this format.  At most
             one instance of this attribute is allowed for each format.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPFormatParametersAttribute.Format">
             <summary>
             Gets or sets the format.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPFormatParametersAttribute.FormatSpecificParameters">
             <summary>
             Gets or sets the format-specific parameters.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPFormatParametersAttribute.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPFormatParametersAttribute" /> class.
             </summary>
             <param name="format">The format.</param>
             <param name="formatSpecificParameters">The format-specific parameters.</param>
            </member>
        <member name="M:FM.IceLink.SDPFormatParametersAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPFormatParametersAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPRtpMapAttribute">
             <summary>
             This attribute maps from an RTP payload type number (as used in
             an "m=" line) to an encoding name denoting the payload format
             to be used.  It also provides information on the clock rate and
             encoding parameters.  It is a media-level attribute that is not
             dependent on charset.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtpMapAttribute.PayloadType">
             <summary>
             Gets or sets the RTP payload type number.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtpMapAttribute.EncodingName">
             <summary>
             Gets or sets the encoding name denoting the payload format to be used.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtpMapAttribute.ClockRate">
             <summary>
             Gets or sets the payload clock rate.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRtpMapAttribute.EncodingParameters">
             <summary>
             Gets or sets encoding parameters for the payload.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPRtpMapAttribute.#ctor(System.Int32,System.String,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtpMapAttribute" /> class.
             </summary>
             <param name="payloadType">The RTP payload type number.</param>
             <param name="encodingName">The encoding name denoting the payload format to be used.</param>
             <param name="clockRate">The payload clock rate.</param>
            </member>
        <member name="M:FM.IceLink.SDPRtpMapAttribute.#ctor(System.Int32,System.String,System.Int64,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtpMapAttribute" /> class.
             </summary>
             <param name="payloadType">The RTP payload type number.</param>
             <param name="encodingName">The encoding name denoting the payload format to be used.</param>
             <param name="clockRate">The payload clock rate.</param>
             <param name="encodingParameters">The encoding parameters for the payload.</param>
            </member>
        <member name="M:FM.IceLink.SDPRtpMapAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRtpMapAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPMaxPacketTimeAttribute">
             <summary>
             This gives the maximum amount of media that can be encapsulated
             in each packet, expressed as time in milliseconds.  The time
             SHALL be calculated as the sum of the time the media present in
             the packet represents.  For frame-based codecs, the time SHOULD
             be an integer multiple of the frame size.  This attribute is
             probably only meaningful for audio data, but may be used with
             other media types if it makes sense.  It is a media-level
             attribute, and it is not dependent on charset.  Note that this
             attribute was introduced after RFC 2327, and non-updated
             implementations will ignore this attribute.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMaxPacketTimeAttribute.MaxPacketTime">
             <summary>
             Gets or sets the maximum amount of media that can be encapsulated,
             in each packet, expressed as time in milliseconds.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPMaxPacketTimeAttribute.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPMaxPacketTimeAttribute" /> class.
             </summary>
             <param name="maxPacketTime">The maximum amount of media that can be encapsulated,
             in each packet, expressed as time in milliseconds.</param>
            </member>
        <member name="M:FM.IceLink.SDPMaxPacketTimeAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPMaxPacketTimeAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPPacketTimeAttribute">
             <summary>
             This gives the length of time in milliseconds represented by
             the media in a packet.  This is probably only meaningful for
             audio data, but may be used with other media types if it makes
             sense.  It should not be necessary to know ptime to decode RTP
             or vat audio, and it is intended as a recommendation for the
             encoding/packetisation of audio.  It is a media-level
             attribute, and it is not dependent on charset.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPPacketTimeAttribute.PacketTime">
             <summary>
             Gets or sets the length of time in milliseconds represented by
             the media in a packet.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPPacketTimeAttribute.#ctor(System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPPacketTimeAttribute" /> class.
             </summary>
             <param name="packetTime">The length of time in milliseconds represented by
             the media in a packet.</param>
            </member>
        <member name="M:FM.IceLink.SDPPacketTimeAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPPacketTimeAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPToolAttribute">
             <summary>
             This gives the name and version number of the tool used to
             create the session description.  It is a session-level
             attribute, and it is not dependent on charset.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPToolAttribute.Tool">
             <summary>
             Gets or sets the name and version number of the
             tool used to create the session description.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPToolAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPToolAttribute" /> class.
             </summary>
             <param name="tool">The name and version number of the
             tool used to create the session description.</param>
            </member>
        <member name="M:FM.IceLink.SDPToolAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPToolAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPKeywordsAttribute">
             <summary>
             Like the cat attribute, this is to assist identifying wanted
             sessions at the receiver.  This allows a receiver to select
             interesting session based on keywords describing the purpose of
             the session; there is no central registry of keywords.  It is a
             session-level attribute.  It is a charset-dependent attribute,
             meaning that its value should be interpreted in the charset
             specified for the session description if one is specified, or
             by default in ISO 10646/UTF-8.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPKeywordsAttribute.Keywords">
             <summary>
             Gets or sets the keywords describing the purpose of the session.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPKeywordsAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPKeywordsAttribute" /> class.
             </summary>
             <param name="keywords">The keywords describing the purpose of the session.</param>
            </member>
        <member name="M:FM.IceLink.SDPKeywordsAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPKeywordsAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPCategoryAttribute">
             <summary>
             This attribute gives the dot-separated hierarchical category of
             the session.  This is to enable a receiver to filter unwanted
             sessions by category.  There is no central registry of
             categories.  It is a session-level attribute, and it is not
             dependent on charset.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPCategoryAttribute.Category">
             <summary>
             Gets or sets the dot-separated hierarchical category of the session.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPCategoryAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPCategoryAttribute" /> class.
             </summary>
             <param name="category">The dot-separated hierarchical category of the session.</param>
            </member>
        <member name="M:FM.IceLink.SDPCategoryAttribute.FromValue(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPCategoryAttribute" /> class.
             </summary>
             <param name="value">The attribute value.</param>
            </member>
        <member name="T:FM.IceLink.SDPMediaType">
             <summary>
             Defines valid SDP media types.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaType.Audio">
             <summary>
             Gets the SDP media type meaning "Audio".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaType.Video">
             <summary>
             Gets the SDP media type meaning "Video".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaType.Text">
             <summary>
             Gets the SDP media type meaning "Text".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaType.Application">
             <summary>
             Gets the SDP media type meaning "Application".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaType.Message">
             <summary>
             Gets the SDP media type meaning "Message".
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPMediaType.GetStreamType(System.String)">
             <summary>
             Converts a media-type string to an StreamType enum.
             </summary>
             <param name="mediaType">The media-type string.</param>
             <returns>The StreamType enum.</returns>
            </member>
        <member name="M:FM.IceLink.SDPMediaType.GetMediaType(FM.IceLink.StreamType)">
             <summary>
             Converts an StreamType enum to a media-type string.
             </summary>
             <param name="streamType">The StreamType enum.</param>
             <returns>The media-type string.</returns>
            </member>
        <member name="T:FM.IceLink.SDPMedia">
             <summary>
             An SDP media element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMedia.MediaType">
             <summary>
             Gets or sets the media type. See <see cref="T:FM.IceLink.SDPMediaType" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMedia.TransportPort">
             <summary>
             Gets or sets the transport port.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMedia.TransportProtocol">
             <summary>
             Gets or sets the transport protocol.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMedia.NumberOfPorts">
             <summary>
             Gets or sets the number of ports.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMedia.FormatDescription">
             <summary>
             Gets or sets the format description.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMedia.SctpPort">
             <summary>
             Gets or sets the SCTP port.
             </summary>
             <value>
             The SCTP port.
             </value>
            </member>
        <member name="M:FM.IceLink.SDPMedia.#ctor(System.String,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPMedia" /> class.
             </summary>
             <param name="mediaType">The media type. See <see cref="T:FM.IceLink.SDPMediaType" /> for possible values.</param>
             <param name="transportPort">The transport port.</param>
             <param name="transportProtocol">The transport protocol.</param>
            </member>
        <member name="M:FM.IceLink.SDPMedia.#ctor(System.String,System.Int32,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPMedia" /> class.
             </summary>
             <param name="mediaType">The media type. See <see cref="T:FM.IceLink.SDPMediaType" /> for possible values.</param>
             <param name="transportPort">The transport port.</param>
             <param name="transportProtocol">The transport protocol.</param>
             <param name="formatDescription">The format description.</param>
            </member>
        <member name="M:FM.IceLink.SDPMedia.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPMedia.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPMedia" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPAttributeCreationDelegate">
             <summary>
             Delegate invoked when an SDP attribute should be created.
             </summary>
             <param name="e">The event arguments.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPAttributeCreationArgs">
             <summary>
             SDP attribute-creation arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPAttributeCreationArgs.Value">
             <summary>
             Gets or sets the value.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPAttributeCreationArgs.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPAttributeCreationArgs" /> class.
             </summary>
             <param name="value">The value.</param>
            </member>
        <member name="T:FM.IceLink.SDPAttributeRegistration">
             <summary>
             An SDP attribute registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPAttributeRegistration.Name">
             <summary>
             Gets or sets the name.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPAttributeRegistration.SessionLevel">
             <summary>
             Gets or sets a value indicating whether the attribute applies to sessions.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPAttributeRegistration.MediaLevel">
             <summary>
             Gets or sets a value indicating whether the attribute applies to media streams.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPAttributeRegistration.CreationDelegate">
             <summary>
             Gets or sets the creation delegate.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPAttributeRegistration.#ctor(System.String,System.Boolean,System.Boolean,FM.IceLink.SDPAttributeCreationDelegate)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPAttributeRegistration" /> class.
             </summary>
             <param name="name">The name.</param>
             <param name="sessionLevel">A value indicating whether the attribute applies to sessions.</param>
             <param name="mediaLevel">A value indicating whether the attribute applies to media streams.</param>
             <param name="creationDelegate">The creation delegate.</param>
            </member>
        <member name="T:FM.IceLink.SDPAttribute">
             <summary>
             An SDP attribute.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPAttribute.RegisterAttribute(System.Type,System.String,System.Boolean,System.Boolean,FM.IceLink.SDPAttributeCreationDelegate)">
             <summary>
             Registers an attribute type.
             </summary>
             <param name="type">The attribute type.</param>
             <param name="name">The name.</param>
             <param name="sessionLevel">Whether the attribute applies to sessions.</param>
             <param name="mediaLevel">Whether the attribute applies to media streams.</param>
             <param name="creationDelegate">The creation delegate.</param>
            </member>
        <member name="M:FM.IceLink.SDPAttribute.UnregisterAttribute(System.Type)">
             <summary>
             Unregisters an attribute type.
             </summary>
             <param name="type">The attribute type.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPAttribute.GetTypeName(System.Type)">
             <summary>
             Gets the name of the attribute type.
             </summary>
             <param name="type">The attribute type.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPAttribute.IsSessionLevel(System.Type)">
             <summary>
             Determines whether the type applies to sessions.
             </summary>
             <param name="type">The type.</param>
            </member>
        <member name="M:FM.IceLink.SDPAttribute.IsMediaLevel(System.Type)">
             <summary>
             Determines whether the type applies to media streams.
             </summary>
             <param name="type">The type.</param>
            </member>
        <member name="M:FM.IceLink.SDPAttribute.CreateAttribute(System.String,System.String)">
             <summary>
             Creates an attribute.
             </summary>
             <param name="name">The name.</param>
             <param name="value">The value.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPAttribute.GetValue">
             <summary>
             Gets the value of the attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPAttribute.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPAttribute.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPConnectionData" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPEncryptionKey">
             <summary>
             An SDP encryption key element.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPEncryptionKey.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPEncryptionKey" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPEncryptionKey.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPTimeZones">
             <summary>
             An SDP time zones element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPTimeZones.TimeZones">
             <summary>
             Gets the array of time zone adjustments.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPTimeZones.#ctor(FM.IceLink.SDPTimeZone[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPTimeZones" /> class.
             </summary>
             <param name="timeZones">The time zone adjustments.</param>
            </member>
        <member name="M:FM.IceLink.SDPTimeZones.AddTimeZone(FM.IceLink.SDPTimeZone)">
             <summary>
             Adds a time zone adjustment.
             </summary>
             <param name="timeZone">The time zone adjustment to add.</param>
            </member>
        <member name="M:FM.IceLink.SDPTimeZones.RemoveTimeZone(FM.IceLink.SDPTimeZone)">
             <summary>
             Removes a time zone adjustment.
             </summary>
             <param name="timeZone">The time zone adjustment to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPTimeZones.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPTimeZones.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPTimeZones" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPRepeatTime">
             <summary>
             An SDP repeat time element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRepeatTime.RepeatInterval">
             <summary>
             Gets or sets the repeat interval.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRepeatTime.ActiveDuration">
             <summary>
             Gets or sets the active duration.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPRepeatTime.Offsets">
             <summary>
             Gets the array of offsets from the start time.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPRepeatTime.#ctor(System.TimeSpan,System.TimeSpan)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRepeatTime" /> class.
             </summary>
             <param name="repeatInterval">The repeat interval.</param>
             <param name="activeDuration">The active duration.</param>
            </member>
        <member name="M:FM.IceLink.SDPRepeatTime.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPRepeatTime" /> class.
             </summary>
             <param name="repeatInterval">The repeat interval.</param>
             <param name="activeDuration">The active duration.</param>
             <param name="offsets">The offsets from the start time.</param>
            </member>
        <member name="M:FM.IceLink.SDPRepeatTime.AddOffset(System.TimeSpan)">
             <summary>
             Adds an offset from the start time.
             </summary>
             <param name="offset">The offset from the start time to add.</param>
            </member>
        <member name="M:FM.IceLink.SDPRepeatTime.RemoveOffset(System.TimeSpan)">
             <summary>
             Removes an offset from the start time.
             </summary>
             <param name="offset">The offset from the start time to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPRepeatTime.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPRepeatTime.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPRepeatTime" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPBandwidthType">
             <summary>
             Defines valid SDP bandwidth types.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPBandwidthType.ConferenceTotal">
             <summary>
             Gets the SDP bandwidth type meaning "Conference Total".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPBandwidthType.ApplicationSpecific">
             <summary>
             Gets the SDP bandwidth type meaning "Application Specific".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPBandwidthType.RtcpSenders">
             <summary>
             Gets the SDP bandwidth type meaning "RTCP Senders".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPBandwidthType.RtcpReceivers">
             <summary>
             Gets the SDP bandwidth type meaning "RTCP Receivers".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPBandwidthType.TransportIndependentApplicationSpecificMaximum">
             <summary>
             Gets the SDP bandwidth type meaning "Transport Independent Application Specific Maximum".
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPAddressType">
             <summary>
             Defines valid SDP address types.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPAddressType.IP4">
             <summary>
             Gets the SDP address type meaning "IP version 4".
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPAddressType.IP6">
             <summary>
             Gets the SDP address type meaning "IP version 6".
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPAddressType.GetAddressTypeForAddress(System.String)">
             <summary>
             Gets the SDP address type for the specified IP address.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPBandwidth">
             <summary>
             An SDP bandwidth element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPBandwidth.BandwidthType">
             <summary>
             Gets or sets the type of bandwidth. See <see cref="T:FM.IceLink.SDPBandwidthType" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPBandwidth.Bandwidth">
             <summary>
             Gets or sets the bandwidth, typically in kilobits per second.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPBandwidth.#ctor(System.String,System.Int64)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPBandwidth" /> class.
             </summary>
             <param name="bandwidthType">The type of bandwidth. See <see cref="T:FM.IceLink.SDPBandwidthType" /> for possible values.</param>
             <param name="bandwidth">The bandwidth, typically in kilobits per second.</param>
            </member>
        <member name="M:FM.IceLink.SDPBandwidth.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPBandwidth.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPBandwidth" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPConnectionData">
             <summary>
             An SDP connection data element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPConnectionData.NetworkType">
             <summary>
             Gets or sets the type of network. See <see cref="T:FM.IceLink.SDPNetworkType" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPConnectionData.AddressType">
             <summary>
             Gets or sets the type of the address. See <see cref="T:FM.IceLink.SDPAddressType" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPConnectionData.ConnectionAddress">
             <summary>
             Gets or sets the connection address.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPConnectionData.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPConnectionData" /> class.
             </summary>
             <param name="connectionAddress">The connection address.</param>
            </member>
        <member name="M:FM.IceLink.SDPConnectionData.Update(System.String)">
             <summary>
             Updates the connection address.
             </summary>
             <param name="connectionAddress">The connection address.</param>
            </member>
        <member name="M:FM.IceLink.SDPConnectionData.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPConnectionData.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPConnectionData" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPMediaDescription">
             <summary>
             An SDP media description element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaDescription.Media">
            
             REQUIRED ** <summary>
             Gets or sets the media name and transport address.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaDescription.MediaTitle">
            
             OPTIONAL ** <summary>
             Gets or sets the media title.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaDescription.ConnectionData">
             <summary>
             Gets or sets media-level connection data.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaDescription.Bandwidths">
             <summary>
             Gets the array of proposed bandwidths to be used by the media. 
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaDescription.EncryptionKey">
             <summary>
             Gets or sets the media-level encryption key.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMediaDescription.MediaAttributes">
             <summary>
             Gets the array of media-level attributes.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPMediaDescription.#ctor(FM.IceLink.SDPMedia)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPMediaDescription" /> class.
             </summary>
             <param name="media">The media name and transport address.</param>
            </member>
        <member name="M:FM.IceLink.SDPMediaDescription.AddBandwidth(FM.IceLink.SDPBandwidth)">
             <summary>
             Adds a proposed bandwidth.
             </summary>
             <param name="bandwidth">The proposed bandwidth to add.</param>
            </member>
        <member name="M:FM.IceLink.SDPMediaDescription.RemoveBandwidth(FM.IceLink.SDPBandwidth)">
             <summary>
             Removes a proposed bandwidth.
             </summary>
             <param name="bandwidth">The proposed bandwidth to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPMediaDescription.AddMediaAttribute(FM.IceLink.SDPAttribute)">
             <summary>
             Adds a media-level attribute.
             </summary>
             <param name="attribute">The session-level attribute to add.</param>
            </member>
        <member name="M:FM.IceLink.SDPMediaDescription.RemoveMediaAttribute(FM.IceLink.SDPAttribute)">
             <summary>
             Removes a media-level attribute.
             </summary>
             <param name="attribute">The session-level attribute to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPMediaDescription.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPMediaDescription.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPMediaDescription" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPMessage">
             <summary>
             An SDP message.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.ProtocolVersion">
            
             REQUIRED ** <summary>
             Gets or sets the version of the Session Description Protocol.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.SessionName">
             <summary>
             Gets or sets the textual session name.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.Origin">
             <summary>
             Gets or sets the originator of the session plus a session identifier and version number.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.SessionInformation">
            
             OPTIONAL ** <summary>
             Gets or sets textual information about the session.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.Uri">
             <summary>
             Gets or sets the pointer to additional information about the session.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.EmailAddress">
             <summary>
             Gets or sets the email address for the person responsible for the conference.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.PhoneNumber">
             <summary>
             Gets or sets the phone number for the person responsible for the conference.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.ConnectionData">
             <summary>
             Gets or sets session-level connection data.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.Bandwidths">
             <summary>
             Gets the array of proposed bandwidths to be used by the session. 
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.TimeDescriptions">
             <summary>
             Gets the array of start, stop, and repeat times for the session.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.TimeZoneAdjustments">
             <summary>
             Gets or sets the time zone adjustments.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.EncryptionKey">
             <summary>
             Gets or sets the session-level encryption key.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.SessionAttributes">
             <summary>
             Gets the array of session-level attributes.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPMessage.MediaDescriptions">
             <summary>
             Gets the array of media descriptions.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPMessage.#ctor(FM.IceLink.SDPOrigin)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPMessage" /> class.
             </summary>
             <param name="origin">The originator of the session plus a session identifier and version number.</param>
            </member>
        <member name="M:FM.IceLink.SDPMessage.#ctor(FM.IceLink.SDPOrigin,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPMessage" /> class.
             </summary>
             <param name="origin">The originator of the session plus a session identifier and version number.</param>
             <param name="sessionName">The textual session name.</param>
            </member>
        <member name="M:FM.IceLink.SDPMessage.#ctor(FM.IceLink.SDPOrigin,System.String,FM.IceLink.SDPTimeDescription[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPMessage" /> class.
             </summary>
             <param name="origin">The originator of the session plus a session identifier and version number.</param>
             <param name="sessionName">The textual session name.</param>
             <param name="timeDescriptions">The array of start, stop, and repeat times for the session.</param>
            </member>
        <member name="M:FM.IceLink.SDPMessage.AddBandwidth(FM.IceLink.SDPBandwidth)">
             <summary>
             Adds a proposed bandwidth.
             </summary>
             <param name="bandwidth">The proposed bandwidth to add.</param>
            </member>
        <member name="M:FM.IceLink.SDPMessage.RemoveBandwidth(FM.IceLink.SDPBandwidth)">
             <summary>
             Removes a proposed bandwidth.
             </summary>
             <param name="bandwidth">The proposed bandwidth to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPMessage.AddTimeDescription(FM.IceLink.SDPTimeDescription)">
             <summary>
             Adds a start, stop, and repeat time.
             </summary>
             <param name="timeDescription">The start, stop, and repeat time to add.</param>
            </member>
        <member name="M:FM.IceLink.SDPMessage.RemoveTimeDescription(FM.IceLink.SDPTimeDescription)">
             <summary>
             Removes a start, stop, and repeat time.
             </summary>
             <param name="timeDescription">The start, stop, and repeat time to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPMessage.RemoveTimeDescriptions">
             <summary>
             Removes all time descriptions.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPMessage.AddSessionAttribute(FM.IceLink.SDPAttribute)">
             <summary>
             Adds a session-level attribute.
             </summary>
             <param name="attribute">The session-level attribute to add.</param>
            </member>
        <member name="M:FM.IceLink.SDPMessage.RemoveSessionAttribute(FM.IceLink.SDPAttribute)">
             <summary>
             Removes a session-level attribute.
             </summary>
             <param name="attribute">The session-level attribute to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPMessage.AddMediaDescription(FM.IceLink.SDPMediaDescription)">
             <summary>
             Adds a media description.
             </summary>
             <param name="mediaDescription">The media description to add.</param>
            </member>
        <member name="M:FM.IceLink.SDPMessage.RemoveMediaDescription(FM.IceLink.SDPMediaDescription)">
             <summary>
             Removes a media description.
             </summary>
             <param name="mediaDescription">The media description to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPMessage.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPMessage.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPMessage" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPNetworkType">
             <summary>
             Defines valid SDP network types.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPNetworkType.Internet">
             <summary>
             Gets the SDP network type meaning "Internet".
             </summary>
            </member>
        <member name="T:FM.IceLink.SDPOrigin">
             <summary>
             An SDP origin element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrigin.Username">
             <summary>
             Gets or sets the user's login on the originating host.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrigin.SessionId">
             <summary>
             Gets or sets the globally unique identifier for the session.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrigin.SessionVersion">
             <summary>
             Gets or sets the version number for the session.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrigin.NetworkType">
             <summary>
             Gets or sets the type of network. See <see cref="T:FM.IceLink.SDPNetworkType" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrigin.AddressType">
             <summary>
             Gets or sets the type of the address. See <see cref="T:FM.IceLink.SDPAddressType" /> for possible values.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPOrigin.UnicastAddress">
             <summary>
             Gets or sets the address of the machine from which the session was created.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPOrigin.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPOrigin" /> class.
             </summary>
             <param name="unicastAddress">The address of the machine from which the session was created.</param>
            </member>
        <member name="M:FM.IceLink.SDPOrigin.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPOrigin" /> class.
             </summary>
             <param name="unicastAddress">The address of the machine from which the session was created.</param>
             <param name="username">The user's login on the originating host.</param>
            </member>
        <member name="M:FM.IceLink.SDPOrigin.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPOrigin.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPOrigin" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPTimeDescription">
             <summary>
             An SDP time description element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPTimeDescription.Timing">
            
             REQUIRED ** <summary>
             Gets or sets the start and stop time.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPTimeDescription.RepeatTimes">
            
             OPTIONAL ** <summary>
             Gets the array of repeat times.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPTimeDescription.#ctor(FM.IceLink.SDPTiming)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPTimeDescription" /> class.
             </summary>
             <param name="timing">The start and stop time.</param>
            </member>
        <member name="M:FM.IceLink.SDPTimeDescription.AddRepeatTime(FM.IceLink.SDPRepeatTime)">
             <summary>
             Adds a repeat time.
             </summary>
             <param name="repeatTime">The repeat time to add.</param>
            </member>
        <member name="M:FM.IceLink.SDPTimeDescription.RemoveRepeatTime(FM.IceLink.SDPRepeatTime)">
             <summary>
             Removes a repeat time.
             </summary>
             <param name="repeatTime">The repeat time to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPTimeDescription.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPTimeDescription.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPTimeDescription" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPTimeZone">
             <summary>
             An SDP time zone element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPTimeZone.AdjustmentTime">
             <summary>
             Gets or sets the time that a time zone adjustment happens.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPTimeZone.Offset">
             <summary>
             Gets or sets the offset from the time when the session was first scheduled.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPTimeZone.#ctor(System.DateTime,System.TimeSpan)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPTimeZone" /> class.
             </summary>
             <param name="adjustmentTime">The time that a time zone adjustment happens.</param>
             <param name="offset">The offset from the time when the session was first scheduled.</param>
            </member>
        <member name="M:FM.IceLink.SDPTimeZone.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPTimeZone.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPTimeZone" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.SDPTiming">
             <summary>
             An SDP timing element.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPTiming.StartTime">
             <summary>
             Gets or sets the start time.
             </summary>
            </member>
        <member name="P:FM.IceLink.SDPTiming.StopTime">
             <summary>
             Gets or sets the stop time.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPTiming.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPTiming" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.SDPTiming.#ctor(System.DateTime,System.DateTime)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.SDPTiming" /> class.
             </summary>
             <param name="startTime">The start time.</param>
             <param name="stopTime">The stop time.</param>
            </member>
        <member name="M:FM.IceLink.SDPTiming.ToString">
             <summary>
             Converts this instance to a string.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.SDPTiming.Parse(System.String)">
             <summary>
             Creates an <see cref="T:FM.IceLink.SDPTiming" /> instance from a string.
             </summary>
             <param name="s">The string to parse.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUN">
             <summary>
             STUN-wide methods.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUN.CreateLongTermKey(System.String,System.String,System.String)">
             <summary>
             Creates a long term key from the given username, realm, and password by calculating
             the MD5 hash of their values concatenated as "username:realm:password".
             </summary>
             <param name="username">The username.</param>
             <param name="realm">The realm.</param>
             <param name="password">The password.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUN.CreateShortTermKey(System.String)">
             <summary>
             Creates a short term key from the given password by encoding it as a UTF-8 byte array.
             </summary>
             <param name="password">The password.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUNBindingIndication">
             <summary>
             A STUN binding indication.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNBindingIndication.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNBindingIndication" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNBindingMessage">
             <summary>
             A generic STUN binding message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNBindingMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNBindingMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNBadRequestException">
             <summary>
             The request was malformed.  The client SHOULD NOT
             retry the request without modification from the previous
             attempt.  The server may not be able to generate a valid
             MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
             a valid MESSAGE-INTEGRITY attribute on this response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNBadRequestException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNBadRequestException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNBadRequestException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNBadRequestException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNBindingRequest">
             <summary>
             A STUN binding request.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNBindingRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNBindingRequest" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNBindingResponse">
             <summary>
             A STUN binding response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNBindingResponse.#ctor(System.Byte[],System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNBindingResponse" /> class.
             </summary>
             <param name="transactionId">The transaction ID.</param>
             <param name="success">Whether the request was successful.</param>
            </member>
        <member name="T:FM.IceLink.STUNExceptionCreationDelegate">
             <summary>
             Delegate invoked when a STUN exception should be created.
             </summary>
             <param name="e">The event arguments.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUNExceptionCreationArgs">
             <summary>
             STUN exception-creation arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNExceptionCreationArgs.Response">
             <summary>
             Gets or sets the response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNExceptionCreationArgs.#ctor(FM.IceLink.STUNMessage)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNExceptionCreationArgs" /> class.
             </summary>
             <param name="response">The response.</param>
            </member>
        <member name="T:FM.IceLink.STUNExceptionRegistration">
             <summary>
             A STUN exception registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNExceptionRegistration.Code">
             <summary>
             Gets or sets the code.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNExceptionRegistration.CreationDelegate">
             <summary>
             Gets or sets the creation delegate.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNExceptionRegistration.#ctor(System.Int32,FM.IceLink.STUNExceptionCreationDelegate)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNExceptionRegistration" /> class.
             </summary>
             <param name="code">The code.</param>
             <param name="creationDelegate">The creation delegate.</param>
            </member>
        <member name="T:FM.IceLink.STUNException">
             <summary>
             A STUN exception.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNException.RegisterException(System.Type,System.Int32,FM.IceLink.STUNExceptionCreationDelegate)">
             <summary>
             Registers an exception type.
             </summary>
             <param name="type">The exception type.</param>
             <param name="code">The code.</param>
             <param name="creationDelegate">The creation delegate.</param>
            </member>
        <member name="M:FM.IceLink.STUNException.UnregisterException(System.Type)">
             <summary>
             Unregisters the exception type.
             </summary>
             <param name="type">The exception type.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNException.GetCode(System.Type)">
             <summary>
             Gets the exception code.
             </summary>
             <param name="type">The exception type.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNException.CreateException(System.Int32,FM.IceLink.STUNMessage)">
             <summary>
             Creates an exception.
             </summary>
             <param name="code">The code.</param>
             <param name="response">The response.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNUnknownErrorCodeException">
             <summary>
             Exception raised when a failed response contains
             an unknown error code.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNUnknownErrorCodeException.ErrorCode">
             <summary>
             Gets or sets the error code.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnknownErrorCodeException.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnknownErrorCodeException" /> class.
             </summary>
             <param name="errorCode">The error code.</param>
            </member>
        <member name="M:FM.IceLink.STUNUnknownErrorCodeException.#ctor(System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnknownErrorCodeException" /> class.
             </summary>
             <param name="message">The message.</param>
             <param name="errorCode">The error code.</param>
            </member>
        <member name="T:FM.IceLink.STUNTryAlternateException">
             <summary>
             The client should contact an alternate server for
             this request.  This error response MUST only be sent if the
             request included a USERNAME attribute and a valid MESSAGE-
             INTEGRITY attribute; otherwise, it MUST NOT be sent and error
             code 400 (Bad Request) is suggested.  This error response MUST
             be protected with the MESSAGE-INTEGRITY attribute, and receivers
             MUST validate the MESSAGE-INTEGRITY of this response before
             redirecting themselves to an alternate server.
             
             Note: Failure to generate and validate message integrity
             for a 300 response allows an on-path attacker to falsify a
             300 response thus causing subsequent STUN messages to be
             sent to a victim.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNTryAlternateException.AlternateServer">
             <summary>
             Gets or sets the alternate server attribute.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNTryAlternateException.#ctor(FM.IceLink.STUNAlternateServerAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNTryAlternateException" /> class.
             </summary>
             <param name="alternateServer">The alternate server attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNTryAlternateException.#ctor(System.String,FM.IceLink.STUNAlternateServerAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNTryAlternateException" /> class.
             </summary>
             <param name="message">The message.</param>
             <param name="alternateServer">The alternate server attribute.</param>
            </member>
        <member name="T:FM.IceLink.STUNServerErrorException">
             <summary>
             The server has suffered a temporary error.  The
             client should try again.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNServerErrorException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNServerErrorException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNServerErrorException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNServerErrorException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNStaleNonceException">
             <summary>
             The NONCE used by the client was no longer valid.
             The client should retry, using the NONCE provided in the
             response.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNStaleNonceException.Nonce">
             <summary>
             Gets or sets the nonce attribute.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNStaleNonceException.Realm">
             <summary>
             Gets or sets the realm attribute.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNStaleNonceException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNStaleNonceException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNStaleNonceException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNStaleNonceException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.IceLink.STUNStaleNonceException.#ctor(FM.IceLink.STUNNonceAttribute,FM.IceLink.STUNRealmAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNStaleNonceException" /> class.
             </summary>
             <param name="nonce">The nonce attribute.</param>
             <param name="realm">The realm attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNStaleNonceException.#ctor(System.String,FM.IceLink.STUNNonceAttribute,FM.IceLink.STUNRealmAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNStaleNonceException" /> class.
             </summary>
             <param name="message">The message.</param>
             <param name="nonce">The nonce attribute.</param>
             <param name="realm">The realm attribute.</param>
            </member>
        <member name="T:FM.IceLink.STUNUnauthorizedException">
             <summary>
             The request did not contain the correct
             credentials to proceed.  The client should retry the request
             with proper credentials.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNUnauthorizedException.Nonce">
             <summary>
             Gets or sets the nonce attribute.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNUnauthorizedException.Realm">
             <summary>
             Gets or sets the realm attribute.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnauthorizedException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnauthorizedException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnauthorizedException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnauthorizedException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="M:FM.IceLink.STUNUnauthorizedException.#ctor(FM.IceLink.STUNNonceAttribute,FM.IceLink.STUNRealmAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnauthorizedException" /> class.
             </summary>
             <param name="nonce">The nonce attribute.</param>
             <param name="realm">The realm attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNUnauthorizedException.#ctor(System.String,FM.IceLink.STUNNonceAttribute,FM.IceLink.STUNRealmAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNStaleNonceException" /> class.
             </summary>
             <param name="message">The message.</param>
             <param name="nonce">The nonce attribute.</param>
             <param name="realm">The realm attribute.</param>
            </member>
        <member name="T:FM.IceLink.STUNInvalidErrorCodeException">
             <summary>
             Exception raised when a failed response does not contain
             an error code or when the error code is inconsistent with
             the contents of the response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInvalidErrorCodeException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInvalidErrorCodeException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInvalidErrorCodeException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInvalidErrorCodeException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNUnknownAttributeException">
             <summary>
             The server received a STUN packet containing
             a comprehension-required attribute that it did not understand.
             The server MUST put this unknown attribute in the UNKNOWN-
             ATTRIBUTE attribute of its error response.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNUnknownAttributeException.UnknownAttributes">
             <summary>
             Gets or sets the unknown attributes attribute.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnknownAttributeException.#ctor(FM.IceLink.STUNUnknownAttributesAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnknownAttributeException" /> class.
             </summary>
             <param name="unknownAttributes">The unknown attributes attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNUnknownAttributeException.#ctor(System.String,FM.IceLink.STUNUnknownAttributesAttribute)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnknownAttributeException" /> class.
             </summary>
             <param name="message">The message.</param>
             <param name="unknownAttributes">The unknown attributes attribute.</param>
            </member>
        <member name="T:FM.IceLink.ICEAgent">
             <summary>
             As defined in RFC 3264, an agent is the protocol
             implementation involved in the offer/answer exchange.  There are
             two agents involved in an offer/answer exchange.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgent.ServerAddresses">
             <summary>
             Gets or sets the server address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEAgent.MediaStreams">
             <summary>
             Gets the media streams.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEAgent.Create(FM.IceLink.ICECreateArgs)">
             <summary>
             Creates an offer/answer.
             </summary>
             <param name="createArgs">The create arguments.</param>
            </member>
        <member name="M:FM.IceLink.ICEAgent.Accept(FM.IceLink.ICEAcceptArgs)">
             <summary>
             Accepts an offer/answer.
             </summary>
             <param name="acceptArgs">The accept arguments.</param>
            </member>
        <member name="M:FM.IceLink.ICEAgent.AddRemoteCandidate(FM.IceLink.Candidate)">
             <summary>
             Adds a peer candidate for consideration in path discovery.
             </summary>
             <param name="candidate">The peer candidate.</param>
             <returns><c>true</c> if the candidate was added; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.ICEAgent.GetWaitingCandidatePair">
             <summary>
             Gets the next ordinary check.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICEAgent.ConcludeProcessing">
             <summary>
             Concludes ICE processing.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEAgent.FinalProcessing(System.Object)">
             <summary>
             Stops the keepalive/check threads, deallocates
             unused relay candidates, and updates final state.
             </summary>
             <param name="state"></param>
            </member>
        <member name="M:FM.IceLink.ICEAgent.SendSCTP(FM.IceLink.SendSCTPArgs,System.Int32)">
             <summary>
             Sends an SCTP message.
             </summary>
             <param name="sendArgs">The send arguments.</param>
             <param name="mediaIndex">Index of the media.</param>
            </member>
        <member name="M:FM.IceLink.ICEAgent.SendRTP(FM.IceLink.RTPPacket,System.Byte,System.Int32)">
             <summary>
             Sends an RTP packet.
             </summary>
             <param name="packet">The packet.</param>
             <param name="payloadType">The RTP payload type.</param>
             <param name="mediaIndex">The media index.</param>
             <returns>The number of bytes sent.</returns>
            </member>
        <member name="M:FM.IceLink.ICEAgent.SendRTCP(FM.IceLink.RTCPPacket[],System.Int32)">
             <summary>
             Sends RTCP packets.
             </summary>
             <param name="packets">The packets.</param>
             <param name="mediaIndex">The media index.</param>
             <returns>The number of bytes sent.</returns>
            </member>
        <member name="M:FM.IceLink.ICEAgent.Disconnect(FM.IceLink.ICEDisconnectArgs)">
             <summary>
             Disconnects the agent.
             </summary>
             <param name="disconnectArgs">The disconnect arguments.</param>
            </member>
        <member name="M:FM.IceLink.ICEAgent.Disconnect(FM.IceLink.ICEDisconnectArgs,System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             Disconnects the agent.
             </summary>
             <param name="disconnectArgs">The disconnect arguments.</param>
             <param name="deadStreamDetected">Whether a dead stream was detected.</param>
             <param name="relayFailureDetected">Whether a relay failure was detected.</param>
             <param name="peerClosed">Whether the peer has closed.</param>
            </member>
        <member name="P:FM.IceLink.ICEUdpCandidate.MessageBroker">
             <summary>
             Gets the message broker.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICETcpCandidate.MessageBroker">
             <summary>
             Gets the message broker.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICECandidate">
             <summary>
             A transport address that is a potential point of contact
             for receipt of media.  Candidates also have properties -- their
             type (server reflexive, relayed or host), priority, foundation,
             and base.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECandidate.UpdateFromBaseCandidate(FM.IceLink.ICECandidate)">
             <summary>
             Updates from the base candidate.
             The base of a server reflexive candidate is the host candidate
             from which it was derived.  A host candidate is also said to have
             a base, equal to that candidate itself.  Similarly, the base of a
             relayed candidate is that of the candidate itself.
             </summary>
             <param name="baseCandidate">The base candidate.</param>
            </member>
        <member name="P:FM.IceLink.ICECandidate.Priority">
             <summary>
             Gets or sets the priority.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECandidate.GetServerAddress">
             <summary>
             Gets the server address, if any.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.ICECandidate.Foundation">
             <summary>
             Gets the foundation,
             an arbitrary string that is the same for two candidates
             that have the same type, base IP address, protocol (UDP, TCP,
             etc.), and STUN or TURN server.  If any of these are different,
             then the foundation will be different.  Two candidate pairs with
             the same foundation pairs are likely to have similar network
             characteristics.  Foundations are used in the frozen algorithm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidate.RedundancyKey">
             <summary>
             Gets the redundancy key. A candidate is
             redundant if its transport address equals another candidate, and its
             base equals the base of that other candidate.  Note that two
             candidates can have the same transport address yet have different
             bases, and these would not be considered redundant.  Frequently, a
             server reflexive candidate and a host candidate will be redundant
             when the agent is not behind a NAT.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECandidate.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="M:FM.IceLink.ICECandidate.SetPriority(System.Byte,System.Int32)">
             <summary>
             Sets the priority.
             </summary>
             <param name="typePreference">The type preference.</param>
             <param name="localPreference">The local preference.</param>
            </member>
        <member name="M:FM.IceLink.ICECandidate.CalculatePriority(System.Byte,System.Int32,System.Int32)">
             <summary>
             Calculates a priority.
             </summary>
             <param name="typePreference">The type preference.</param>
             <param name="localPreference">The local preference.</param>
             <param name="componentId">The component ID.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICECandidate.ToSDPCandidateAttribute">
             <summary>
             Converts this instance to an SDP candidate attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICECandidate.ToSDPCandidateAttribute(FM.IceLink.ICECandidate)">
             <summary>
             Converts an ICE candidate to an SDP candidate attribute.
             </summary>
             <param name="candidate">The ICE candidate.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICECandidate.FromSDPCandidateAttribute(FM.IceLink.SDPCandidateAttribute,FM.IceLink.ICEComponent)">
             <summary>
             Converts an SDP candidate attribute to an ICE candidate.
             </summary>
             <param name="candidateAttribute">The SDP candidate attribute.</param>
             <param name="component">The component to which this candidate belongs.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.ICECandidatePair">
             <summary>
             A pairing containing a local candidate and a remote candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.LocalCandidate">
             <summary>
             Gets or sets a candidate that an agent has obtained and included
             in an offer or answer it sent.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.RemoteCandidate">
             <summary>
             Gets or sets a candidate that an agent received in an offer or
             answer from its peer.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.Priority">
             <summary>
             Gets or sets the priority of this pair.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.Foundation">
             <summary>
             Gets the combined foundation of the candidates in this pair.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.State">
             <summary>
             Gets or sets the state of this pair.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.UseCandidateReceived">
             <summary>
             Gets or sets a flag indicating that this candidate
             was nominated by the peer before we have processed
             a complete send/receive cycle.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.ValidPair">
             <summary>
             Gets or sets the valid pair that resulted from a successful check.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.Nominated">
             <summary>
             Gets or sets whether this is a nominated candidate pair.
             If a valid candidate pair has its nominated flag set, it
             means that it may be selected by ICE for sending and receiving
             media.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.Valid">
             <summary>
             Gets or sets whether this is a valid candidate pair.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICECandidatePair.KeepAliveInterval">
             <summary>
             Gets or sets the keep alive interval.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECandidatePair.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="M:FM.IceLink.ICECandidatePair.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
             <returns>
             A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
             </returns>
            </member>
        <member name="M:FM.IceLink.ICECandidatePair.Equals(System.Object)">
             <summary>
             Determines whether the specified object is equal to this instance.
             </summary>
             <param name="obj">The object to compare with this instance.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICECandidatePair.AssignPriority(FM.IceLink.ICEAgentRole)">
             <summary>
             Assigns the priority.
             </summary>
             <param name="role">The role.</param>
            </member>
        <member name="M:FM.IceLink.ICECandidatePair.CreateBindingRequest">
             <summary>
             Creates a binding request.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICECandidatePair.StartKeepAlive">
             <summary>
             Starts the keep alive timer.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECandidatePair.StopKeepAlive(FM.CallbackState)">
             <summary>
             Stops the keep alive.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICECandidatePair.NotifyDataSent">
             <summary>
             Notifies the keep-alive thread that data has been sent.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEComponent">
             <summary>
             A component is a piece of a media stream requiring a
             single transport address; a media stream may require multiple
             components, each of which has to work for the media stream as a
             whole to work.  For media streams based on RTP, there are two
             components per media stream -- one for RTP, and one for RTCP.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.Id">
             <summary>
             Gets or sets the component ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.Candidates">
             <summary>
             Gets the candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.HostCandidates">
             <summary>
             Gets the host candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.SuppressedHostCandidates">
             <summary>
             Gets the suppressed host candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.ServerReflexiveCandidates">
             <summary>
             Gets the server reflexive candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.SuppressedServerReflexiveCandidates">
             <summary>
             Gets the suppressed server reflexive candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.PeerReflexiveCandidates">
             <summary>
             Gets the peer reflexive candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.RelayedCandidates">
             <summary>
             Gets the relayed candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.SuppressedRelayedCandidates">
             <summary>
             Gets the suppressed relayed candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.RemoteCandidates">
             <summary>
             Gets the remote candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.HostRemoteCandidates">
             <summary>
             Gets the remote host candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.ServerReflexiveRemoteCandidates">
             <summary>
             Gets the remote server reflexive candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.PeerReflexiveRemoteCandidates">
             <summary>
             Gets the remote peer reflexive candidates.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.RelayedRemoteCandidates">
             <summary>
             Gets the remote relayed candidates.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEComponent.AddCandidate(FM.IceLink.ICECandidate,FM.IceLink.ICEAgentRole)">
             <summary>
             Adds a candidate.
             </summary>
             <param name="candidate">The candidate to add.</param>
             <param name="role">The agent role.</param>
             <returns>
             <c>true</c> if the candidate was added; otherwise, false.
             </returns>
            </member>
        <member name="M:FM.IceLink.ICEComponent.RemoveCandidate(FM.IceLink.ICECandidate)">
             <summary>
             Removes a candidate.
             </summary>
             <param name="candidate">The candidate to remove.</param>
            </member>
        <member name="M:FM.IceLink.ICEComponent.AddRemoteCandidate(FM.IceLink.ICECandidate)">
             <summary>
             Adds a remote candidate.
             </summary>
             <param name="remoteCandidate">The remote candidate to add.</param>
             <returns>
             <c>true</c> if the candidate was added; otherwise, false.
             </returns>
            </member>
        <member name="M:FM.IceLink.ICEComponent.RemoveRemoteCandidate(FM.IceLink.ICECandidate)">
             <summary>
             Removes a remote candidate.
             </summary>
             <param name="candidate">The remote candidate to remove.</param>
            </member>
        <member name="P:FM.IceLink.ICEComponent.Completed">
             <summary>
             Gets or sets a value indicating whether the component is closed.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEComponent.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="P:FM.IceLink.ICEComponent.CheckList">
             <summary>
             Gets or sets the check list.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.ValidList">
             <summary>
             Gets or sets the valid list.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.NominatedCandidatePairs">
             <summary>
             Gets the nominated candidate pairs.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.ActiveCandidatePair">
             <summary>
             Gets the active candidate pair.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.HasValid">
             <summary>
             Gets a value indicating whether the media stream has valid candidate pairs.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.HasNominated">
             <summary>
             Gets a value indicating whether the media stream has a nomination.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.DtlsState">
             <summary>
             Gets the state of the DTLS handshake.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEComponent.SctpState">
             <summary>
             Gets the state of the SCTP initialization.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEComponent.GetEncryptionMode(System.Int32)">
             <summary>
             Converts an SRTP protection profile to an EncryptionMode enum.
             </summary>
             <param name="srtpProtectionProfile">The SRTP protection profile.</param>
             <returns>The EncryptionMode enum.</returns>
            </member>
        <member name="M:FM.IceLink.ICEComponent.GetSrtpProtectionProfile(FM.IceLink.EncryptionMode)">
             <summary>
             Converts an EncryptionMode enum to an SRTP protection profile.
             </summary>
             <param name="encryptionMode">The EncryptionMode enum.</param>
             <returns>The SRTP protection profile.</returns>
            </member>
        <member name="T:FM.IceLink.CRC32">
             <summary>
             Calculates 32-bit CRC for a string or byte array.
             Derived from Jeff Atwood's version:
             http://www.codinghorror.com/blog/2004/09/squishysyntaxhighlighter-and-crc32.html
             </summary>
            </member>
        <member name="M:FM.IceLink.CRC32.Compute(System.Byte[])">
             <summary>
             Computes the signed 32-bit CRC for an array of bytes.
             </summary>
             <param name="bytes">The binary array for which to compute CRC.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.CRC32.Calculate(System.Byte[])">
             <summary>
             Calculates the 32-bit CRC for an array of bytes.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNInvalidTransactionIdException">
             <summary>
             Exception raised when the transaction ID of the response
             does not match the transaction ID of the request.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInvalidTransactionIdException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInvalidTransactionIdException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInvalidTransactionIdException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInvalidTransactionIdException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNInvalidMessageIntegrityException">
             <summary>
             Exception raised when validation of the message
             integrity attribute fails.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInvalidMessageIntegrityException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInvalidMessageIntegrityException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInvalidMessageIntegrityException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInvalidMessageIntegrityException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNAlternateServerAttribute">
             <summary>
             The alternate server represents an alternate transport address
             identifying a different STUN server that the STUN client should try.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAlternateServerAttribute.IPAddress">
             <summary>
             Gets or sets the IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAlternateServerAttribute.Port">
             <summary>
             Gets or sets the port.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAlternateServerAttribute.#ctor(System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAlternateServerAttribute" /> class.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <param name="port">The port.</param>
            </member>
        <member name="M:FM.IceLink.STUNAlternateServerAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAlternateServerAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNAlternateServerAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNAlternateServerAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNSoftwareAttribute">
             <summary>
             The SOFTWARE attribute contains a textual description of the software
             being used by the agent sending the message.  It is used by clients
             and servers.  Its value SHOULD include manufacturer and version
             number.  The attribute has no impact on operation of the protocol,
             and serves only as a tool for diagnostic and debugging purposes.  The
             value of SOFTWARE is variable length.  It MUST be a UTF-8 [RFC3629]
             encoded sequence of less than 128 characters (which can be as long as
             763 bytes).
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNSoftwareAttribute.Value">
             <summary>
             Gets or sets the textual description of the software being used by
             the agent sending the message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNSoftwareAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNSoftwareAttribute" /> class.
             </summary>
             <param name="value">The textual description of the software being used by
             the agent sending the message.</param>
            </member>
        <member name="M:FM.IceLink.STUNSoftwareAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNSoftwareAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNSoftwareAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNSoftwareAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNUnknownAttributesAttribute">
             <summary>
             The UNKNOWN-ATTRIBUTES attribute is present only in an error response
             when the response code in the ERROR-CODE attribute is 420.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNUnknownAttributesAttribute.Types">
             <summary>
             Gets the array of unknown attribute types.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnknownAttributesAttribute.AddType(System.Byte[])">
             <summary>
             Adds an unknown attribute type.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnknownAttributesAttribute.RemoveType(System.Byte[])">
             <summary>
             Removes an unknown attribute type.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnknownAttributesAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnknownAttributesAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnknownAttributesAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnknownAttributesAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNUnknownAttributesAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUNNonceAttribute">
             <summary>
             The NONCE attribute may be present in requests and responses.  It
             contains a sequence of qdtext or quoted-pair, which are defined in
             RFC 3261 [RFC3261].  Note that this means that the NONCE attribute
             will not contain actual quote characters.  See RFC 2617 [RFC2617],
             Section 4.3, for guidance on selection of nonce values in a server.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNNonceAttribute.Value">
             <summary>
             Gets or sets the nonce value.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNNonceAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNNonceAttribute" /> class.
             </summary>
             <param name="value">The nonce value.</param>
            </member>
        <member name="M:FM.IceLink.STUNNonceAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNNonceAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNNonceAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNNonceAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNRealmAttribute">
             <summary>
             The REALM attribute may be present in requests and responses.  It
             contains text that meets the grammar for "realm-value" as described
             in RFC 3261 [RFC3261] but without the double quotes and their
             surrounding whitespace.  That is, it is an unquoted realm-value (and
             is therefore a sequence of qdtext or quoted-pair).  It MUST be a
             UTF-8 [RFC3629] encoded sequence of less than 128 characters (which
             can be as long as 763 bytes), and MUST have been processed using
             SASLprep [RFC4013].
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNRealmAttribute.Value">
             <summary>
             Gets or sets the realm value.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNRealmAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRealmAttribute" /> class.
             </summary>
             <param name="value">The realm value.</param>
            </member>
        <member name="M:FM.IceLink.STUNRealmAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRealmAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNRealmAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNRealmAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNErrorCodeAttribute">
             <summary>
             The ERROR-CODE attribute is used in error response messages.  It
             contains a numeric error code value in the range of 300 to 699 plus a
             textual reason phrase encoded in UTF-8 [RFC3629], and is consistent
             in its code assignments and semantics with SIP [RFC3261] and HTTP
             [RFC2616]. The reason phrase is meant for user consumption, and can
             be anything appropriate for the error code.  Recommended reason
             phrases for the defined error codes are included in the IANA registry
             for error codes.  The reason phrase MUST be a UTF-8 [RFC3629] encoded
             sequence of less than 128 characters (which can be as long as 763
             bytes).
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNErrorCodeAttribute.Code">
             <summary>
             Gets or sets the error code.
             </summary>
             <value>
             The code.
             </value>
            </member>
        <member name="P:FM.IceLink.STUNErrorCodeAttribute.Reason">
             <summary>
             Gets or sets the error reason.
             </summary>
             <value>
             The reason.
             </value>
            </member>
        <member name="M:FM.IceLink.STUNErrorCodeAttribute.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNErrorCodeAttribute" /> class.
             </summary>
             <param name="code">The error code.</param>
            </member>
        <member name="M:FM.IceLink.STUNErrorCodeAttribute.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNErrorCodeAttribute" /> class.
             </summary>
             <param name="code">The error code.</param>
             <param name="reason">The error reason.</param>
            </member>
        <member name="M:FM.IceLink.STUNErrorCodeAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNErrorCodeAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNErrorCodeAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNErrorCodeAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNFingerprintAttribute">
             <summary>
             The FINGERPRINT attribute MAY be present in all STUN messages.  The
             value of the attribute is computed as the CRC-32 of the STUN message
             up to (but excluding) the FINGERPRINT attribute itself, XOR'ed with
             the 32-bit value 0x5354554e (the XOR helps in cases where an
             application packet is also using CRC-32 in it).  The 32-bit CRC is
             the one defined in ITU V.42 [ITU.V42.2002], which has a generator
             polynomial of x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1.
             When present, the FINGERPRINT attribute MUST be the last attribute in
             the message, and thus will appear after MESSAGE-INTEGRITY.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNFingerprintAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNFingerprintAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNFingerprintAttribute.FromValueBytes(System.Byte[],System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNFingerprintAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
             <param name="messageBytes">The message bytes thus far.</param>
            </member>
        <member name="M:FM.IceLink.STUNFingerprintAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNFingerprintAttribute.GetBytes(System.Byte[])">
             <summary>
             Gets the attribute as a byte array.
             </summary>
             <param name="messageBytes">The message bytes thus far.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNFingerprintAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNMessageIntegrityAttribute">
             <summary>
             The MESSAGE-INTEGRITY attribute contains an HMAC-SHA1 [RFC2104] of
             the STUN message.  The MESSAGE-INTEGRITY attribute can be present in
             any STUN message type.  Since it uses the SHA1 hash, the HMAC will be
             20 bytes.  The text used as input to HMAC is the STUN message,
             including the header, up to and including the attribute preceding the
             MESSAGE-INTEGRITY attribute.  With the exception of the FINGERPRINT
             attribute, which appears after MESSAGE-INTEGRITY, agents MUST ignore
             all other attributes that follow MESSAGE-INTEGRITY.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNMessageIntegrityAttribute.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNMessageIntegrityAttribute" /> class.
             </summary>
             <param name="keyBytes">The key as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessageIntegrityAttribute.FromValueBytes(System.Byte[],System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNMessageIntegrityAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
             <param name="messageBytes">The message bytes thus far.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessageIntegrityAttribute.IsValid(System.Byte[])">
             <summary>
             After creating a message-integrity attribute using the byte array representation,
             this method determines whether the supplied key is valid.
             </summary>
             <param name="keyBytes">The key as a byte array.</param>
             <returns>
               <c>true</c> if the key is valid; otherwise, <c>false</c>.
             </returns>
            </member>
        <member name="M:FM.IceLink.STUNMessageIntegrityAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessageIntegrityAttribute.GetBytes(System.Byte[])">
             <summary>
             Gets the attribute as a byte array.
             </summary>
             <param name="messageBytes">The message bytes thus far.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessageIntegrityAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNUsernameAttribute">
             <summary>
             The USERNAME attribute is used for message integrity.  It identifies
             the username and password combination used in the message-integrity
             check.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNUsernameAttribute.Value">
             <summary>
             Gets or sets the username value.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUsernameAttribute.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUsernameAttribute" /> class.
             </summary>
             <param name="value">The username value.</param>
            </member>
        <member name="M:FM.IceLink.STUNUsernameAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUsernameAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNUsernameAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNUsernameAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNXorMappedAddressAttribute">
             <summary>
             The XOR-MAPPED-ADDRESS attribute is identical to the MAPPED-ADDRESS
             attribute, except that the reflexive transport address is obfuscated
             through the XOR function.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNXorMappedAddressAttribute.IPAddress">
             <summary>
             Gets or sets the IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNXorMappedAddressAttribute.Port">
             <summary>
             Gets or sets the port.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNXorMappedAddressAttribute.TransactionId">
             <summary>
             Gets or sets the transaction ID.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNXorMappedAddressAttribute.#ctor(System.String,System.Int32,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNXorMappedAddressAttribute" /> class.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <param name="port">The port.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="M:FM.IceLink.STUNXorMappedAddressAttribute.FromValueBytes(System.Byte[],System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNXorMappedAddressAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="M:FM.IceLink.STUNXorMappedAddressAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNXorMappedAddressAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.ICEUdpHostCandidate">
             <summary>
             A candidate obtained by binding to a specific port
             from an IP address on the host.  This includes IP addresses on
             physical interfaces and logical ones, such as ones obtained
             through Virtual Private Networks (VPNs) and Realm Specific IP
             (RSIP) [RFC3102] (which lives at the operating system level).
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpHostCandidate.GetServerAddress">
             <summary>
             Gets the server address, if any.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.ICEUdpHostCandidate.VirtualSocket">
             <summary>
             Gets or sets the virtual socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpHostCandidate.Socket">
             <summary>
             Gets or sets the socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpHostCandidate.AdapterSpeed">
             <summary>
             Gets or sets the adapter speed.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpHostCandidate.Mask">
             <summary>
             Gets or sets the subnet mask.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpHostCandidate.LocalPreference">
             <summary>
             Gets or sets the local preference.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpHostCandidate.RelayedCandidate">
             <summary>
             Gets or sets the related relayed candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpHostCandidate.PeerReflexiveCandidate">
             <summary>
             Gets or sets the related peer reflexive candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpHostCandidate.ServerReflexiveCandidate">
             <summary>
             Gets or sets the related server reflexive candidate.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpHostCandidate.Close">
             <summary>
             Closes the associated Message Broker
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNInvalidResponseTypeException">
             <summary>
             Exception raised when the type of message received
             in response to a request is unexpected.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInvalidResponseTypeException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInvalidResponseTypeException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInvalidResponseTypeException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInvalidResponseTypeException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNMappedAddressAttribute">
             <summary>
             The MAPPED-ADDRESS attribute indicates a reflexive transport address
             of the client.  It consists of an 8-bit address family and a 16-bit
             port, followed by a fixed-length value representing the IP address.
             If the address family is IPv4, the address MUST be 32 bits.  If the
             address family is IPv6, the address MUST be 128 bits.  All fields
             must be in network byte order.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNMappedAddressAttribute.IPAddress">
             <summary>
             Gets or sets the IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNMappedAddressAttribute.Port">
             <summary>
             Gets or sets the port.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNMappedAddressAttribute.#ctor(System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNMappedAddressAttribute" /> class.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <param name="port">The port.</param>
            </member>
        <member name="M:FM.IceLink.STUNMappedAddressAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNMappedAddressAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNMappedAddressAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMappedAddressAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.ICEMediaStream">
             <summary>
             ICE media stream.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.SynchronizationSource">
             <summary>
             Gets or sets the synchronization source.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.ServerAddresses">
             <summary>
             Gets or sets the server addresses.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.RtpMode">
             <summary>
             Gets or sets the RTP mode.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.Direction">
             <summary>
             Gets or sets the direction of media flow.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.Components">
             <summary>
             Gets or sets the media stream components.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.Disabled">
             <summary>
             Gets or sets whether the media stream is disabled.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.EncryptionModes">
             <summary>
             Gets the media stream encryption modes.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.CryptoAttributes">
             <summary>
             Gets the cryptography attributes.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.EncryptionRole">
             <summary>
             Gets the media stream encryption role.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.MediaFormats">
             <summary>
             Gets the media formats.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.Completed">
             <summary>
             Gets or sets a value indicating whether the media stream is completed.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.#ctor(FM.IceLink.TransportAddress[],FM.IceLink.ICEMediaFormat[],System.String,FM.IceLink.StreamProtocol,FM.IceLink.RtpMode,FM.IceLink.Direction,FM.IceLink.EncryptionMode[],FM.IceLink.EncryptionRole,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.ICEMediaStream" /> class.
             </summary>
             <param name="serverAddresses">The server addresses.</param>
             <param name="mediaFormats">The media formats.</param>
             <param name="sdpMediaType">The SDP media type.</param>
             <param name="protocol">The stream protocol.</param>
             <param name="rtpMode">The RTP mode.</param>
             <param name="direction">The direction of media flow.</param>
             <param name="encryptionModes">The encryption modes.</param>
             <param name="encryptionRole">The encryption role.</param>
             <param name="offerDtls">Whether to offer to exchange SRTP keys using DTLS.</param>
             <param name="multiplexRtpRtcp">Whether to multiplex RTP/RTCP packets on a single socket.</param>
             <param name="sctpProtocol">The SCTP protocol.</param>
             <param name="sctpChannelCount">The SCTP channel count.</param>
             <param name="sctpPort">The SCTP port.</param>
             <param name="sctpMaxMessageSize">The maximum allowed size for incoming SCTP messages in bytes.</param>
             <param name="synchronizationSource">The synchronization source (SSRC) for the stream.</param>
             <param name="index">The index of this media stream relative to other media streams (starting at 0).</param>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.AddMediaFormat(FM.IceLink.ICEMediaFormat)">
             <summary>
             Adds a media format.
             </summary>
             <param name="format">The media format to add.</param>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.RemoveMediaFormat(FM.IceLink.ICEMediaFormat)">
             <summary>
             Removes a media format.
             </summary>
             <param name="format">The media format to remove.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.RemoveEncryptionMode(FM.IceLink.EncryptionMode)">
             <summary>
             Removes an encryption mode from the stream.
             </summary>
             <param name="encryptionMode">The encryption mode to remove.</param>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.ToSDPMediaDescription">
             <summary>
             Converts this instance to an SDP media description.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.ToSDPMediaDescription(FM.IceLink.ICEMediaStream)">
             <summary>
             Converts a media stream to an SDP media description.
             </summary>
             <param name="mediaStream">The media stream.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.FromSDPMediaDescription(FM.IceLink.SDPMediaDescription,FM.IceLink.SDPMessage,FM.IceLink.TransportAddress[],System.Int32)">
             <summary>
             Converts an SDP media description to a media stream.
             </summary>
             <param name="mediaDescription">The media description.</param>
             <param name="message">The message.</param>
             <param name="serverAddresses">The server addresses.</param>
             <param name="index">The index of the media stream relative to other media streams.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.ToSDPMediaDescriptions(FM.IceLink.ICEMediaStream[])">
             <summary>
             Converts a list of media streams to a list of SDP media descriptions.
             </summary>
             <param name="mediaStreams">The media streams.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.FromSDPMediaDescriptions(FM.IceLink.SDPMediaDescription[],FM.IceLink.SDPMessage,FM.IceLink.TransportAddress[])">
             <summary>
             Converts a list of SDP media descriptions to a list of media streams.
             </summary>
             <param name="mediaDescriptions">The media descriptions.</param>
             <param name="message">The message.</param>
             <param name="serverAddresses">The server addresses.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.DiscoverCandidates(FM.IceLink.ICELocalAddress[],System.String[],System.String[],System.String[])">
             <summary>
             Begins the process of candidate discovery for this media stream.
             </summary>
             <param name="localAddresses">The local addresses.</param>
             <param name="turnUsernames">The TURN usernames.</param>
             <param name="turnRealms">The TURN realms.</param>
             <param name="turnPasswords">The TURN passwords.</param>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.Initialize(FM.IceLink.ICEMediaStream)">
             <summary>
             Prepares to receive peer messages.
             </summary>
             <param name="remoteMediaStream">The remote media stream.</param>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.SocketClosed">
             <summary>
             Gets the special return value indicating that the socket is closed.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.SendRTP(FM.IceLink.RTPPacket)">
             <summary>
             Sends an RTP packet.
             </summary>
             <param name="packet">The packet to send.</param>
             <returns>The number of bytes sent.</returns>
            </member>
        <member name="M:FM.IceLink.ICEMediaStream.SendRTCP(FM.IceLink.RTCPPacket[])">
             <summary>
             Sends RTCP packets.
             </summary>
             <param name="packets">The packets to send.</param>
             <returns>The number of bytes sent.</returns>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.OfferDtls">
             <summary>
             Gets whether to offer DTLS-SRTP.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEMediaStream.FingerprintAttribute">
             <summary>
             Gets the fingerprint attribute.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICENomination">
             <summary>
             ICE nomination type.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICENomination.Regular">
             <summary>
             The process of picking a valid candidate pair
             for media traffic by validating the pair with one STUN request,
             and then picking it by sending a second STUN request with a flag
             indicating its nomination.
             </summary>
            </member>
        <member name="F:FM.IceLink.ICENomination.Aggressive">
             <summary>
             The process of picking a valid candidate pair
             for media traffic by including a flag in every STUN request, such
             that the first one to produce a valid candidate pair is used for
             media.
             </summary>
            </member>
        <member name="T:FM.IceLink.ICEUdpPeerReflexiveCandidate">
             <summary>
             A candidate whose IP address and port are
             a binding allocated by a NAT for an agent when it sent a STUN
             Binding request through the NAT to its peer.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpPeerReflexiveCandidate.GetServerAddress">
             <summary>
             Gets the server address, if any.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.ICEUdpRelayedCandidate">
             <summary>
             A candidate obtained by sending a TURN Allocate
             request from a host candidate to a TURN server.  The relayed
             candidate is resident on the TURN server, and the TURN server
             relays packets back towards the agent.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpRelayedCandidate.ServerAddress">
             <summary>
             Gets or sets the server address.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpRelayedCandidate.GetServerAddress">
             <summary>
             Gets the server address, if any.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.ICEUdpRelayedCandidate.MappedAddress">
             <summary>
             Gets or sets the mapped address.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpRelayedCandidate.TurnUsername">
             <summary>
             Gets or sets the TURN username.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpRelayedCandidate.TurnRealm">
             <summary>
             Gets or sets the TURN realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpRelayedCandidate.TurnPassword">
             <summary>
             Gets or sets the TURN password.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpRelayedCandidate.Refresh(FM.IceLink.ICERefreshArgs)">
             <summary>
             Tries to keep the relayed candidate alive.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpRelayedCandidate.NeedsRefresh">
             <summary>
             Checks if the allocation requires a refresh.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpRelayedCandidate.Deallocate(FM.CallbackState)">
             <summary>
             Deallocates the relayed candidate.
             </summary>
             <param name="callbackState">The callback state to execute when completed.</param>
            </member>
        <member name="M:FM.IceLink.ICEUdpRelayedCandidate.CreatePermission(FM.IceLink.ICECreatePermissionArgs)">
             <summary>
             Creates a permission for the relayed candidate.
             </summary>
             <param name="createPermissionArgs">The create permission arguments.</param>
            </member>
        <member name="T:FM.IceLink.ICEUdpServerReflexiveCandidate">
             <summary>
             A candidate whose IP address and port
             are a binding allocated by a NAT for an agent when it sent a
             packet through the NAT to a server.  Server reflexive candidates
             can be learned by STUN servers using the Binding request, or TURN
             servers, which provides both a relayed and server reflexive
             candidate.
             </summary>
            </member>
        <member name="P:FM.IceLink.ICEUdpServerReflexiveCandidate.ServerAddress">
             <summary>
             Gets or sets the server address.
             </summary>
            </member>
        <member name="M:FM.IceLink.ICEUdpServerReflexiveCandidate.GetServerAddress">
             <summary>
             Gets the server address, if any.
             </summary>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUNAttributeCreationDelegate">
             <summary>
             Delegate invoked when a STUN attribute should be created.
             </summary>
             <param name="e">The event arguments.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUNAttributeCreationArgs">
             <summary>
             STUN attribute-creation arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAttributeCreationArgs.ValueBytes">
             <summary>
             Gets or sets the value bytes.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAttributeCreationArgs.TransactionId">
             <summary>
             Gets or sets the transaction ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAttributeCreationArgs.MessageBytes">
             <summary>
             Gets or sets the message bytes thus far.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAttributeCreationArgs.#ctor(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAttributeCreationArgs" /> class.
             </summary>
             <param name="valueBytes">The value bytes.</param>
             <param name="transactionId">The transaction ID.</param>
             <param name="messageBytes">The message bytes thus far.</param>
            </member>
        <member name="T:FM.IceLink.STUNAttributeRegistration">
             <summary>
             A STUN attribute registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAttributeRegistration.TypeBytes">
             <summary>
             Gets or sets the type bytes.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAttributeRegistration.CreationDelegate">
             <summary>
             Gets or sets the creation delegate.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAttributeRegistration.#ctor(System.Byte[],FM.IceLink.STUNAttributeCreationDelegate)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAttributeRegistration" /> class.
             </summary>
             <param name="typeBytes">The type bytes.</param>
             <param name="creationDelegate">The creation delegate.</param>
            </member>
        <member name="T:FM.IceLink.STUNAttribute">
             <summary>
             A STUN attribute.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAttribute.BlankIPv4AddressBytes">
             <summary>
             Gets or sets the IPv4 address bytes for "0.0.0.0".
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAttribute.BlankIPv4Address">
             <summary>
             Gets or sets the blank IPv4 address ("0.0.0.0").
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAttribute.BlankIPv6AddressBytes">
             <summary>
             Gets or sets the IPv6 address bytes for "00:00:00:00:00:00:00:00".
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNAttribute.BlankIPv6Address">
             <summary>
             Gets or sets the blank IPv6 address ("00:0:0:0:0:0:0:0").
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.RegisterAttribute(System.Type,System.Boolean,System.Byte,FM.IceLink.STUNAttributeCreationDelegate)">
             <summary>
             Registers an attribute type.
             </summary>
             <param name="type">The attribute type.</param>
             <param name="comprehensionRequired">Whether or not comprehension of this attribute is required.</param>
             <param name="typeByte">The type byte.</param>
             <param name="creationDelegate">The creation delegate.</param>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.UnregisterAttribute(System.Type)">
             <summary>
             Unregisters an attribute type.
             </summary>
             <param name="type">The attribute type.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.GetTypeBytes(System.Type)">
             <summary>
             Gets the attribute type bytes.
             </summary>
             <param name="type">The attribute type.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.CreateAttribute(System.Byte,System.Byte,System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Creates an attribute.
             </summary>
             <param name="byte1">The first type byte.</param>
             <param name="byte2">The second type byte.</param>
             <param name="valueBytes">The value bytes.</param>
             <param name="transactionId">The transaction ID.</param>
             <param name="messageBytes">The message bytes thus far.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.ParseBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Creates a new <see cref="T:FM.IceLink.STUNAttribute" /> from a byte array.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="transactionId">The STUN message transaction ID.</param>
             <param name="messageBytes">The STUN message thus far as a byte array.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.GetLength(System.Byte[])">
             <summary>
             Gets the length from a network byte array.
             </summary>
             <param name="bytes">The byte array.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.XorPort(System.Byte[],System.Byte[])">
             <summary>
             Xors the port.
             </summary>
             <param name="portBytes">The port bytes.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="M:FM.IceLink.STUNAttribute.XorIPAddress(System.Byte[],System.Byte[])">
             <summary>
             Xors the IP address.
             </summary>
             <param name="ipAddressBytes">The IP address bytes.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNMessageCreationDelegate">
             <summary>
             Delegate invoked when a STUN message should be created.
             </summary>
             <param name="e">The event arguments.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUNMessageCreationArgs">
             <summary>
             STUN message-creation arguments.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNMessageCreationArgs.MessageType">
             <summary>
             Gets or sets the type of the message.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNMessageCreationArgs.TransactionId">
             <summary>
             Gets or sets the transaction ID.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNMessageCreationArgs.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNMessageCreationArgs" /> class.
             </summary>
             <param name="messageType">Type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNMessageRegistration">
             <summary>
             A STUN message registration.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNMessageRegistration.Method">
             <summary>
             Gets or sets the method.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNMessageRegistration.CreationDelegate">
             <summary>
             Gets or sets the creation delegate.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNMessageRegistration.#ctor(System.Byte,FM.IceLink.STUNMessageCreationDelegate)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNMessageRegistration" /> class.
             </summary>
             <param name="method">The method.</param>
             <param name="creationDelegate">The creation delegate.</param>
            </member>
        <member name="T:FM.IceLink.STUNMessage">
             <summary>
             A STUN message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNMessage.RegisterMessage(System.Type,System.Byte,FM.IceLink.STUNMessageCreationDelegate)">
             <summary>
             Registers a message type.
             </summary>
             <param name="type">The message type.</param>
             <param name="method">The method.</param>
             <param name="creationDelegate">The creation delegate.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.UnregisterMessage(System.Type)">
             <summary>
             Unregisters a message type.
             </summary>
             <param name="type">The message type.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetMethod(System.Type)">
             <summary>
             Gets the message method.
             </summary>
             <param name="type">The message type.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.CreateMessage(System.Byte,FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Creates a message.
             </summary>
             <param name="method">The method.</param>
             <param name="messageType">Type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.CreateSiblingMessage(System.Type,FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Creates a sibling message.
             </summary>
             <param name="type">The message type.</param>
             <param name="messageType">Type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.STUNMessage.MagicCookie">
             <summary>
             Gets or sets the "magic cookie."
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNMessage.MessageType">
             <summary>
             Gets or sets the type of the message.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNMessage.TransactionId">
             <summary>
             Gets or sets the transaction ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNMessage.Attributes">
             <summary>
             Gets the message attributes.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetAlternateServer">
             <summary>
             Gets the alternate-server attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetAlternateServer(FM.IceLink.STUNAlternateServerAttribute)">
             <summary>
             Set the alternate-server attribute.
             </summary>
             <param name="attribute">The alternate-server attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetErrorCode">
             <summary>
             Gets the error-code attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetErrorCode(FM.IceLink.STUNErrorCodeAttribute)">
             <summary>
             Set the error-code attribute.
             </summary>
             <param name="attribute">The error-code attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetFingerprint">
             <summary>
             Gets the fingerprint attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetFingerprint(FM.IceLink.STUNFingerprintAttribute)">
             <summary>
             Set the fingerprint attribute.
             </summary>
             <param name="attribute">The fingerprint attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetMappedAddress">
             <summary>
             Gets the mapped-address attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetMappedAddress(FM.IceLink.STUNMappedAddressAttribute)">
             <summary>
             Set the mapped-address attribute.
             </summary>
             <param name="attribute">The mapped-address attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetMessageIntegrity">
             <summary>
             Gets the message-integrity attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetMessageIntegrity(FM.IceLink.STUNMessageIntegrityAttribute)">
             <summary>
             Set the message-integrity attribute.
             </summary>
             <param name="attribute">The message-integrity attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetNonce">
             <summary>
             Gets the nonce attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetNonce(FM.IceLink.STUNNonceAttribute)">
             <summary>
             Set the nonce attribute.
             </summary>
             <param name="attribute">The nonce attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetRealm">
             <summary>
             Gets the realm attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetRealm(FM.IceLink.STUNRealmAttribute)">
             <summary>
             Set the realm attribute.
             </summary>
             <param name="attribute">The realm attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetSoftware">
             <summary>
             Gets the software attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetSoftware(FM.IceLink.STUNSoftwareAttribute)">
             <summary>
             Set the software attribute.
             </summary>
             <param name="attribute">The software attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetUnknownAttributes">
             <summary>
             Gets the unknown-attributes attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetUnknownAttributes(FM.IceLink.STUNUnknownAttributesAttribute)">
             <summary>
             Set the unknown-attributes attribute.
             </summary>
             <param name="attribute">The unknown-attributes attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetUsername">
             <summary>
             Gets the username attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetUsername(FM.IceLink.STUNUsernameAttribute)">
             <summary>
             Set the username attribute.
             </summary>
             <param name="attribute">The username attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetXorMappedAddress">
             <summary>
             Gets the XOR-mapped-address attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetXorMappedAddress(FM.IceLink.STUNXorMappedAddressAttribute)">
             <summary>
             Set the XOR-mapped-address attribute.
             </summary>
             <param name="attribute">The XOR-mapped-address attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetIceControlled">
             <summary>
             Gets the ICE-controlled attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetIceControlled(FM.IceLink.STUNIceControlledAttribute)">
             <summary>
             Sets the ICE-controlled attribute.
             </summary>
             <param name="attribute">The ICE-controlled attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetIceControlling">
             <summary>
             Gets the ICE-controlling attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetIceControlling(FM.IceLink.STUNIceControllingAttribute)">
             <summary>
             Sets the ICE-controlling attribute.
             </summary>
             <param name="attribute">The ICE-controlling attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetPriority">
             <summary>
             Gets the priority attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetPriority(FM.IceLink.STUNPriorityAttribute)">
             <summary>
             Sets the priority attribute.
             </summary>
             <param name="attribute">The priority attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetUseCandidate">
             <summary>
             Gets the use-candidate attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetUseCandidate(FM.IceLink.STUNUseCandidateAttribute)">
             <summary>
             Sets the use-candidate attribute.
             </summary>
             <param name="attribute">The use-candidate attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetChannelNumber">
             <summary>
             Gets the channel-number attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetChannelNumber(FM.IceLink.STUNChannelNumberAttribute)">
             <summary>
             Sets the channel-number attribute.
             </summary>
             <param name="attribute">The channel-number attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetConnectionId">
             <summary>
             Gets the connection-id attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetConnectionId(FM.IceLink.STUNConnectionIdAttribute)">
             <summary>
             Sets the connection-id attribute.
             </summary>
             <param name="attribute">The connection-id attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetData">
             <summary>
             Gets the data attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetData(FM.IceLink.STUNDataAttribute)">
             <summary>
             Sets the data attribute.
             </summary>
             <param name="attribute">The data attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetDontFragment">
             <summary>
             Gets the don't-fragment attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetDontFragment(FM.IceLink.STUNDontFragmentAttribute)">
             <summary>
             Sets the don't-fragment attribute.
             </summary>
             <param name="attribute">The don't-fragment attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetEvenPort">
             <summary>
             Gets the even-port attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetEvenPort(FM.IceLink.STUNEvenPortAttribute)">
             <summary>
             Sets the even-port attribute.
             </summary>
             <param name="attribute">The even-port attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetLifetime">
             <summary>
             Gets the lifetime attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetLifetime(FM.IceLink.STUNLifetimeAttribute)">
             <summary>
             Sets the lifetime attribute.
             </summary>
             <param name="attribute">The lifetime attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetRequestedTransport">
             <summary>
             Gets the requested-transport attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetRequestedTransport(FM.IceLink.STUNRequestedTransportAttribute)">
             <summary>
             Sets the requested-transport attribute.
             </summary>
             <param name="attribute">The requested-transport attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetReservationToken">
             <summary>
             Gets the reservation-token attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetReservationToken(FM.IceLink.STUNReservationTokenAttribute)">
             <summary>
             Sets the reservation-token attribute.
             </summary>
             <param name="attribute">The reservation-token attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetXorPeerAddress">
             <summary>
             Gets the XOR-peer-address attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetXorPeerAddress(FM.IceLink.STUNXorPeerAddressAttribute)">
             <summary>
             Sets the XOR-peer-address attribute.
             </summary>
             <param name="attribute">The XOR-peer-address attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetXorRelayedAddress">
             <summary>
             Gets the XOR-relayed-address attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetXorRelayedAddress(FM.IceLink.STUNXorRelayedAddressAttribute)">
             <summary>
             Sets the XOR-relayed-address attribute.
             </summary>
             <param name="attribute">The XOR-relayed-address attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetRequestedAddressFamily">
             <summary>
             Gets the requested-address-family attribute.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetRequestedAddressFamily(FM.IceLink.STUNRequestedAddressFamilyAttribute)">
             <summary>
             Sets the requested-address-family attribute.
             </summary>
             <param name="attribute">The requested-address-family attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GenerateTransactionId">
             <summary>
             Generates a random transaction ID.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetAttribute(System.Type)">
             <summary>
             Gets an attribute.
             </summary>
             <param name="attributeType">The type of the attribute.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.SetAttribute``1(``0)">
             <summary>
             Sets an attribute.
             </summary>
             <typeparam name="T">The type of the attribute.</typeparam>
             <param name="attribute">The attribute.</param>
            </member>
        <member name="M:FM.IceLink.STUNMessage.GetBytes">
             <summary>
             Converts this instance to a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.ParseBytes(System.Byte[])">
             <summary>
             Creates a new <see cref="T:FM.IceLink.STUNMessage" /> instance from a byte array.
             </summary>
             <param name="bytes">The byte array.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNMessage.ParseBytes(System.Byte[],System.Int32@)">
             <summary>
             Creates a new <see cref="T:FM.IceLink.STUNMessage" /> instance from a byte array.
             </summary>
             <param name="bytes">The byte array.</param>
             <param name="length">The length of the parsed segment.</param>
             <returns></returns>
            </member>
        <member name="T:FM.IceLink.STUNMessageType">
             <summary>
             The list of valid message types.
             </summary>
            </member>
        <member name="F:FM.IceLink.STUNMessageType.Request">
             <summary>
             Specifies that the message is a request.
             </summary>
            </member>
        <member name="F:FM.IceLink.STUNMessageType.Indication">
             <summary>
             Specifies that the message is an indication (no response).
             </summary>
            </member>
        <member name="F:FM.IceLink.STUNMessageType.SuccessResponse">
             <summary>
             Specifies that the message is a response indicating success.
             </summary>
            </member>
        <member name="F:FM.IceLink.STUNMessageType.ErrorResponse">
             <summary>
             Specifies that the message is a response indicating failure.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNRequestedAddressFamilyAttribute">
             <summary>
             The REQUESTED-ADDRESS-FAMILY attribute is used by clients to request
             the allocation of a specific address type from a server. 
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNRequestedAddressFamilyAttribute.AddressFamily">
             <summary>
             Gets or sets the address family.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNRequestedAddressFamilyAttribute.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRequestedAddressFamilyAttribute" /> class.
             </summary>
             <param name="addressFamily">The address family.</param>
            </member>
        <member name="M:FM.IceLink.STUNRequestedAddressFamilyAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRequestedAddressFamilyAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNRequestedAddressFamilyAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNRequestedAddressFamilyAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.TransportAddress">
             <summary>
             The combination of an IP address and transport
             protocol (such as UDP or TCP) port.
             </summary>
            </member>
        <member name="P:FM.IceLink.TransportAddress.IPAddress">
             <summary>
             Gets or sets the IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.TransportAddress.Port">
             <summary>
             Gets or sets the port.
             </summary>
            </member>
        <member name="M:FM.IceLink.TransportAddress.#ctor(System.String,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.TransportAddress" /> class.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <param name="port">The port.</param>
            </member>
        <member name="M:FM.IceLink.TransportAddress.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
             <returns>
             A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
             </returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.Equals(System.Object)">
             <summary>
             Determines whether the specified object is equal to this instance.
             </summary>
             <param name="obj">The object to compare with this instance.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.IsIPAddress(System.String)">
             <summary>
             Determines whether a string is a valid IPv4 or IPv6 address
             </summary>
             <param name="address">The address.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.SanitizeIPAddress(System.String)">
             <summary>
             Sanitizes the IP address, removing any local information.
             </summary>
             <param name="ipAddress">The IP address to sanitize.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.CheckMask(System.String,System.String,System.String)">
             <summary>
             Compares two addresses to see if they are on
             the same subnet.
             </summary>
             <param name="address1">The first address.</param>
             <param name="address2">The second address.</param>
             <param name="mask">The subnet mask.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.MaskFromPrefixLength(System.Int32)">
             <summary>
             Gets a subnet mask from a prefix length (0-32).
             </summary>
             <param name="prefixLength">The prefix length.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.IsPrivate(System.String)">
             <summary>
             Determines whether the specified IP address is private.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.IsLinkLocal(System.String)">
             <summary>
             Determines whether the specified IP address is link-local.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.IsLoopback(System.String)">
             <summary>
             Determines whether the specified IP address is loopback.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TransportAddress.IsAny(System.String)">
             <summary>
             Determines whether the specified IP address is all zeros
             and represents "any" IP address.
             </summary>
             <param name="ipAddress">The IP address.</param>
            </member>
        <member name="T:FM.IceLink.STUNWrongCredentialsException">
             <summary>
             The credentials in the (non-Allocate)
             request do not match those used to create the allocation.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNWrongCredentialsException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNWrongCredentialsException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNWrongCredentialsException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNWrongCredentialsException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNUnsupportedTransportProtocolException">
             <summary>
             The Allocate request asked the
             server to use a transport protocol between the server and the peer
             that the server does not support.  NOTE: This does NOT refer to
             the transport protocol used in the 5-tuple.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnsupportedTransportProtocolException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnsupportedTransportProtocolException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNUnsupportedTransportProtocolException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNUnsupportedTransportProtocolException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNAllocationQuotaReachedException">
             <summary>
             No more allocations using this
             username can be created at the present time.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAllocationQuotaReachedException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAllocationQuotaReachedException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAllocationQuotaReachedException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAllocationQuotaReachedException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNInsufficientCapacityException">
             <summary>
             The server is unable to carry out the
             request due to some capacity limit being reached.  In an Allocate
             response, this could be due to the server having no more relayed
             transport addresses available at that time, having none with the
             requested properties, or the one that corresponds to the specified
             reservation token is not available.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInsufficientCapacityException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInsufficientCapacityException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNInsufficientCapacityException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNInsufficientCapacityException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNAllocationMismatchException">
             <summary>
             A request was received by the server that
             requires an allocation to be in place, but no allocation exists,
             or a request was received that requires no allocation, but an
             allocation exists.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAllocationMismatchException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAllocationMismatchException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAllocationMismatchException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAllocationMismatchException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNForbiddenException">
             <summary>
             The request was valid but cannot be performed due
             to administrative or similar restrictions.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNForbiddenException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNForbiddenException" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNForbiddenException.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNForbiddenException" /> class.
             </summary>
             <param name="message">The message.</param>
            </member>
        <member name="T:FM.IceLink.STUNXorRelayedAddressAttribute">
             <summary>
             The XOR-RELAYED-ADDRESS is present in Allocate responses.  It
             specifies the address and port that the server allocated to the
             client.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNXorRelayedAddressAttribute.IPAddress">
             <summary>
             Gets or sets the IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNXorRelayedAddressAttribute.Port">
             <summary>
             Gets or sets the port.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNXorRelayedAddressAttribute.TransactionId">
             <summary>
             Gets or sets the transaction ID.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNXorRelayedAddressAttribute.#ctor(System.String,System.Int32,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNXorRelayedAddressAttribute" /> class.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <param name="port">The port.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="M:FM.IceLink.STUNXorRelayedAddressAttribute.FromValueBytes(System.Byte[],System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNXorRelayedAddressAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="M:FM.IceLink.STUNXorRelayedAddressAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNXorRelayedAddressAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNReservationTokenAttribute">
             <summary>
             The RESERVATION-TOKEN attribute contains a token that uniquely
             identifies a relayed transport address being held in reserve by the
             server.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNReservationTokenAttribute.Token">
             <summary>
             Gets or sets the reservation token.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNReservationTokenAttribute.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNReservationTokenAttribute" /> class.
             </summary>
             <param name="token">The reservation token.</param>
            </member>
        <member name="M:FM.IceLink.STUNReservationTokenAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNReservationTokenAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNReservationTokenAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNReservationTokenAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNDontFragmentAttribute">
             <summary>
             This attribute is used by the client to request that the server set
             the DF (Don't Fragment) bit in the IP header when relaying the
             application data onward to the peer.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNDontFragmentAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNDontFragmentAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNDontFragmentAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNDontFragmentAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNDontFragmentAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNDontFragmentAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNRequestedTransportAttribute">
             <summary>
             This attribute is used by the client to request a specific transport
             protocol for the allocated transport address.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNRequestedTransportAttribute.Protocol">
             <summary>
             Gets or sets the transport protocol.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNRequestedTransportAttribute.UdpProtocol">
             <summary>
             Gets the UDP transport protocol.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNRequestedTransportAttribute.TcpProtocol">
             <summary>
             Gets the TCP transport protocol.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNRequestedTransportAttribute.#ctor(System.Byte)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRequestedTransportAttribute" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNRequestedTransportAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRequestedTransportAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value in bytes.</param>
            </member>
        <member name="M:FM.IceLink.STUNRequestedTransportAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNRequestedTransportAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNEvenPortAttribute">
             <summary>
             This attribute allows the client to request that the port in the
             relayed transport address be even, and (optionally) that the server
             reserve the next-higher port number.
             </summary>
            </member>
        <member name="F:FM.IceLink.STUNEvenPortAttribute.ReserveNextHigher">
             <summary>
             Gets or sets whether the server should reserve the next-higher port number.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNEvenPortAttribute.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNEvenPortAttribute" /> class.
             </summary>
             <param name="reserveNextHigher">Whether the server should reserve the next-higher port number.</param>
            </member>
        <member name="M:FM.IceLink.STUNEvenPortAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNEvenPortAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNEvenPortAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNEvenPortAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNXorPeerAddressAttribute">
             <summary>
             The XOR-PEER-ADDRESS specifies the address and port of the peer as
             seen from the TURN server.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNXorPeerAddressAttribute.IPAddress">
             <summary>
             Gets or sets the IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNXorPeerAddressAttribute.Port">
             <summary>
             Gets or sets the port.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNXorPeerAddressAttribute.TransactionId">
             <summary>
             Gets or sets the transaction ID.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNXorPeerAddressAttribute.#ctor(System.String,System.Int32,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNXorPeerAddressAttribute" /> class.
             </summary>
             <param name="ipAddress">The IP address.</param>
             <param name="port">The port.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="M:FM.IceLink.STUNXorPeerAddressAttribute.FromValueBytes(System.Byte[],System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNXorPeerAddressAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="M:FM.IceLink.STUNXorPeerAddressAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNXorPeerAddressAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNDataAttribute">
             <summary>
             The DATA attribute is present in all Send and Data indications.
             The value portion of this attribute is variable length and consists of
             the application data.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNDataAttribute.Data">
             <summary>
             Gets or sets the data.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNDataAttribute.#ctor(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNDataAttribute" /> class.
             </summary>
             <param name="data">The data.</param>
            </member>
        <member name="M:FM.IceLink.STUNDataAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNDataAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNDataAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNDataAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNLifetimeAttribute">
             <summary>
             The LIFETIME attribute represents the duration for which the server
             will maintain an allocation in the absence of a refresh (in seconds).
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNLifetimeAttribute.Lifetime">
             <summary>
             Gets or sets the allocation duration in seconds.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNLifetimeAttribute.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNLifetimeAttribute" /> class.
             </summary>
             <param name="lifetime">The allocation duration in seconds.</param>
            </member>
        <member name="M:FM.IceLink.STUNLifetimeAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNLifetimeAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNLifetimeAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNLifetimeAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.STUNChannelBindResponse">
             <summary>
             A STUN channel-bind response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNChannelBindResponse.#ctor(System.Byte[],System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNChannelBindResponse" /> class.
             </summary>
             <param name="transactionId">The transaction ID.</param>
             <param name="success">Whether the request was successful.</param>
            </member>
        <member name="T:FM.IceLink.STUNChannelBindRequest">
             <summary>
             A STUN channel-bind request.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNChannelBindRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNChannelBindRequest" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNCreatePermissionResponse">
             <summary>
             A STUN create-permission response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNCreatePermissionResponse.#ctor(System.Byte[],System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNCreatePermissionResponse" /> class.
             </summary>
             <param name="transactionId">The transaction ID.</param>
             <param name="success">Whether the request was successful.</param>
            </member>
        <member name="T:FM.IceLink.STUNCreatePermissionRequest">
             <summary>
             A STUN create-permission request.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNCreatePermissionRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNCreatePermissionRequest" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNDataIndication">
             <summary>
             A STUN data indication.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNDataIndication.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNDataIndication" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNSendIndication">
             <summary>
             A STUN send indication.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNSendIndication.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNSendIndication" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNRefreshRequest">
             <summary>
             A STUN refresh request.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNRefreshRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRefreshRequest" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNRefreshResponse">
             <summary>
             A STUN refresh response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNRefreshResponse.#ctor(System.Byte[],System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRefreshResponse" /> class.
             </summary>
             <param name="transactionId">The transaction ID.</param>
             <param name="success">Whether the request was successful.</param>
            </member>
        <member name="T:FM.IceLink.STUNAllocateResponse">
             <summary>
             A STUN allocate response.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAllocateResponse.#ctor(System.Byte[],System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAllocateResponse" /> class.
             </summary>
             <param name="transactionId">The transaction ID.</param>
             <param name="success">Whether the request was successful.</param>
            </member>
        <member name="T:FM.IceLink.STUNAllocateRequest">
             <summary>
             A STUN allocate request.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAllocateRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAllocateRequest" /> class.
             </summary>
            </member>
        <member name="T:FM.IceLink.STUNChannelBindMessage">
             <summary>
             A generic STUN channel-bind message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNChannelBindMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNChannelBindMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNCreatePermissionMessage">
             <summary>
             A generic STUN create-permission message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNCreatePermissionMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNCreatePermissionMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNDataMessage">
             <summary>
             A generic STUN data message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNDataMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNDataMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNSendMessage">
             <summary>
             A generic STUN send message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNSendMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNSendMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNRefreshMessage">
             <summary>
             A generic STUN refresh message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNRefreshMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNRefreshMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNAllocateMessage">
             <summary>
             A generic STUN allocate message.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNAllocateMessage.#ctor(FM.IceLink.STUNMessageType,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNAllocateMessage" /> class.
             </summary>
             <param name="messageType">The type of the message.</param>
             <param name="transactionId">The transaction ID.</param>
            </member>
        <member name="T:FM.IceLink.STUNChannelNumberAttribute">
             <summary>
             The CHANNEL-NUMBER attribute contains the number of the channel.
             </summary>
            </member>
        <member name="P:FM.IceLink.STUNChannelNumberAttribute.ChannelNumber">
             <summary>
             Gets or sets the channel number.
             </summary>
            </member>
        <member name="M:FM.IceLink.STUNChannelNumberAttribute.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNChannelNumberAttribute" /> class.
             </summary>
             <param name="channelNumber">The channel number.</param>
            </member>
        <member name="M:FM.IceLink.STUNChannelNumberAttribute.FromValueBytes(System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.STUNChannelNumberAttribute" /> class.
             </summary>
             <param name="valueBytes">The attribute value as a byte array.</param>
            </member>
        <member name="M:FM.IceLink.STUNChannelNumberAttribute.GetValueBytes">
             <summary>
             Gets the value as a byte array.
             </summary>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.STUNChannelNumberAttribute.ToString">
             <summary>
             Returns a string that represents this instance.
             </summary>
             <returns>
             A string that represents this instance.
             </returns>
            </member>
        <member name="T:FM.IceLink.TURNDataReceivedArgs">
             <summary>
             Arguments used when data is received on the IceLink relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNDataReceivedArgs.Allocation">
             <summary>
             Gets or sets the allocation.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNDataReceivedArgs.RemoteAddress">
             <summary>
             Gets or sets the remote address.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNDataReceivedArgs.Data">
             <summary>
             Gets or sets the data.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNDataReceivedArgs.#ctor(FM.IceLink.TURNAllocation,FM.IceLink.TransportAddress,System.Byte[])">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.TURNDataReceivedArgs" /> class.
             </summary>
             <param name="allocation">The allocation.</param>
             <param name="remoteAddress">The remote address.</param>
             <param name="data">The data.</param>
            </member>
        <member name="T:FM.IceLink.TURNSocketAcceptedArgs">
             <summary>
             Arguments used when a socket is accepted on the IceLink relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNSocketAcceptedArgs.Allocation">
             <summary>
             Gets or sets the allocation.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNSocketAcceptedArgs.Socket">
             <summary>
             Gets or sets the socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNSocketAcceptedArgs.VirtualSocket">
             <summary>
             Gets or sets the virtual socket.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNSocketAcceptedArgs.#ctor(FM.IceLink.TURNAllocation,FM.TcpSocket,FM.IceLink.VirtualTcpSocket)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.TURNSocketAcceptedArgs" /> class.
             </summary>
             <param name="allocation">The allocation.</param>
             <param name="socket">The socket.</param>
             <param name="virtualSocket">The virtual socket.</param>
            </member>
        <member name="T:FM.IceLink.TURNChannelBinding">
             <summary>
             A TURN channel binding on the IceLink relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNChannelBinding.Address">
             <summary>
             Gets or sets the address.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNChannelBinding.ChannelNumber">
             <summary>
             Gets or sets the channel number.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNChannelBinding.TimeToExpiry">
             <summary>
             Gets the time to expiry in seconds.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNChannelBinding.IsExpired">
             <summary>
             Gets whether the permission has expired.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNChannelBinding.#ctor(FM.IceLink.TransportAddress,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.TURNPermission" /> class.
             </summary>
             <param name="address">The address.</param>
             <param name="channelNumber">The channel number.</param>
            </member>
        <member name="M:FM.IceLink.TURNChannelBinding.ExtendTimeToExpiry">
             <summary>
             Extends the time to expiry.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNChannelBinding.SetTimeToExpiry(System.Int32)">
             <summary>
             Sets the time to expiry.
             </summary>
             <param name="timeToExpiry">The time to expiry, in seconds.</param>
            </member>
        <member name="M:FM.IceLink.TURNChannelBinding.ToString">
             <summary>
             Displays a friendly description of this permission.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.TURNTcpAllocation.Socket">
             <summary>
             Gets or sets the TCP socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNTcpAllocation.VirtualSocket">
             <summary>
             Gets or sets the virtual TCP socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNTcpAllocation.LocalIPAddress">
             <summary>
             Gets the local IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNTcpAllocation.LocalPort">
             <summary>
             Gets the local port.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNTcpAllocation.#ctor(System.Byte[],FM.TcpSocket,FM.IceLink.VirtualTcpSocket,FM.IceLink.TransportAddress,System.String,System.String,System.Int32,FM.SingleAction{FM.IceLink.TURNSocketAcceptedArgs},FM.SingleAction{FM.IceLink.TransportAddress})">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.TURNTcpAllocation" /> class.
             </summary>
             <param name="transactionId">The transaction ID.</param>
             <param name="socket">The TCP socket.</param>
             <param name="virtualSocket">The virtual TCP socket.</param>
             <param name="clientAddress">The client address.</param>
             <param name="username">The username.</param>
             <param name="realm">The realm.</param>
             <param name="lifetime">The lifetime in seconds.</param>
             <param name="onAccept">The accept callback.</param>
             <param name="onExpires">The expires callback.</param>
            </member>
        <member name="P:FM.IceLink.TURNTcpAllocation.IsClosed">
             <summary>
             Gets a value indicating whether the socket is closed.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNTcpAllocation.Connect(FM.TcpConnectArgs)">
             <summary>
             Connects the socket.
             </summary>
             <param name="connectArgs">The connect arguments.</param>
            </member>
        <member name="M:FM.IceLink.TURNTcpAllocation.StartAccepting">
             <summary>
             Starts listening for incoming packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNTcpAllocation.Close">
             <summary>
             Closes the TCP socket for this allocation.
             </summary>
            </member>
        <member name="T:FM.IceLink.TURNAllocation">
             <summary>
             A TURN allocation on the IceLink relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.TransactionId">
             <summary>
             Gets or sets the transaction ID.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.Reservation">
             <summary>
             Gets or sets the reservation code.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.ClientAddress">
             <summary>
             Gets or sets the client address.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.Username">
             <summary>
             Gets or sets the username.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.Realm">
             <summary>
             Gets or sets the realm.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.LastLifetime">
             <summary>
             Gets the last lifetime, in seconds.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.IsExpired">
             <summary>
             Gets whether the allocation has expired.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.LocalIPAddress">
             <summary>
             Gets the local IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.LocalPort">
             <summary>
             Gets the local port.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNAllocation.Permissions">
             <summary>
             Gets the array of permissions.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNAllocation.#ctor(System.Byte[],System.Byte[],FM.IceLink.TransportAddress,System.String,System.String,System.Int32,FM.SingleAction{FM.IceLink.TransportAddress})">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.TURNAllocation" /> class.
             </summary>
             <param name="transactionId">The transaction ID.</param>
             <param name="reservation">The reservation code.</param>
             <param name="clientAddress">The client address.</param>
             <param name="username">The username.</param>
             <param name="realm">The realm.</param>
             <param name="lifetime">The allocate lifetime in seconds.</param>
             <param name="onExpires">The expires callback.</param>
            </member>
        <member name="M:FM.IceLink.TURNAllocation.Refresh(System.Int32)">
             <summary>
             Refreshes the allocation.
             </summary>
             <param name="lifetime">The refresh lifetime in seconds.</param>
             <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
            </member>
        <member name="M:FM.IceLink.TURNAllocation.AddPermission(System.String)">
             <summary>
             Adds a permission for a remote address.
             </summary>
             <param name="remoteIPAddress">The remote IP address.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TURNAllocation.AddChannelBinding(FM.IceLink.TransportAddress,System.Int32)">
             <summary>
             Adds a channel binding for a remote address.
             </summary>
             <param name="remoteAddress">The remote address.</param>
             <param name="channelNumber">The channel number.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TURNAllocation.HasPermission(System.String)">
             <summary>
             Checks if a remote IP address has permission on this allocation.
             </summary>
             <param name="remoteIPAddress">The remote IP address.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TURNAllocation.HasChannelBindingNumber(System.Int32)">
             <summary>
             Checks if a channel number is bound on this allocation.
             </summary>
             <param name="channelNumber">The channel number.</param>
             <returns>The remote address.</returns>
            </member>
        <member name="M:FM.IceLink.TURNAllocation.HasChannelBindingAddress(FM.IceLink.TransportAddress)">
             <summary>
             Checks if a remote address is bound on this allocation.
             </summary>
             <param name="remoteAddress">The remote address.</param>
             <returns>The channel number.</returns>
            </member>
        <member name="M:FM.IceLink.TURNAllocation.Close">
             <summary>
             Closes the socket for this allocation.
             </summary>
            </member>
        <member name="T:FM.IceLink.TURNPermission">
             <summary>
             A TURN permission on the IceLink relay.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNPermission.Address">
             <summary>
             Gets or sets the address.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNPermission.TimeToExpiry">
             <summary>
             Gets the time to expiry in seconds.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNPermission.IsExpired">
             <summary>
             Gets whether the permission has expired.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNPermission.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.TURNPermission" /> class.
             </summary>
             <param name="address">The address.</param>
            </member>
        <member name="M:FM.IceLink.TURNPermission.ExtendTimeToExpiry">
             <summary>
             Extends the time to expiry.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNPermission.SetTimeToExpiry(System.Int32)">
             <summary>
             Sets the time to expiry.
             </summary>
             <param name="timeToExpiry">The time to expiry, in seconds.</param>
            </member>
        <member name="M:FM.IceLink.TURNPermission.ToString">
             <summary>
             Displays a friendly description of this permission.
             </summary>
             <returns></returns>
            </member>
        <member name="P:FM.IceLink.TURNUdpAllocation.ServerSocket">
             <summary>
             Gets or sets the UDP server socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNUdpAllocation.VirtualServerSocket">
             <summary>
             Gets or sets the virtual UDP server socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNUdpAllocation.Socket">
             <summary>
             Gets or sets the UDP socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNUdpAllocation.VirtualSocket">
             <summary>
             Gets or sets the virtual UDP socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNUdpAllocation.LocalIPAddress">
             <summary>
             Gets the local IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.TURNUdpAllocation.LocalPort">
             <summary>
             Gets the local port.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNUdpAllocation.#ctor(FM.UdpSocket,FM.IceLink.VirtualUdpSocket,System.Byte[],System.Byte[],FM.UdpSocket,FM.IceLink.VirtualUdpSocket,FM.IceLink.TransportAddress,System.String,System.String,System.Int32,FM.Action3{FM.IceLink.TURNUdpAllocation,FM.IceLink.TransportAddress,System.Byte[]},FM.SingleAction{FM.IceLink.TransportAddress})">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.TURNUdpAllocation" /> class.
             </summary>
             <param name="serverSocket">The UDP server socket.</param>
             <param name="virtualServerSocket">The virtual UDP server socket.</param>
             <param name="transactionId">The transaction ID.</param>
             <param name="reservation">The reservation code.</param>
             <param name="socket">The UDP socket.</param>
             <param name="virtualSocket">The virtual UDP socket.</param>
             <param name="clientAddress">The client address.</param>
             <param name="username">The username.</param>
             <param name="realm">The realm.</param>
             <param name="lifetime">The lifetime in seconds.</param>
             <param name="onReceive">The receive callback.</param>
             <param name="onExpires">The expires callback.</param>
            </member>
        <member name="P:FM.IceLink.TURNUdpAllocation.IsClosed">
             <summary>
             Gets a value indicating whether the socket is closed.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNUdpAllocation.StartReceiving">
             <summary>
             Starts listening for incoming packets.
             </summary>
            </member>
        <member name="M:FM.IceLink.TURNUdpAllocation.SendData(System.Byte[],FM.IceLink.TransportAddress,System.Exception@)">
             <summary>
             Sends data from this allocation.
             </summary>
             <param name="data">The data to send.</param>
             <param name="remoteAddress">The remote address.</param>
             <param name="exception">The exception that occurred, if any.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TURNUdpAllocation.Close">
             <summary>
             Closes the UDP socket for this allocation.
             </summary>
            </member>
        <member name="T:FM.IceLink.TcpOutputArgsExtensions">
             <summary>
             Extensions for <see cref="T:FM.TcpOutputArgs" />.
             </summary>
            </member>
        <member name="M:FM.IceLink.TcpOutputArgsExtensions.GetVirtualSocket(FM.TcpOutputArgs)">
             <summary>
             Gets the virtual socket.
             </summary>
             <param name="args">The arguments.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TcpOutputArgsExtensions.SetVirtualSocket(FM.TcpOutputArgs,FM.IceLink.VirtualTcpSocket)">
             <summary>
             Sets the virtual socket.
             </summary>
             <param name="args">The arguments.</param>
             <param name="virtualSocket">The virtual socket.</param>
            </member>
        <member name="T:FM.IceLink.TcpAcceptSuccessArgsExtensions">
             <summary>
             Extensions for <see cref="T:FM.TcpAcceptSuccessArgs" />.
             </summary>
            </member>
        <member name="M:FM.IceLink.TcpAcceptSuccessArgsExtensions.GetVirtualAcceptSocket(FM.TcpAcceptSuccessArgs)">
             <summary>
             Gets the virtual socket.
             </summary>
             <param name="args">The arguments.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.TcpAcceptSuccessArgsExtensions.SetVirtualAcceptSocket(FM.TcpAcceptSuccessArgs,FM.IceLink.VirtualTcpSocket)">
             <summary>
             Sets the virtual socket.
             </summary>
             <param name="args">The arguments.</param>
             <param name="virtualAcceptSocket">The accepted virtual socket.</param>
            </member>
        <member name="T:FM.IceLink.VirtualTcpSocket">
             <summary>
             A virtual TCP socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualTcpSocket.IsClosed">
             <summary>
             Gets a value indicating whether this instance is closed.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualTcpSocket.LocalPort">
             <summary>
             Gets or sets the local port.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualTcpSocket.LocalIPAddress">
             <summary>
             Gets or sets the local IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualTcpSocket.RemotePort">
             <summary>
             Gets or sets the remote port.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualTcpSocket.RemoteIPAddress">
             <summary>
             Gets or sets the remote IP address.
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.#ctor(FM.IceLink.VirtualAdapter)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.VirtualTcpSocket" /> class.
             </summary>
             <param name="adapter">The virtual adapter.</param>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.Bind(System.String,System.Int32)">
             <summary>
             Binds the socket to a local endpoint.
             </summary>
             <param name="ipAddress">The local IP address.</param>
             <param name="port">The local port.</param>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.Accept">
             <summary>
             Accepts a new socket synchronously.
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.AcceptAsync(FM.TcpAcceptArgs)">
             <summary>
             Accepts a new socket asynchronously.
             </summary>
             <param name="acceptArgs">The accept arguments.</param>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.Connect(System.String,System.Int32)">
             <summary>
             Connects to the specified IP address synchronously.
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.ConnectAsync(FM.TcpConnectArgs)">
             <summary>
             Connects to the specified IP address asynchronously.
             </summary>
             <param name="connectArgs">The connect arguments.</param>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.Send(System.Byte[])">
             <summary>
             Sends data synchronously.
             </summary>
             <param name="buffer">The buffer.</param>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.SendAsync(FM.TcpSendArgs)">
             <summary>
             Sends data asynchronously.
             </summary>
             <param name="sendArgs">The send arguments.</param>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.Receive(System.Int32)">
             <summary>
             Receives data synchronously.
             </summary>
             <param name="timeout">The receive timeout.</param>
             <returns>
             The received packet.
             </returns>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.ReceiveAsync(FM.TcpReceiveArgs)">
             <summary>
             Receives data asynchronously.
             </summary>
             <param name="receiveArgs">The receive arguments.</param>
            </member>
        <member name="M:FM.IceLink.VirtualTcpSocket.Close">
             <summary>
             Closes the socket.
             </summary>
            </member>
        <member name="T:FM.IceLink.VirtualNatMode">
             <summary>
             Defines various virtual network NAT modes.
             </summary>
            </member>
        <member name="F:FM.IceLink.VirtualNatMode.FullCone">
             <summary>
             Once an internal address (iAddr:iPort) is mapped to an external
             address (eAddr:ePort), any packets from iAddr:iPort will be sent
             through eAddr:ePort. Any external host can send packets to
             iAddr:iPort by sending packets to eAddr:ePort.
             </summary>
            </member>
        <member name="F:FM.IceLink.VirtualNatMode.AddressRestrictedCone">
             <summary>
             Once an internal address (iAddr:iPort) is mapped to an external
             address (eAddr:ePort), any packets from iAddr:iPort will be sent
             through eAddr:ePort. An external host (hAddr:any) can send
             packets to iAddr:iPort by sending packets to eAddr:ePort only if
             iAddr:iPort has previously sent a packet to hAddr:any. "Any"
             means the port number doesn't matter.
             </summary>
            </member>
        <member name="F:FM.IceLink.VirtualNatMode.PortRestrictedCone">
             <summary>
             Once an internal address (iAddr:iPort) is mapped to an external
             address (eAddr:ePort), any packets from iAddr:iPort will be sent
             through eAddr:ePort. An external host (hAddr:hPort) can send
             packets to iAddr:iPort by sending packets to eAddr:ePort only if
             iAddr:iPort has previously sent a packet to hAddr:hPort.
             </summary>
            </member>
        <member name="F:FM.IceLink.VirtualNatMode.Symmetric">
             <summary>
             Each request from the same internal IP address and port to a
             specific destination IP address and port is mapped to a unique
             external source IP address and port, if the same internal host
             sends a packet even with the same source address and port but
             to a different destination, a different mapping is used. Only
             an external host that receives a packet from an internal host
             can send a packet back.
             </summary>
            </member>
        <member name="T:FM.IceLink.VirtualNat">
             <summary>
             A virtual network NAT.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNat.Mode">
             <summary>
             Gets or sets the NAT mode.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNat.Mappings">
             <summary>
             Gets the NAT mappings.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNat.Timeout">
             <summary>
             Gets or sets the NAT mapping timeout.
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualNat.#ctor(FM.IceLink.VirtualNatMode)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.VirtualNat" /> class.
             </summary>
             <param name="mode">The NAT mode.</param>
            </member>
        <member name="M:FM.IceLink.VirtualNat.GetMapping(System.Int32,System.String@,System.Int32@,System.String,System.Int32)">
             <summary>
             Gets a NAT mapping.
             </summary>
             <param name="port">The local port.</param>
             <param name="internalIPAddress">The internal IP address.</param>
             <param name="internalPort">The internal port.</param>
             <param name="externalIPAddress">The external IP address.</param>
             <param name="externalPort">The external port.</param>
             <returns><c>true</c> if a mapping exists; otherwise, <c>false</c>.</returns>
            </member>
        <member name="T:FM.IceLink.VirtualAdapter">
             <summary>
             A virtual network adapter.
             </summary>
            </member>
        <member name="T:FM.IceLink.PacketDeliveredArgs">
             <summary>
             Arguments for the packet-delivered event.
             </summary>
            </member>
        <member name="P:FM.IceLink.PacketDeliveredArgs.Port">
             <summary>
             Gets or sets the port on which the packet was received.
             </summary>
            </member>
        <member name="T:FM.IceLink.VirtualDevice">
             <summary>
             A virtual network device.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualDevice.Network">
             <summary>
             Gets or sets the virtual network to which this device belongs.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualDevice.IPAddress1">
             <summary>
             Gets or sets the first byte of the device IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualDevice.IPAddress2">
             <summary>
             Gets or sets the second byte of the device IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualDevice.IPAddress3">
             <summary>
             Gets or sets the third byte of the device IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualDevice.IPAddress4">
             <summary>
             Gets or sets the fourth byte of the device IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualDevice.UseDhcp">
             <summary>
             Gets or sets whether to use DHCP to assign an IP address to this device.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualDevice.IPAddress">
             <summary>
             Gets the device IP address as a string.
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualDevice.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.VirtualDevice" /> class.
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualDevice.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.VirtualDevice" /> class.
             </summary>
             <param name="ipAddress1">The first byte of the device IP address.</param>
             <param name="ipAddress2">The second byte of the device IP address.</param>
             <param name="ipAddress3">The third byte of the device IP address.</param>
             <param name="ipAddress4">The fourth byte of the device IP address.</param>
            </member>
        <member name="T:FM.IceLink.VirtualNatMapping">
             <summary>
             A virtual network NAT mapping.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNatMapping.Port">
             <summary>
             Gets or sets the mapped port.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNatMapping.IsForwarding">
             <summary>
             Gets or sets whether this is a forwarded mapping.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNatMapping.InternalAddress">
             <summary>
             Gets or sets the address of the internal device.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNatMapping.ExternalAddresses">
             <summary>
             Gets or sets the address(es) of the external device(s).
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualNatMapping.#ctor(System.Int32,FM.SingleAction{FM.IceLink.VirtualNatMapping})">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.VirtualNatMapping" /> class.
             </summary>
             <param name="timeout">The NAT mapping timeout.</param>
             <param name="timeoutCallback">The callback to invoke when a NAT mapping times out.</param>
            </member>
        <member name="M:FM.IceLink.VirtualNatMapping.ToString">
             <summary>
             Formats this mapping as a string.
             </summary>
            </member>
        <member name="T:FM.IceLink.VirtualNetwork">
             <summary>
             A virtual network.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.Devices">
             <summary>
             Gets a list of connected devices.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.Nat">
             <summary>
             Gets or sets the NAT.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.NatMode">
             <summary>
             Gets or sets the NAT mode.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.DhcpIPAddress1">
             <summary>
             Gets or sets the first byte of the DHCP range to use when assigning IP addresses.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.DhcpIPAddress2">
             <summary>
             Gets or sets the second byte of the DHCP range to use when assigning IP addresses.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.DhcpIPAddress3">
             <summary>
             Gets or sets the third byte of the DHCP range to use when assigning IP addresses.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.DhcpIPAddress4Start">
             <summary>
             Gets or sets the starting fourth byte of the DHCP range to use when assigning IP addresses.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.DhcpIPAddress4End">
             <summary>
             Gets or sets the ending fourth byte of the DHCP range to use when assigning IP addresses.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.InternalIPAddress1">
             <summary>
             Gets or sets the first byte of the device's internal IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.InternalIPAddress2">
             <summary>
             Gets or sets the second byte of the device's internal IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.InternalIPAddress3">
             <summary>
             Gets or sets the third byte of the device's internal IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualNetwork.InternalIPAddress4">
             <summary>
             Gets or sets the fourth byte of the device's internal IP address.
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualNetwork.#ctor(FM.IceLink.VirtualNatMode,System.Int32,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.VirtualNetwork" /> class.
             </summary>
             <param name="natMode">The NAT mode.</param>
             <param name="dhcpAddress1">The first byte of the DHCP range to use when assigning IP addresses.</param>
             <param name="dhcpAddress2">The second byte of the DHCP range to use when assigning IP addresses.</param>
             <param name="dhcpAddress3">The third byte of the DHCP range to use when assigning IP addresses.</param>
            </member>
        <member name="M:FM.IceLink.VirtualNetwork.AddDevice(FM.IceLink.VirtualDevice)">
             <summary>
             Adds a device to the network.
             </summary>
             <param name="device">The device to add.</param>
            </member>
        <member name="M:FM.IceLink.VirtualNetwork.RemoveDevice(FM.IceLink.VirtualDevice)">
             <summary>
             Removes a device from the network.
             </summary>
             <param name="device">The device to remove.</param>
             <returns><c>true</c> if the device was removed; otherwise, <c>false</c></returns>
            </member>
        <member name="M:FM.IceLink.VirtualNetwork.AddForwarding(System.Int32,System.String)">
             <summary>
             Adds the forwarding.
             </summary>
             <param name="port">The forwarded port.</param>
             <param name="ipAddress">The IP address to forward.</param>
            </member>
        <member name="M:FM.IceLink.VirtualNetwork.RemoveForwarding(System.Int32)">
             <summary>
             Removes a forwarding.
             </summary>
             <param name="port">The forwarded port.</param>
            </member>
        <member name="T:FM.IceLink.VirtualPacket">
             <summary>
             A virtual network packet.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualPacket.SourceIPAddress">
             <summary>
             Gets or sets the source IP address.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualPacket.SourcePort">
             <summary>
             Gets or sets the source port.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualPacket.Payload">
             <summary>
             Gets or sets the data payload.
             </summary>
            </member>
        <member name="T:FM.IceLink.VirtualUdpSocketExtensions">
             <summary>
             Virtual UDP socket extensions.
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualUdpSocketExtensions.GetVirtualSocket(FM.UdpOutputArgs)">
             <summary>
             Gets the virtual socket.
             </summary>
             <param name="args">The arguments.</param>
             <returns></returns>
            </member>
        <member name="M:FM.IceLink.VirtualUdpSocketExtensions.SetVirtualSocket(FM.UdpOutputArgs,FM.IceLink.VirtualUdpSocket)">
             <summary>
             Sets the virtual socket.
             </summary>
             <param name="args">The arguments.</param>
             <param name="virtualSocket">The virtual socket.</param>
            </member>
        <member name="T:FM.IceLink.VirtualUdpSocket">
             <summary>
             A virtual UDP socket.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualUdpSocket.IsClosed">
             <summary>
             Gets a value indicating whether this instance is closed.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualUdpSocket.LocalPort">
             <summary>
             Gets or sets the local port.
             </summary>
            </member>
        <member name="P:FM.IceLink.VirtualUdpSocket.LocalIPAddress">
             <summary>
             Gets or sets the local IP address.
             </summary>
            </member>
        <member name="M:FM.IceLink.VirtualUdpSocket.#ctor(FM.IceLink.VirtualAdapter)">
             <summary>
             Initializes a new instance of the <see cref="T:FM.IceLink.VirtualUdpSocket" /> class.
             </summary>
             <param name="adapter">The virtual adapter.</param>
            </member>
        <member name="M:FM.IceLink.VirtualUdpSocket.Bind(System.String,System.Int32)">
             <summary>
             Binds the socket to a local endpoint.
             </summary>
             <param name="ipAddress">The local IP address.</param>
             <param name="port">The local port.</param>
            </member>
        <member name="M:FM.IceLink.VirtualUdpSocket.Send(System.Byte[],System.String,System.Int32)">
             <summary>
             Sends data synchronously.
             </summary>
             <param name="buffer">The buffer.</param>
             <param name="ipAddress">The remote IP address.</param>
             <param name="port">The remote port.</param>
             <returns>The number of bytes sent.</returns>
            </member>
        <member name="M:FM.IceLink.VirtualUdpSocket.SendAsync(FM.UdpSendArgs)">
             <summary>
             Sends data asynchronously.
             </summary>
             <param name="sendArgs">The send arguments.</param>
            </member>
        <member name="M:FM.IceLink.VirtualUdpSocket.Receive(System.Int32)">
             <summary>
             Receives data synchronously.
             </summary>
             <param name="timeout">The receive timeout.</param>
             <returns>
             The received packet.
             </returns>
            </member>
        <member name="M:FM.IceLink.VirtualUdpSocket.ReceiveAsync(FM.UdpReceiveArgs)">
             <summary>
             Receives data asynchronously.
             </summary>
             <param name="receiveArgs">The receive arguments.</param>
            </member>
        <member name="M:FM.IceLink.VirtualUdpSocket.Close">
             <summary>
             Closes the socket.
             </summary>
            </member>
        <member name="T:FM.IceLink.X509Certificate">
             <summary>
             An X.509 certificate.
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPrivateKey.Modulus">
             <summary>
             Gets or sets the modulus (n).
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPrivateKey.PublicExponent">
             <summary>
             Gets or sets the public exponent (e).
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPrivateKey.PrivateExponent">
             <summary>
             Gets or sets the private exponent (d).
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPrivateKey.Prime1">
             <summary>
             Gets or sets the first prime value (p).
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPrivateKey.Prime2">
             <summary>
             Gets or sets the second prime value (q).
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPrivateKey.Exponent1">
             <summary>
             Gets or sets the first exponent value (dp).
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPrivateKey.Exponent2">
             <summary>
             Gets or sets the second exponent value (dq).
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPrivateKey.Coefficient">
             <summary>
             Gets or sets the coefficient (inverse-q).
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPublicKey.Modulus">
             <summary>
             Gets or sets the modulus (n).
             </summary>
            </member>
        <member name="P:FM.IceLink.X509RsaPublicKey.Exponent">
             <summary>
             Gets or sets the public exponent (e).
             </summary>
            </member>
    </members>
</doc>
